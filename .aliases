#!bin/env zsh
alias crsr="echo -ne '\e[6 q'"
alias dateformatcodes='date --help | sed -n '\''/^FORMAT/,//p'\'
alias dfc='date --help | sed -n '\''/^FORMAT/,//p'\'
alias null='>/dev/null 2>&1 &'
alias opn='m /data/data/com.termux/files/home/openssh/open'
alias psf='ps -f'
alias psg='ps -e | grep '
alias pp='python -mjson.tool | pygmentize -l js'
alias reset-colors='tput init'
alias sb='source ~/.config/.bashrc'
alias sortnr='sort -n -r'
alias sz='source ~/.zshrc'
alias s='source'
alias forgit="source <(curl -sSL git.io/forgit)"
alias fsh='fast-theme'
alias zsnapshot='source ~/.zsh/custom/plugins/zsnapshot/__zsnapshot > snap-$(date +%Y.%m.%d_%H:%M:%S)'

# apt
alias \
    apti='apt install' \
    aptp='apt purge' \
    aptr='apt remove' \
    aptri='apt reinstall' \
    aptu='apt update -yy && apt full-upgrade -qq'

# commands
alias \
    HMBs='du -h --max-depth=1 --one-file-system ~' \
    MBs='du -h --max-depth=1 --one-file-system /data/data/com.termux/files/usr' \
    chmod='chmod -v' \
    chown='chown -v' \
    cp='nocorrect cp -i -v' \
    dir='nocorrect dir --color=auto' \
    diff='diff --color=auto' \
    dud='du --all -d 1 -h' \
    duf='du -sh *' \
    egrep='egrep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.cfg.git,.cache}' \
    h=history \
    hgrep='fc -El 0 | grep' \
    man='nocorrect man' \
    md='nocorrect mkdir -pv' \
    mkd='nocorrect mkdir -pv' \
    ncdu='ncdu --color=dark -L -x' \
    mkdir='mkdir -pv' \
    mv='nocorrect mv -i -v' \
    rm='nocorrect rm -I -v' \
    sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS,.cfg.git,.cache} ' \
    shad="ssh-add ~/.ssh/id_rsa" \
    shag='eval "$(ssh-agent -s)"' \
    wget='wget -r -e --robots=off -nc -np' \
    grep='grep --color=auto' \
    fgrep='fgrep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.cfg.git,.cache}' \
    ffmpeg='ffmpeg -hide_banner'

# special commands
alias \
    bfarben=spectrum_bls \
    bfrbn=spectrum_bls \
    coc=config-colors \
    cof=config-fonts \
    clean='( for ((i=1;i<$LINES;i++)) ; do echo "" ; done ) ; clear' \
    ddg='web_search duckduckgo' \
    farben=spectrum_ls \
    frbn=spectrum_ls \
    fsh='fast-theme' \
    lazymux='cd ~/gitrepos/Lazymux && python lazymux.py' \
    lch=launch \
    lmux='cd ~/gitrepos/Lazymux && python lazymux.py' \
    myip='curl http://ipecho.net/plain; echo' \
    mymap='telnet mapscii.me' \
    ox='onex start' \
    tb='terbr -b' \
    tls='cd ~/gitrepos/Termux-Lazyscript && python2 ls.py' \
    wtr='curl wttr.in/Berlin'
    # pip='$PREFIX/bin/python3 -m pip' \
    # pip2='$PREFIX/bin/python2 -m pip'

# directories
alias \
    back='$PREFIX' \
    bbin='$PREFIX/bin' \
    betc='$PREFIX/etc' \
    blbxc='$PREFIX/libexec' \
    blib='$PREFIX/lib' \
    bshr='$PREFIX/share' \
    storage='cd /storage/40E6-DFFD' \
    strg='cd /storage/40E6-DFFD' \
    sdcard=/sdcard \
    sdcrd='cd /storage/emulated/0'

# find & fzf
alias \
    count='find . -type f | wc -l' \
    fzcd='\cd "$(find -L -type d | fzf)"' \
    fdh='fd -H -I -i --color always' \
    ff='find . -type f -name' \
    iaf=interactive_fzf


# ls & exa
alias \
    exa='exa --color=always --icons'\
    l='exa -b@ --icons --git' \
    lS='exa -1 --icons' \
    la='exa -bhHigUmuSaa --git --icons' \
    lart='\ls -1Fcart' \
    ldot='ls -ld .*' \
    ll='exa -ahlFbG --icons' \
    l.='exa -d .*' \
    ll.='exa -Fhl -d .*' \
    lld='\ls -D */' \
    lll='exa -ahlT --icons L -R' \
    llm='exa -lbGF --git --sort=modified --git --icons' \
    llt='du -sh * | sort -h' \
    lr='\ls -tRFh' \
    lrt='\ls -1Fcrt' \
    ls='exa -a --icons --git' \
    lsa='exa -alFh@T --level=3 --icons | more -f' \
    lt='exa -alhFt@ --time=changed --icons' \
    lx='exa -lbhHigUmuSa@ --time-style=long-iso --git --color-scale'

# Editors
alias \
    m=micro \
    m.a='micro ${ZDOTDIR:-$HOME}/.aliases' \
    m.m='m ~/.zsh/oh-my-zsh.sh' \
    mp='micro $PREFIX/etc/profile' \
    m.z='micro ${ZDOTDIR:-$HOME}/.zshrc' \
    mli='micro $PREFIX/bin/login' \
    mz='micro $PREFIX/etc/zshrc' \
    zshrc='${=EDITOR} ${ZDOTDIR:-$HOME}/.zshrc' \
    n='nano -mce%' \
    n.a='nano -mce% ${ZDOTDIR:-$HOME}/.aliases' \
    n.b='nano -mce% $HOME/.bashrc' \
    n.o='n ~/openssh/open' \
    n.z='nano -mce% ${ZDOTDIR:-$HOME}/.zshrc' \
    nb='nano -mce $PREFIX/etc/bash.bashrc' \
    np='nano -mce% $PREFIX/etc/profile' \
    nz='nano -mlce% $PREFIX/etc/zshrc' \
    vim=nvim \
    v=nvim \
    vimdiff="nvim -d" \
    init='${=EDITOR} ${ZDOTDIR:-$HOME}/.config/nvim/init.vim'

# zlua
alias \
    z=_zlua \
    zb='z -b' \
    zbf='z -b -I' \
    zbi='z -b -i' \
    zc='z -c' \
    zf='z -I' \
    zh='z -I -t .' \
    zz='z -i' \
    zzc='zz -c'

# Termux
alias \
    bttry=termux-battery-status \
    cpy=termux-clipboard-set \
    foto=termux-camera-photo \
    open='termux-open --chooser "$@"' \
    pst=termux-clipboard-get \
    t-b='termux-brightness' \
    t-n=termux-notification \
    tbs=termux-battery-status \
    tcp=termux-camera-photo \
    tcr=termux-change-repo \
    tfs=termux-fix-shebang \
    tfo=termux-file-opener \
    tnr=termux-notification-remove \
    to='termux-open --chooser "$@"' \
    trs=termux-reload-settings \
    tuo=termux-url-opener \
    twe=termux-wifi-enable


# git

alias \
    dot='$PREFIX/bin/git --git-dir=$HOME/.cfg.git/ --work-tree=$HOME' \
    dota='dot add' \
    dotaa='dot add --all' \
    dotb='dot branch -a' \
    dotc='dot checkout' \
    dotcm='dot commit -m' \
    dotd='dot diff' \
    dotps='dot push' \
    dotpl='dot pull' \
    dotl='dot log' \
    dots='dot status' \
    dotr='dot remote -v' \
    dotrm='dot rm' \
    dotrmc='dot rm --cached' \
    dotrs='dot restore --staged' \
    dotmv='dot mv' \
    cfg=dotbare
    # dot=dotbare

alias \
    gad='git add' \
    gaa='git add --all' \
    gb='git branch -a' \
    gcm='git commit -m' \
    gdf='git diff' \
    gds="git diff --staged" \
    gc='git clone' \
    gf='git fetch' \
    g=git \
    check='git checkout' \
    pull='git pull origin' \
    push='git push origin' \
    gss='git status -sb' \
    gps='git push' \
    gpl='git pull' \
    gl='git log' \
    gs='git status' \
    gr='git remote -v' \
    grm='git rm' \
    grmc='git rm --cached' \
    grs="git restore --staged" \
    gmv='git mv'

#----------------- FZF & GIT -------------------

alias fv='nvim "$(fd -H -i -L --type f | fzf +m --keep-right)"'
vf() { fzf | xargs -r -I % $EDITOR % ;}

# search for configs and scripts
se() { du -a ~/.scripts/* ~/.config/* | awk '{print $2}' | fzf --keep-right | xargs -r $EDITOR ;}

# search for all scripts and dotfiles, then open them with editor of choice
files=(~/.bashrc ~/.zshrc ~/.config/{bat,configstore,git,htop,lynx,mc,micro,mpv,neofetch,npm,nvim,pip,pulse,ranger,w3m,wget,zsh}
     ~/.lynxrc ~/.scripts/* ~/bin/* ~/.local/bin/* ~/.local/share/* $PREFIX/etc/* ~/documents/*)

dotf() {
    find $files -type f |
        fzf --keep-right --preview 'bat --color=always --line-range :100 {}' --bind=alt-t:toggle-preview | xargs -r "$EDITOR"
 }

 # search for all notes and open selected one in editor
notes() {
    rg --files "$HOME"/*ocuments/notes |
        fzf --keep-right --preview 'bat --color=always --line-range :100 {}' --bind=alt-t:toggle-preview | xargs -r "$EDITOR"
}

 # cd into note dir, live grep the contents of notes, then open in editor
live_search_notes() {
     cd "$HOME"/*ocuments/notes && interactive_fzf
}

# search for all git repos in folders I care, then cd into selected one.
all_git() {
    dir=$(find ~/{.zsh,gitrepos,documents} -type d -name .git | sed 's/\/.git//' |
        fzf --cycle --preview 'tree -C {} | head -50'
) && cd $dir && git status
}

# fd - cd into any hidden directory of the current folder
fcd() {
    dir=$(find "${1:-.}" -type d 2>/dev/null | fzf --ansi +m) && "$dir" || exit
}

# cdf - cd into the directory of the selected file
cdf() {
    file=$(find "${1:-.}" -type f | fzf +m -q "$1") && dir=$(dirname "$file") && "$dir" || exit
}

# GIT
# source:
# https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
# https://github.com/junegunn/fzf/blob/master/ADVANCED.md#ripgrep-integration
is_in_git_repo() {
    git rev-parse HEAD >/dev/null 2>&1
}

is_in_dot_repo() {
    dot rev-parse HEAD >/dev/null 2>&1
}

fzf-down() {
    fzf --height 50% --min-height 20 --border --bind alt-t:toggle-preview "$@"
}

_gf() {
    is_in_git_repo || is_in_dot_repo || return
    dot -c color.status=always status --short |
        fzf-down -m --ansi --nth 2..,.. \
            --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
        cut -c4- | sed 's/.* -> //'
}

_gb() {
    is_in_git_repo || return
    git branch -a --color=always | grep -v '/HEAD\s' | sort |
        fzf-down --ansi --multi --tac --preview-window down:60% \
            --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
        sed 's/^..//' | cut -d' ' -f1 |
        sed 's#^remotes/##'
}

_gt() {
    is_in_dot_repo || return
    dot tag --sort -version:refname |
        fzf-down --multi --preview-window down:60% \
            --preview 'dot show --color=always {}'
}

_gh() {
    is_in_dot_repo || return
    dot log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
        fzf-down --ansi --no-sort --reverse --multi --bind 'alt-s:toggle-sort' \
            --header 'Press ALT-S to toggle sort' \
            --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs dot show --color=always' |
        grep -o "[a-f0-9]\{7,\}"
}

_gr() {
    is_in_dot_repo || return
    dot remote -v | awk '{print $1 "\t" $2}' | uniq |
        fzf-down --tac \
            --preview 'dot log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
        cut -d$'\t' -f1
}

_gs() {
    is_in_git_repo || return
    git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
        cut -d: -f1
}

# Git Keybindings

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

bind-git-helper() {
  local c
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^h$c' fzf-g$c-widget"
  done
}
bind-git-helper f b t h r s
unset -f bind-git-helper
