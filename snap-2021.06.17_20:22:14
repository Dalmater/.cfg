# zsnapshot file
# Variables
#
builtin setopt noaliases
unset __zsnap_key __zsnap_type __zsnap_arr __zsnap_arr2
typeset -g __zsnap_key __zsnap_type
typeset -ga __zsnap_arr __zsnap_arr2

#
# Variables that should not be unset
#

__zsnap_arr=( )
__zsnap_arr+=( __zsnap_key __zsnap_type __zsnap_opts __zsnap_tmp __zsnap_tmp2 __zsnap_arr __zsnap_arr2 )
# From manual page
__zsnap_arr+=( COLUMNS LINES ARGV0 CORRECT_IGNORE CORRECT_IGNORE_FILE DIRSTACKSIZE ENV KEYBOARD_HACK )
__zsnap_arr+=( KEYTIMEOUT LANG LC_ALL LC_COLLATE LC_CTYPE LC_MESSAGES LC_NUMERIC LC_TIME LISTMAX )
__zsnap_arr+=( LOGCHECK MAIL MAILCHECK mailpath match mbegin mend MATCH MBEGIN MEND psvar REPORTTIME )
__zsnap_arr+=( TIMEFMT ZBEEP ZDOTDIR ZLE_LINE_ABORTED ZLE_REMOVE_SUFFIX_CHARS ZLE_SPACE_SUFFIX_CHARS )
__zsnap_arr+=( ZLE_RPROMPT_INDENT )
# From other manual page
__zsnap_arr+=( "!" "#" ARGC "$" "-" "*" "@" "?" status pipestatus CPUTYPE EUID ERRNO GID HISTCMD )
__zsnap_arr+=( HOST LINENO LOGNAME MACHTYPE OLDPWD OPTARG OPTIND OSTYPE PPID TRY_BLOCK_ERROR )
__zsnap_arr+=( TRY_BLOCK_INTERRUPT UID USERNAME VENDOR zsh_eval_context ZSH_NAME ZSH_PATCHLEVEL )
__zsnap_arr+=( zsh_scheduled_events ZSH_SUBSHELL ZSH_VERSION )
# Core variables
__zsnap_arr+=( options aliases saliases galiases functions dis_aliases dis_saliases dis_galiases dis_functions )
__zsnap_arr+=( 0 _ SHLVL SHELL RANDOM fignore FIGNORE watch WATCH WATCHFMT TTY TTYIDLE STTY )
__zsnap_arr+=( histchars HISTCHARS HISTORY_IGNORE HISTFILE HISTSIZE SAVEHIST )
__zsnap_arr+=( commands signals WORDCHARS TMPPREFIX TMPDIR IFS HOME module_path MODULE_PATH )
__zsnap_arr+=( EGID ZSH_ARGZERO USER PWD )
__zsnap_arr+=( fpath FPATH path PATH SECONDS TMOUT PERIOD )
__zsnap_arr+=( NULLCMD READNULLCMD action cdpath CDPATH dirstack )

# Application variables
__zsnap_arr+=( ZCONVEY_FD ZCONVEY_ID ZCONVEY_REPO_DIR ZCONVEY_CONFIG ZCONVEY_IO_DIR ZCONVEY_LOCKS_DIR )
__zsnap_arr+=( ZCONVEY_CONFIG_DIR ZCONVEY_RUN_SECONDS ZCONVEY_OTHER_DIR ZCONVEY_NAMES_DIR ZCONVEY_SCHEDULE_ORIGIN )
__zsnap_arr+=( DISPLAY TERM TERMINFO TERM_PROGRAM TERM_PROGRAM_VERSION TERM_SESSION_ID SSH_AUTH_SOCK )
__zsnap_arr+=( ITERM_PROFILE ITERM_SESSION_ID EDITOR FCEDIT LESS CVS_RSH )

# Hook variables
__zsnap_arr+=( preexec_functions precmd_functions periodic_functions zshexit_functions chpwd_functions )
__zsnap_arr+=( zshaddhistory_functions zsh_directory_name_functions )

#
# Variables that even though not unset, should be object to typedef and assignment
#

__zsnap_arr2=( )
__zsnap_arr2+=( SECONDS TMOUT PERIOD fpath FPATH path PATH match mbegin mend MATCH MBEGIN MEND psvar )
__zsnap_arr2+=( cdpath CDPATH dirstack )

# Hook variables
__zsnap_arr2+=( preexec_functions precmd_functions periodic_functions zshexit_functions chpwd_functions )
__zsnap_arr2+=( zshaddhistory_functions zsh_directory_name_functions )

rm -f /tmp/removing
for __zsnap_key in "${(k)parameters[@]}"; do
    __zsnap_type="${parameters[$__zsnap_key]}"
    if [[ "$__zsnap_type" != *-readonly* && "${__zsnap_arr[(I)$__zsnap_key]}" = "0" ]]; then
        # echo "Removing: $__zsnap_key" >> /tmp/removing
        unset "$__zsnap_key"
    fi
done

if [[ "${__zsnap_arr[(I)LD_PRELOAD]}" = "0" || "${__zsnap_arr2[(I)LD_PRELOAD]}" != "0" ]]; then
declare -x LD_PRELOAD
LD_PRELOAD='/data/data/com.termux/files/usr/lib/libtermux-exec.so'
fi

if [[ "${__zsnap_arr[(I)PREFIX]}" = "0" || "${__zsnap_arr2[(I)PREFIX]}" != "0" ]]; then
declare -x PREFIX
PREFIX='/data/data/com.termux/files/usr'
fi

if [[ "${__zsnap_arr[(I)_media_fts]}" = "0" || "${__zsnap_arr2[(I)_media_fts]}" != "0" ]]; then
declare -a  _media_fts
_media_fts=(
'ape'
'avi'
'flv'
'm4a'
'mkv'
'mov'
'mp3'
'mpeg'
'mpg'
'ogg'
'ogm'
'rm'
'wav'
'webm'
)
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_raw_matches]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_raw_matches]}" != "0" ]]; then
declare -a  _history_substring_search_raw_matches
_history_substring_search_raw_matches=(
)
fi

if [[ "${__zsnap_arr[(I)RANDOM]}" = "0" || "${__zsnap_arr2[(I)RANDOM]}" != "0" ]]; then
declare -i10  RANDOM
RANDOM=18574
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_ORIGINAL_WIDGET_PREFIX]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_ORIGINAL_WIDGET_PREFIX]}" != "0" ]]; then
declare  ZSH_AUTOSUGGEST_ORIGINAL_WIDGET_PREFIX
ZSH_AUTOSUGGEST_ORIGINAL_WIDGET_PREFIX='autosuggest-orig-'
fi

if [[ "${__zsnap_arr[(I)USERNAME]}" = "0" || "${__zsnap_arr2[(I)USERNAME]}" != "0" ]]; then
declare  USERNAME
USERNAME='u0_a1491'
fi

if [[ "${__zsnap_arr[(I)FZF_BASE]}" = "0" || "${__zsnap_arr2[(I)FZF_BASE]}" != "0" ]]; then
declare -x FZF_BASE
FZF_BASE='$PREFIX/share/fzf'
fi

if [[ "${__zsnap_arr[(I)_YSU_BUFFER]}" = "0" || "${__zsnap_arr2[(I)_YSU_BUFFER]}" != "0" ]]; then
declare  _YSU_BUFFER
_YSU_BUFFER=''
fi

if [[ "${__zsnap_arr[(I)tdir]}" = "0" || "${__zsnap_arr2[(I)tdir]}" != "0" ]]; then
declare  tdir
tdir='/data/data/com.termux/files/home/.trash'
fi

if [[ "${__zsnap_arr[(I)ZSH_COLORIZE_CHROMA_FORMATTER]}" = "0" || "${__zsnap_arr2[(I)ZSH_COLORIZE_CHROMA_FORMATTER]}" != "0" ]]; then
declare  ZSH_COLORIZE_CHROMA_FORMATTER
ZSH_COLORIZE_CHROMA_FORMATTER='terminal256'
fi

if [[ "${__zsnap_arr[(I)LOGNAME]}" = "0" || "${__zsnap_arr2[(I)LOGNAME]}" != "0" ]]; then
declare -x LOGNAME
LOGNAME='u0_a1491'
fi

if [[ "${__zsnap_arr[(I)__fast_highlight_main__command_type_cache]}" = "0" || "${__zsnap_arr2[(I)__fast_highlight_main__command_type_cache]}" != "0" ]]; then
declare -A  __fast_highlight_main__command_type_cache
__fast_highlight_main__command_type_cache=(  )
fi

if [[ "${__zsnap_arr[(I)NULLCMD]}" = "0" || "${__zsnap_arr2[(I)NULLCMD]}" != "0" ]]; then
declare  NULLCMD
NULLCMD='cat'
fi

if [[ "${__zsnap_arr[(I)watch]}" = "0" || "${__zsnap_arr2[(I)watch]}" != "0" ]]; then
declare -a  watch
watch=(
)
fi

if [[ "${__zsnap_arr[(I)COLORTERM]}" = "0" || "${__zsnap_arr2[(I)COLORTERM]}" != "0" ]]; then
declare -x COLORTERM
COLORTERM='truecolor'
fi

if [[ "${__zsnap_arr[(I)READNULLCMD]}" = "0" || "${__zsnap_arr2[(I)READNULLCMD]}" != "0" ]]; then
declare  READNULLCMD
READNULLCMD='more'
fi

if [[ "${__zsnap_arr[(I)FAST_THEME_NAME]}" = "0" || "${__zsnap_arr2[(I)FAST_THEME_NAME]}" != "0" ]]; then
declare  FAST_THEME_NAME
FAST_THEME_NAME='mytheme'
fi

if [[ "${__zsnap_arr[(I)TIMEFMT]}" = "0" || "${__zsnap_arr2[(I)TIMEFMT]}" != "0" ]]; then
declare  TIMEFMT
TIMEFMT='%J  %U user %S system %P cpu %*E total'
fi

if [[ "${__zsnap_arr[(I)_patcomps]}" = "0" || "${__zsnap_arr2[(I)_patcomps]}" != "0" ]]; then
declare -A -H _patcomps
_patcomps=( '*/(init|rc[0-9S]#).d/*' '_init_d' )
fi

if [[ "${__zsnap_arr[(I)plugin]}" = "0" || "${__zsnap_arr2[(I)plugin]}" != "0" ]]; then
declare  plugin
plugin='zsh-history-substring-search'
fi

if [[ "${__zsnap_arr[(I)fg_bold]}" = "0" || "${__zsnap_arr2[(I)fg_bold]}" != "0" ]]; then
declare -A -H fg_bold
fg_bold=( 'cyan' '[01;36m' 'white' '[01;37m' 'yellow' '[01;33m' 'magenta' '[01;35m' 'black' '[01;30m' 'blue' '[01;34m' 'red' '[01;31m' 'default' '[01;39m' 'grey' '[01;30m' 'green' '[01;32m' )
fi

if [[ "${__zsnap_arr[(I)bg_bold]}" = "0" || "${__zsnap_arr2[(I)bg_bold]}" != "0" ]]; then
declare -A -H bg_bold
bg_bold=( 'cyan' '[01;46m' 'white' '[01;47m' 'yellow' '[01;43m' 'magenta' '[01;45m' 'black' '[01;40m' 'blue' '[01;44m' 'red' '[01;41m' 'default' '[01;49m' 'green' '[01;42m' 'grey' '[01;40m' )
fi

if [[ "${__zsnap_arr[(I)PWD]}" = "0" || "${__zsnap_arr2[(I)PWD]}" != "0" ]]; then
declare -x PWD
PWD='/data/data/com.termux/files/home'
fi

if [[ "${__zsnap_arr[(I)GID]}" = "0" || "${__zsnap_arr2[(I)GID]}" != "0" ]]; then
declare -i10  GID
GID=11491
fi

if [[ "${__zsnap_arr[(I)YELLOW]}" = "0" || "${__zsnap_arr2[(I)YELLOW]}" != "0" ]]; then
declare  YELLOW
YELLOW='[33m'
fi

if [[ "${__zsnap_arr[(I)PROMPT_TITLE]}" = "0" || "${__zsnap_arr2[(I)PROMPT_TITLE]}" != "0" ]]; then
declare  PROMPT_TITLE
PROMPT_TITLE='%~ | 59x34 | %! | %? | %y |\007'
fi

if [[ "${__zsnap_arr[(I)ZDOTDIR]}" = "0" || "${__zsnap_arr2[(I)ZDOTDIR]}" != "0" ]]; then
declare -x ZDOTDIR
ZDOTDIR='/data/data/com.termux/files/home/.config'
fi

if [[ "${__zsnap_arr[(I)_ZSH_HIGHLIGHT_PRIOR_BUFFER]}" = "0" || "${__zsnap_arr2[(I)_ZSH_HIGHLIGHT_PRIOR_BUFFER]}" != "0" ]]; then
declare  _ZSH_HIGHLIGHT_PRIOR_BUFFER
_ZSH_HIGHLIGHT_PRIOR_BUFFER=''
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME]}" != "0" ]]; then
declare  ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME
ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME='zsh_autosuggest_completion_pty'
fi

if [[ "${__zsnap_arr[(I)FZF_DEFAULT_COMMAND]}" = "0" || "${__zsnap_arr2[(I)FZF_DEFAULT_COMMAND]}" != "0" ]]; then
declare -x FZF_DEFAULT_COMMAND
FZF_DEFAULT_COMMAND='ag --hidden'
fi

if [[ "${__zsnap_arr[(I)prompt_theme]}" = "0" || "${__zsnap_arr2[(I)prompt_theme]}" != "0" ]]; then
declare -a  prompt_theme
prompt_theme=(
'kali'
)
fi

if [[ "${__zsnap_arr[(I)MEND]}" = "0" || "${__zsnap_arr2[(I)MEND]}" != "0" ]]; then
declare  MEND
MEND=''
fi

if [[ "${__zsnap_arr[(I)FAST_HIGHLIGHT]}" = "0" || "${__zsnap_arr2[(I)FAST_HIGHLIGHT]}" != "0" ]]; then
declare -A  FAST_HIGHLIGHT
FAST_HIGHLIGHT=( 'chroma-npm' '→chroma/-subcommand.ch' 'chroma-nmcli' '→chroma/-nmcli.ch' 'chroma-svn' '→chroma/-subversion.ch' 'chroma-fpath=(' '→chroma/-fpath_peq.ch' 'chroma-fpath_peq-elements' '' 'chroma-apt-get' '→chroma/-subcommand.ch' 'chroma-cryptsetup' '→chroma/-subcommand.ch' 'chroma-pass' '→chroma/-subcommand.ch' 'chroma-zinit' '→chroma/main-chroma.ch%zinit' 'chroma-bundle' '→chroma/-subcommand.ch' 'chroma-grep' '→chroma/-grep.ch' 'chroma-bash' '→chroma/-sh.ch' 'chroma-ionice' '→chroma/-ionice.ch' 'chroma-exercism' '→chroma/-subcommand.ch' 'chroma-systemctl' '→chroma/-subcommand.ch' 'chroma-autorandr' '→chroma/-autorandr.ch' 'chroma-ruby' '→chroma/-ruby.ch' 'chroma-fish' '→chroma/-sh.ch' 'chroma-hub' '→chroma/-hub.ch' 'chroma-awk' '→chroma/-awk.ch' 'chroma-zinit-ice-elements-svn' '0' 'chroma-tmux' '→chroma/-subcommand.ch' 'chroma-alias' '→chroma/-alias.ch' 'chroma-nice' '→chroma/-nice.ch' 'chroma-xargs' '→chroma/-precommand.ch' 'chroma-asciinema' '→chroma/-subcommand.ch' 'chroma-apt-cache' '→chroma/-subcommand.ch' 'chroma-autoload-elements' '' 'chroma-aws' '→chroma/-subcommand.ch' 'chroma-example' '→chroma/-example.ch' 'multi_func_def' '1' 'path_dirs_was_set' '0' 'chroma-openssl' '→chroma/-subcommand.ch' 'chroma-aptitude' '→chroma/-subcommand.ch' 'chroma-fast-theme' '→chroma/-fast-theme.ch' 'chroma-svnadmin' '→chroma/-subcommand.ch' 'chroma-mawk' '→chroma/-awk.ch' 'right_brace_is_recognised_everywhere' '1' 'chroma-xdotool' '→chroma/-subcommand.ch' 'chroma-ssh' '→chroma/-ssh.ch' 'chroma-ltrace' '→chroma/-precommand.ch' 'chroma-printf' '→chroma/-printf.ch' 'chroma-travis' '→chroma/-subcommand.ch' 'chroma-source' '→chroma/-source.ch' 'chroma-nohup' '→chroma/-precommand.ch' 'chroma-make' '→chroma/-make.ch' 'chroma-gawk' '→chroma/-awk.ch' 'chroma-zmanage' '→chroma/-subcommand.ch' 'chroma-perl' '→chroma/-perl.ch' 'chroma-lab' '→chroma/-lab.ch' 'chroma-i3-msg' '→chroma/-subcommand.ch' 'chroma-gulp' '→chroma/-subcommand.ch' 'chroma-keyctl' '→chroma/-subcommand.ch' 'chroma-docker' '→chroma/-docker.ch' 'chroma-gem' '→chroma/-subcommand.ch' 'chroma-zsh' '→chroma/-sh.ch' 'chroma-autoload' '→chroma/-autoload.ch' 'chroma-ipfs' '→chroma/-subcommand.ch' 'chroma-yum' '→chroma/-subcommand.ch' 'chroma-hg' '→chroma/-subcommand.ch' 'chroma-git' '→chroma/main-chroma.ch%git' 'chroma-src-counter' '3' 'chroma-zsystem' '→chroma/-subcommand.ch' 'chroma-solargraph' '→chroma/-subcommand.ch' 'chroma-aspell' '→chroma/-subcommand.ch' 'chroma-pip' '→chroma/-subcommand.ch' 'ointeractive_comments' '1' 'chroma-cabal' '→chroma/-subcommand.ch' 'chroma-svndumpfilter' '→chroma/-subversion.ch' 'chroma-yard' '→chroma/-subcommand.ch' 'chroma-man' '→chroma/-whatis.ch' 'chroma-zinit-ice-elements-id-as' '' 'chroma-zypper' '→chroma/-subcommand.ch' 'chroma-FPATH+=' '→chroma/-fpath_peq.ch' 'chroma-fpath+=(' '→chroma/-fpath_peq.ch' 'chroma-pip2' '→chroma/-subcommand.ch' 'chroma-dnf' '→chroma/-subcommand.ch' 'chroma-brew' '→chroma/-subcommand.ch' 'chroma-pip3' '→chroma/-subcommand.ch' 'chroma-whatis' '→chroma/-whatis.ch' 'chroma-port' '→chroma/-subcommand.ch' 'chroma-udisksctl' '→chroma/-subcommand.ch' 'chroma-node' '→chroma/-node.ch' 'chroma-scp' '→chroma/-scp.ch' 'chroma-FPATH=' '→chroma/-fpath_peq.ch' 'chroma-bspc' '→chroma/-subcommand.ch' 'chroma-cvs' '→chroma/-subcommand.ch' 'use_brackets' '1' 'chroma-diskutil' '→chroma/-subcommand.ch' 'chroma-yarn' '→chroma/-subcommand.ch' 'chroma-strace' '→chroma/-precommand.ch' 'chroma-egrep' '→chroma/-grep.ch' 'chroma-subliminal' '→chroma/-subcommand.ch' 'chroma-fgrep' '→chroma/-grep.ch' 'chroma-apt' '→chroma/-subcommand.ch' 'chroma-nvm' '→chroma/-subcommand.ch' 'chroma--' '→chroma/-precommand.ch' 'chroma-.' '→chroma/-source.ch' 'chroma-sh' '→chroma/-sh.ch' )
fi

if [[ "${__zsnap_arr[(I)NNN_OPENER]}" = "0" || "${__zsnap_arr2[(I)NNN_OPENER]}" != "0" ]]; then
declare -x NNN_OPENER
NNN_OPENER='/data/data/com.termux/files/home/.config/nnn/plugins/nuke'
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE]}" != "0" ]]; then
declare  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=58'
fi

if [[ "${__zsnap_arr[(I)_]}" = "0" || "${__zsnap_arr2[(I)_]}" != "0" ]]; then
declare  _
_='print -r -- "_=${(qq)_}"'
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_CLEAR_WIDGETS]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_CLEAR_WIDGETS]}" != "0" ]]; then
declare -a  ZSH_AUTOSUGGEST_CLEAR_WIDGETS
ZSH_AUTOSUGGEST_CLEAR_WIDGETS=(
'history-search-forward'
'history-search-backward'
'history-beginning-search-forward'
'history-beginning-search-backward'
'history-substring-search-up'
'history-substring-search-down'
'up-line-or-beginning-search'
'down-line-or-beginning-search'
'up-line-or-history'
'down-line-or-history'
'accept-line'
'copy-earlier-word'
)
fi

if [[ "${__zsnap_arr[(I)FAST_BASE_DIR]}" = "0" || "${__zsnap_arr2[(I)FAST_BASE_DIR]}" != "0" ]]; then
declare  FAST_BASE_DIR
FAST_BASE_DIR='/data/data/com.termux/files/home/.zsh/plugins/fast-syntax-highlighting'
fi

if [[ "${__zsnap_arr[(I)ZSH_VERSION]}" = "0" || "${__zsnap_arr2[(I)ZSH_VERSION]}" != "0" ]]; then
declare  ZSH_VERSION
ZSH_VERSION='5.8'
fi

if [[ "${__zsnap_arr[(I)_comp_dumpfile]}" = "0" || "${__zsnap_arr2[(I)_comp_dumpfile]}" != "0" ]]; then
declare  _comp_dumpfile
_comp_dumpfile='/data/data/com.termux/files/home/.config/.zcompdump-localhost-5.8'
fi

if [[ "${__zsnap_arr[(I)TTY]}" = "0" || "${__zsnap_arr2[(I)TTY]}" != "0" ]]; then
declare  TTY
TTY='/dev/pts/0'
fi

if [[ "${__zsnap_arr[(I)plugins]}" = "0" || "${__zsnap_arr2[(I)plugins]}" != "0" ]]; then
declare -a  plugins
plugins=(
'gh'
'gitfast'
'common-aliases'
'colored-man-pages'
'extract'
'fd'
'fzf'
'fzf-tab'
'z.lua'
'pip'
'python'
'zsh-recycle-bin'
'title'
'zsh-hist'
'colorize'
'youtube-dl'
'web-search'
'you-should-use'
'zsh-autosuggestions'
'fast-syntax-highlighting'
'zsh-history-substring-search'
)
fi

if [[ "${__zsnap_arr[(I)FAST_BLIST_PATTERNS]}" = "0" || "${__zsnap_arr2[(I)FAST_BLIST_PATTERNS]}" != "0" ]]; then
declare -A  FAST_BLIST_PATTERNS
FAST_BLIST_PATTERNS=(  )
fi

if [[ "${__zsnap_arr[(I)ZSH_PATCHLEVEL]}" = "0" || "${__zsnap_arr2[(I)ZSH_PATCHLEVEL]}" != "0" ]]; then
declare  ZSH_PATCHLEVEL
ZSH_PATCHLEVEL='zsh-5.8-0-g77d203f'
fi

if [[ "${__zsnap_arr[(I)HISTFILE]}" = "0" || "${__zsnap_arr2[(I)HISTFILE]}" != "0" ]]; then
declare  HISTFILE
HISTFILE='/data/data/com.termux/files/home/.zsh_history'
fi

if [[ "${__zsnap_arr[(I)LISTMAX]}" = "0" || "${__zsnap_arr2[(I)LISTMAX]}" != "0" ]]; then
declare -i  LISTMAX
LISTMAX=100
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_query_highlight]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_query_highlight]}" != "0" ]]; then
declare  _history_substring_search_query_highlight
_history_substring_search_query_highlight=''
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_ACCEPT_WIDGETS]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_ACCEPT_WIDGETS]}" != "0" ]]; then
declare -a  ZSH_AUTOSUGGEST_ACCEPT_WIDGETS
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(
'forward-char'
'end-of-line'
'vi-forward-char'
'vi-end-of-line'
'vi-add-eol'
)
fi

if [[ "${__zsnap_arr[(I)path]}" = "0" || "${__zsnap_arr2[(I)path]}" != "0" ]]; then
declare -a  path
path=(
'/data/data/com.termux/files/home/bin'
'//data/data/com.termux/files/home/.local/bin'
'/data/data/com.termux/files/usr/bin'
'/storage/emulated/0/bin'
'/storage/40E6-DFFD/bin'
'/data/data/com.termux/files/home/.zsh/plugins/zsnapshot'
)
fi

if [[ "${__zsnap_arr[(I)module_path]}" = "0" || "${__zsnap_arr2[(I)module_path]}" != "0" ]]; then
declare -a  module_path
module_path=(
'/data/data/com.termux/files/usr/lib/zsh/5.8'
)
fi

if [[ "${__zsnap_arr[(I)ZSH_THEME_RVM_PROMPT_OPTIONS]}" = "0" || "${__zsnap_arr2[(I)ZSH_THEME_RVM_PROMPT_OPTIONS]}" != "0" ]]; then
declare  ZSH_THEME_RVM_PROMPT_OPTIONS
ZSH_THEME_RVM_PROMPT_OPTIONS='i v g'
fi

if [[ "${__zsnap_arr[(I)_ZSH_AUTOSUGGEST_BIND_COUNTS]}" = "0" || "${__zsnap_arr2[(I)_ZSH_AUTOSUGGEST_BIND_COUNTS]}" != "0" ]]; then
declare -A  _ZSH_AUTOSUGGEST_BIND_COUNTS
_ZSH_AUTOSUGGEST_BIND_COUNTS=( 'vi-caps-lock-panic' '1' 'vi-add-next' '1' 'vi-cmd-mode' '1' 'vi-find-next-char' '1' 'clear-screen' '1' 'visual-mode' '1' 'select-a-word' '1' 'beginning-of-line' '1' 'undefined-key' '1' 'toggle-fzf-tab' '1' 'recursive-edit' '1' 'redisplay' '1' 'expand-history' '1' 'history-beginning-search-backward' '1' 'split-undo' '1' 'vi-history-search-forward' '1' 'vi-backward-word' '1' 'spell-word' '1' 'down-line' '1' 'vi-backward-blank-word-end' '1' 'vi-insert' '1' 'history-search-backward' '1' 'vi-forward-blank-word-end' '1' 'user:_zsh_highlight_widget_orig-s000-r288-zle-line-finish' '1' 'vi-beginning-of-line' '1' 'accept-line' '1' 'kill-word' '1' 'undo' '1' 'down-case-word' '1' 'vi-repeat-find' '1' 'expand-cmd-path' '1' 'select-a-shell-word' '1' 'send-break' '1' 'copy-prev-word' '1' 'down-line-or-search' '1' 'end-of-line' '1' 'describe-key-briefly' '1' 'select-in-shell-word' '1' 'execute-last-named-cmd' '1' 'read-command' '1' 'accept-line-and-down-history' '1' 'neg-argument' '1' 'fzf-completion' '1' 'vi-yank' '1' 'vi-forward-blank-word' '1' 'accept-search' '1' 'vi-fetch-history' '1' 'get-line' '1' 'vi-down-line-or-history' '1' 'push-line-or-edit' '1' 'expand-word' '1' 'list-expand' '1' 'down-line-or-history' '1' 'fzf-cd-widget' '1' 'transpose-words' '1' 'vi-yank-eol' '1' 'delete-word' '1' 'select-a-blank-word' '1' 'vi-history-search-backward' '1' 'vi-change-eol' '1' 'vi-swap-case' '1' 'kill-line' '1' 'select-in-blank-word' '1' 'fast-highlight-check-path-handler' '1' 'vi-put-after' '1' 'vi-kill-eol' '1' 'select-in-word' '1' 'vi-quoted-insert' '1' 'emacs-forward-word' '1' 'expand-or-complete' '1' 'vi-backward-delete-char' '1' 'edit-command-line' '1' 'vi-replace' '1' 'vi-up-case' '1' 'vi-delete-char' '1' 'vi-insert-bol' '1' 'menu-complete' '1' 'emacs-backward-word' '1' 'vi-yank-whole-line' '1' 'vi-repeat-change' '1' 'vi-first-non-blank' '1' 'vi-match-bracket' '1' 'quote-line' '1' 'where-is' '1' 'vi-put-before' '1' 'delete-char-or-list' '1' 'vi-find-prev-char-skip' '1' 'history-incremental-search-forward' '1' 'backward-word' '1' 'vi-open-line-below' '1' 'backward-delete-char' '1' 'vi-forward-char' '1' 'bracketed-paste' '1' 'infer-next-history' '1' 'vi-goto-column' '1' 'digit-argument' '1' 'auto-suffix-remove' '1' 'user:_zsh_highlight_widget_orig-s000-r288-zle-line-init' '1' 'up-line-or-history' '1' 'history-substring-search-down' '1' 'up-line' '1' 'deactivate-region' '1' 'accept-and-infer-next-history' '1' 'kill-whole-line' '1' 'vi-digit-or-beginning-of-line' '1' 'forward-char' '1' 'set-mark-command' '1' 'backward-kill-word' '1' 'copy-prev-shell-word' '1' 'history-beginning-search-forward' '1' 'vi-backward-word-end' '1' 'magic-space' '1' 'self-insert' '1' 'vi-kill-line' '1' 'vi-find-prev-char' '1' 'self-insert-unmeta' '1' 'vi-replace-chars' '1' 'vi-backward-char' '1' 'down-history' '1' 'gosmacs-transpose-chars' '1' 'end-of-history' '1' 'overwrite-mode' '1' 'vi-backward-blank-word' '1' 'beginning-of-line-hist' '1' 'vi-forward-word-end' '1' 'expand-or-complete-prefix' '1' 'vi-goto-mark-line' '1' 'autosuggest-capture-completion' '1' 'end-of-line-hist' '1' 'vi-pound-insert' '1' 'up-history' '1' 'history-substring-search-up' '1' 'backward-kill-line' '1' 'insert-last-word' '1' 'vi-unindent' '1' 'vi-add-eol' '1' 'quoted-insert' '1' 'vi-undo-change' '1' 'push-line' '1' 'execute-named-cmd' '1' 'fzf-history-widget' '1' 'vi-substitute' '1' 'pound-insert' '1' 'universal-argument' '1' 'vi-end-of-line' '1' 'redo' '1' 'visual-line-mode' '1' 'auto-suffix-retain' '1' 'argument-base' '1' 'push-input' '1' 'quote-region' '1' 'vi-set-mark' '1' 'what-cursor-position' '1' 'exchange-point-and-mark' '1' 'kill-buffer' '1' 'vi-rev-repeat-find' '1' 'menu-expand-or-complete' '1' 'vi-rev-repeat-search' '1' 'history-incremental-pattern-search-backward' '1' 'vi-indent' '1' 'delete-char' '1' 'fzf-tab-debug' '1' 'vi-delete' '1' 'history-incremental-search-backward' '1' 'vi-change' '1' 'complete-word' '1' 'beginning-of-history' '1' 'end-of-list' '1' 'vi-up-line-or-history' '1' 'vi-oper-swap-case' '1' 'fzf-file-widget' '1' 'reverse-menu-complete' '1' 'copy-region-as-kill' '1' 'list-choices' '1' 'up-case-word' '1' 'up-line-or-search' '1' 'vi-join' '1' 'vi-open-line-above' '1' 'vi-goto-mark' '1' 'vi-down-case' '1' 'vi-backward-kill-word' '1' 'vi-repeat-search' '1' 'fzf-tab-complete' '1' 'history-incremental-pattern-search-forward' '1' 'menu-select' '1' 'vi-change-whole-line' '1' 'fzf-tab-dummy' '1' 'history-search-forward' '1' 'backward-delete-word' '1' 'vi-forward-word' '1' 'end-of-buffer-or-history' '1' 'capitalize-word' '1' 'reset-prompt' '1' 'accept-and-hold' '1' 'put-replace-selection' '1' 'beginning-of-buffer-or-history' '1' 'vi-find-next-char-skip' '1' 'accept-and-menu-complete' '1' 'up-line-or-beginning-search' '1' 'backward-char' '1' 'down-line-or-beginning-search' '1' 'kill-region' '1' 'transpose-chars' '1' 'forward-word' '1' 'vi-set-buffer' '1' )
fi

if [[ "${__zsnap_arr[(I)WORDCHARS]}" = "0" || "${__zsnap_arr2[(I)WORDCHARS]}" != "0" ]]; then
declare  WORDCHARS
WORDCHARS=''
fi

if [[ "${__zsnap_arr[(I)_FAST_MAIN_CACHE]}" = "0" || "${__zsnap_arr2[(I)_FAST_MAIN_CACHE]}" != "0" ]]; then
declare -a  _FAST_MAIN_CACHE
_FAST_MAIN_CACHE=(
)
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_matches]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_matches]}" != "0" ]]; then
declare -a  _history_substring_search_matches
_history_substring_search_matches=(
)
fi

if [[ "${__zsnap_arr[(I)SHORT_HOST]}" = "0" || "${__zsnap_arr2[(I)SHORT_HOST]}" != "0" ]]; then
declare  SHORT_HOST
SHORT_HOST='localhost'
fi

if [[ "${__zsnap_arr[(I)mailpath]}" = "0" || "${__zsnap_arr2[(I)mailpath]}" != "0" ]]; then
declare -a  mailpath
mailpath=(
)
fi

if [[ "${__zsnap_arr[(I)LOGDIR]}" = "0" || "${__zsnap_arr2[(I)LOGDIR]}" != "0" ]]; then
declare -x LOGDIR
LOGDIR='/data/data/com.termux/files/usr/var/log'
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_unique_filter]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_unique_filter]}" != "0" ]]; then
declare -A  _history_substring_search_unique_filter
_history_substring_search_unique_filter=(  )
fi

if [[ "${__zsnap_arr[(I)lua]}" = "0" || "${__zsnap_arr2[(I)lua]}" != "0" ]]; then
declare  lua
lua='lua5.3'
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_USE_ASYNC]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_USE_ASYNC]}" != "0" ]]; then
declare  ZSH_AUTOSUGGEST_USE_ASYNC
ZSH_AUTOSUGGEST_USE_ASYNC=''
fi

if [[ "${__zsnap_arr[(I)HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE]}" = "0" || "${__zsnap_arr2[(I)HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE]}" != "0" ]]; then
declare  HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE
HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=''
fi

if [[ "${__zsnap_arr[(I)_ZL_FZF_FLAG]}" = "0" || "${__zsnap_arr2[(I)_ZL_FZF_FLAG]}" != "0" ]]; then
declare -x _ZL_FZF_FLAG
_ZL_FZF_FLAG='-e'
fi

if [[ "${__zsnap_arr[(I)HIST_STAMPS]}" = "0" || "${__zsnap_arr2[(I)HIST_STAMPS]}" != "0" ]]; then
declare  HIST_STAMPS
HIST_STAMPS='dd.mm.yyyy'
fi

if [[ "${__zsnap_arr[(I)compprefuncs]}" = "0" || "${__zsnap_arr2[(I)compprefuncs]}" != "0" ]]; then
declare -a  compprefuncs
compprefuncs=(
)
fi

if [[ "${__zsnap_arr[(I)HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND]}" = "0" || "${__zsnap_arr2[(I)HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND]}" != "0" ]]; then
declare  HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=magenta,fg=white,bold'
fi

if [[ "${__zsnap_arr[(I)HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS]}" = "0" || "${__zsnap_arr2[(I)HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS]}" != "0" ]]; then
declare  HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS
HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS='i'
fi

if [[ "${__zsnap_arr[(I)TRY_BLOCK_ERROR]}" = "0" || "${__zsnap_arr2[(I)TRY_BLOCK_ERROR]}" != "0" ]]; then
declare -i10  TRY_BLOCK_ERROR
TRY_BLOCK_ERROR=-1
fi

if [[ "${__zsnap_arr[(I)TRY_BLOCK_INTERRUPT]}" = "0" || "${__zsnap_arr2[(I)TRY_BLOCK_INTERRUPT]}" != "0" ]]; then
declare -i10  TRY_BLOCK_INTERRUPT
TRY_BLOCK_INTERRUPT=-1
fi

if [[ "${__zsnap_arr[(I)FAST_ASSIGNS_SEEN]}" = "0" || "${__zsnap_arr2[(I)FAST_ASSIGNS_SEEN]}" != "0" ]]; then
declare -A  FAST_ASSIGNS_SEEN
FAST_ASSIGNS_SEEN=(  )
fi

if [[ "${__zsnap_arr[(I)ZSH_THEME_TERM_TITLE_IDLE]}" = "0" || "${__zsnap_arr2[(I)ZSH_THEME_TERM_TITLE_IDLE]}" != "0" ]]; then
declare  ZSH_THEME_TERM_TITLE_IDLE
ZSH_THEME_TERM_TITLE_IDLE='%n@%m:%~'
fi

if [[ "${__zsnap_arr[(I)trash_dir]}" = "0" || "${__zsnap_arr2[(I)trash_dir]}" != "0" ]]; then
declare  trash_dir
trash_dir='~/.trash'
fi

if [[ "${__zsnap_arr[(I)__colored_man_pages_dir]}" = "0" || "${__zsnap_arr2[(I)__colored_man_pages_dir]}" != "0" ]]; then
declare  __colored_man_pages_dir
__colored_man_pages_dir='/data/data/com.termux/files/home/.zsh/plugins/colored-man-pages'
fi

if [[ "${__zsnap_arr[(I)_ZL_MATCH_MODE]}" = "0" || "${__zsnap_arr2[(I)_ZL_MATCH_MODE]}" != "0" ]]; then
declare -x _ZL_MATCH_MODE
_ZL_MATCH_MODE='1'
fi

if [[ "${__zsnap_arr[(I)OPTARG]}" = "0" || "${__zsnap_arr2[(I)OPTARG]}" != "0" ]]; then
declare  OPTARG
OPTARG=''
fi

if [[ "${__zsnap_arr[(I)UID]}" = "0" || "${__zsnap_arr2[(I)UID]}" != "0" ]]; then
declare -i10  UID
UID=11491
fi

if [[ "${__zsnap_arr[(I)FUNCNEST]}" = "0" || "${__zsnap_arr2[(I)FUNCNEST]}" != "0" ]]; then
declare -i10  FUNCNEST
FUNCNEST=500
fi

if [[ "${__zsnap_arr[(I)prompt_newline]}" = "0" || "${__zsnap_arr2[(I)prompt_newline]}" != "0" ]]; then
declare  prompt_newline
prompt_newline='
%{%}'
fi

if [[ "${__zsnap_arr[(I)HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND]}" = "0" || "${__zsnap_arr2[(I)HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND]}" != "0" ]]; then
declare  HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='bg=red,fg=white,bold'
fi

if [[ "${__zsnap_arr[(I)_ftb_orig_widget]}" = "0" || "${__zsnap_arr2[(I)_ftb_orig_widget]}" != "0" ]]; then
declare  _ftb_orig_widget
_ftb_orig_widget='fzf-completion'
fi

if [[ "${__zsnap_arr[(I)fg_no_bold]}" = "0" || "${__zsnap_arr2[(I)fg_no_bold]}" != "0" ]]; then
declare -A -H fg_no_bold
fg_no_bold=( 'cyan' '[22;36m' 'white' '[22;37m' 'yellow' '[22;33m' 'magenta' '[22;35m' 'black' '[22;30m' 'blue' '[22;34m' 'red' '[22;31m' 'default' '[22;39m' 'grey' '[22;30m' 'green' '[22;32m' )
fi

if [[ "${__zsnap_arr[(I)fignore]}" = "0" || "${__zsnap_arr2[(I)fignore]}" != "0" ]]; then
declare -a  fignore
fignore=(
)
fi

if [[ "${__zsnap_arr[(I)_compautos]}" = "0" || "${__zsnap_arr2[(I)_compautos]}" != "0" ]]; then
declare -A -H _compautos
_compautos=( '_call_program' '+X' )
fi

if [[ "${__zsnap_arr[(I)WATCH]}" = "0" || "${__zsnap_arr2[(I)WATCH]}" != "0" ]]; then
declare  WATCH
WATCH=''
fi

if [[ "${__zsnap_arr[(I)FIGNORE]}" = "0" || "${__zsnap_arr2[(I)FIGNORE]}" != "0" ]]; then
declare  FIGNORE
FIGNORE=''
fi

if [[ "${__zsnap_arr[(I)color]}" = "0" || "${__zsnap_arr2[(I)color]}" != "0" ]]; then
declare  color
color='255'
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS]}" != "0" ]]; then
declare -a  ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
'forward-word'
'emacs-forward-word'
'vi-forward-word'
'vi-forward-word-end'
'vi-forward-blank-word'
'vi-forward-blank-word-end'
'vi-find-next-char'
'vi-find-next-char-skip'
)
fi

if [[ "${__zsnap_arr[(I)myip]}" = "0" || "${__zsnap_arr2[(I)myip]}" != "0" ]]; then
declare  myip
myip='fe80::c017:4dff:fef3:f0d1'
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_query]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_query]}" != "0" ]]; then
declare  _history_substring_search_query
_history_substring_search_query=''
fi

if [[ "${__zsnap_arr[(I)CPUTYPE]}" = "0" || "${__zsnap_arr2[(I)CPUTYPE]}" != "0" ]]; then
declare  CPUTYPE
CPUTYPE='armv8l'
fi

if [[ "${__zsnap_arr[(I)DISABLE_AUTO_UPDATE]}" = "0" || "${__zsnap_arr2[(I)DISABLE_AUTO_UPDATE]}" != "0" ]]; then
declare  DISABLE_AUTO_UPDATE
DISABLE_AUTO_UPDATE='true'
fi

if [[ "${__zsnap_arr[(I)TMPPREFIX]}" = "0" || "${__zsnap_arr2[(I)TMPPREFIX]}" != "0" ]]; then
declare  TMPPREFIX
TMPPREFIX='/data/data/com.termux/files/usr/tmp/zsh'
fi

if [[ "${__zsnap_arr[(I)_comp_assocs]}" = "0" || "${__zsnap_arr2[(I)_comp_assocs]}" != "0" ]]; then
declare -a -U _comp_assocs
_comp_assocs=(
''
)
fi

if [[ "${__zsnap_arr[(I)psvar]}" = "0" || "${__zsnap_arr2[(I)psvar]}" != "0" ]]; then
declare -a  psvar
psvar=(
)
fi

if [[ "${__zsnap_arr[(I)DISABLE_UNTRACKED_FILES_DIRTY]}" = "0" || "${__zsnap_arr2[(I)DISABLE_UNTRACKED_FILES_DIRTY]}" != "0" ]]; then
declare  DISABLE_UNTRACKED_FILES_DIRTY
DISABLE_UNTRACKED_FILES_DIRTY='true'
fi

if [[ "${__zsnap_arr[(I)TMPDIR]}" = "0" || "${__zsnap_arr2[(I)TMPDIR]}" != "0" ]]; then
declare -x TMPDIR
TMPDIR='/data/data/com.termux/files/usr/tmp'
fi

if [[ "${__zsnap_arr[(I)_ftb_orig_list_grouped]}" = "0" || "${__zsnap_arr2[(I)_ftb_orig_list_grouped]}" != "0" ]]; then
declare  _ftb_orig_list_grouped
_ftb_orig_list_grouped='2'
fi

if [[ "${__zsnap_arr[(I)CLICOLORS]}" = "0" || "${__zsnap_arr2[(I)CLICOLORS]}" != "0" ]]; then
declare -x CLICOLORS
CLICOLORS='true'
fi

if [[ "${__zsnap_arr[(I)LANG]}" = "0" || "${__zsnap_arr2[(I)LANG]}" != "0" ]]; then
declare -x LANG
LANG='en_US.UTF-8'
fi

if [[ "${__zsnap_arr[(I)HISTSIZE]}" = "0" || "${__zsnap_arr2[(I)HISTSIZE]}" != "0" ]]; then
declare -i10  HISTSIZE
HISTSIZE=50000
fi

if [[ "${__zsnap_arr[(I)bold_color]}" = "0" || "${__zsnap_arr2[(I)bold_color]}" != "0" ]]; then
declare -H bold_color
bold_color='[01m'
fi

if [[ "${__zsnap_arr[(I)LESSOPEN]}" = "0" || "${__zsnap_arr2[(I)LESSOPEN]}" != "0" ]]; then
declare -x LESSOPEN
LESSOPEN='|/data/data/com.termux/files/usr/bin/lesspipe.sh %s'
fi

if [[ "${__zsnap_arr[(I)_comps]}" = "0" || "${__zsnap_arr2[(I)_comps]}" != "0" ]]; then
declare -A -H _comps
_comps=( 'pkgrm' '_pkgrm' 'unpack' '_pack' 'strace' '_strace' 'schroot' '_schroot' '-value-,PS1,-default-' '_ps1234' 'pushd' '_cd' '-value-,LESS,-default-' '_less' 'icombine' '_ispell' 'freebsd-make' '_make' 'grepdiff' '_patchutils' 'bsdgrep' '_grep' 'systat' '_systat' 'gsha1sum' '_md5sum' 'upgradepkg' '_pkgtool' 'strings' '_strings' 'flowadm' '_flowadm' 'dhclient' '_dhclient' 'mysqldump' '_mysql_utils' 'swift' '_swift' 'pkg_info' '_bsd_pkg' 'hotjava' '_webbrowser' '-assign-parameter-' '_assign' 'xfig' '_xfig' 'includeres' '_psutils' 'dvibook' '_dvi' 'time' '_precommand' 'snoop' '_snoop' 'ps2pdf' '_postscript' 'dpkg-buildpackage' '_dpkg-buildpackage' 'strip' '_strip' 'mount' '_mount' 'gsplit' '_split' 'getafm' '_psutils' 'diffstat' '_diffstat' 'guilt-status' '_guilt' 'echotc' '_echotc' 'numfmt' '_numfmt' 'drill' '_drill' 'ranlib' '_ranlib' 'mozilla-firefox' '_mozilla' 'pidstat' '_sysstat' 'gchgrp' '_chown' 'tracepath' '_tracepath' 'identify' '_imagemagick' 'analyseplugin' '_analyseplugin' 'echoti' '_echoti' 'sync' '_nothing' 'pswrap' '_postscript' 'guilt-series' '_guilt' 'bzip2recover' '_bzip2' 'readonly' '_typeset' 'dmidecode' '_dmidecode' '-value-,MPD_HOST,-default' '_mpc' 'psql' '_postgresql' 'gmknod' '_mknod' 'debcheckout' '_debcheckout' 'kioclient' '_kfmclient' 'mhfixmsg' '_mh' 'growisofs' '_growisofs' '-value-,TERMINFO_DIRS,-default-' '_dir_list' 'ssh-add' '_ssh' 'ironic' '_openstack' 'guniq' '_uniq' 'dpatch-edit-patch' '_dpatch-edit-patch' 'magnum' '_openstack' 'extractres' '_psutils' 'ypbind' '_yp' 'xping' '_hosts' 'apt-cache' '_apt' 'gbase32' '_base64' 'ag' '_the_silver_searcher' 'avahi-browse' '_avahi' 'enscript' '_enscript' '-redirect-,>,bzip2' '_bzip2' 'mutt' '_mutt' 'xwit' '_xwit' '-vared-' '_in_vared' 'mkzsh' '_mkzsh' '-' '_precommand' '.' '_source' 'nocorrect' '_precommand' 'linux' '_uml' 'shasum' '_shasum' 'portmaster' '_portmaster' 'history' '_fc' 'repl' '_mh' 'perl' '_perl' 'a2dismod' '_a2utils' 'oksh' '_sh' 'at' '_at' 'ypmatch' '_yp' 'galeon' '_webbrowser' 'xmms2' '_xmms2' 'nmblookup' '_samba' 'guilt-fold' '_guilt' 'lsblk' '_lsblk' 'gsettings' '_gsettings' 'cifsiostat' '_sysstat' 'mplayer' '_mplayer' 'lsvg' '_lsvg' 'guilt-new' '_guilt' 'bpython-urwid' '_bpython' 'lz4c' '_lz4' 'guname' '_uname' 'gprof' '_gprof' 'wiggle' '_wiggle' 'chown' '_chown' 'xfreerdp' '_rdesktop' 'screen' '_screen' 'show' '_mh' '-first-' '_first' 'flist' '_mh' 'cygrunsrv.exe' '_cygrunsrv' 'status' '_initctl' 'pdffonts' '_pdf' 'aaaa' '_hosts' 'rpmquery' '_rpm' 'guilt-delete' '_guilt' 'stop' '_initctl' 'guilt-init' '_guilt' 'getopts' '_vars' 'arena' '_webbrowser' 'dumpadm' '_dumpadm' 'urpme' '_urpmi' 'senlin' '_openstack' 'bg' '_jobs_bg' 'crontab' '_crontab' 'urpmf' '_urpmi' 'ack-grep' '_ack' 'rlogin' '_rlogin' 'urpmi' '_urpmi' 'stow' '_stow' 'guilt-import' '_guilt' 'fast-theme' '_fast-theme' 'urxvt256c-ml' '_urxvt' 'dmesg' '_dmesg' 'greadlink' '_readlink' '-value-,XZ_OPT,-default-' '_xz' 'psmerge' '_psutils' 'gqview' '_gqview' 'btdownloadgui' '_bittorrent' 'zpool' '_zpool' 'urpmq' '_urpmi' 'postsuper' '_postfix' 'spamassassin' '_spamassassin' 'ruby-mri' '_ruby' 'postgres' '_postgresql' 'pass' '_pass' 'dchroot-dsa' '_dchroot-dsa' 'xprop' '_x_utils' 'rmd160' '_cksum' 'ntalk' '_other_accounts' 'sha384' '_cksum' 'shutdown' '_shutdown' 'vncserver' '_vnc' 'dvicopy' '_dvi' 'vmstat' '_vmstat' 'dircmp' '_directories' 'mmount' '_mtools' 'manage.py' '_django' 'expand' '_unexpand' 'cksum' '_cksum' 'd' '_dirs' 'rpmverify' '_rpm' 'btreannounce' '_bittorrent' 'ytalk' '_other_accounts' 'pwait' '_pids' 'cc' '_gcc' 'dvidvi' '_dvi' 'cd' '_cd' 'composer' '_composer' 'config.status' '_configure' 'urpmi.removemedia' '_urpmi' 'perldoc' '_perldoc' 'apt-move' '_apt-move' '-redirect-,<,bunzip2' '_bzip2' 'slogin' '_ssh' 'ci' '_rcs' 'setfattr' '_attr' 'print' '_print' 'netrik' '_webbrowser' 'mdutil' '_mdutil' 'bsdinstall' '_bsdinstall' 'source' '_source' 'wanna-build' '_wanna-build' 'r' '_fc' 'co' '_rcs' 'links2' '_links' 'cp' '_cp' 'nova' '_openstack' 'cpupower' '_cpupower' 'flists' '_mh' 'scselect' '_scselect' 'gnupod_addsong.pl' '_gnupod' 'w' '_w' 'vpnc' '_vpnc' 'javadoc' '_java' 'compadd' '_compadd' 'cu' '_cu' 'rpmspec' '_rpm' 'kldload' '_kld' 'guilt-help' '_guilt' 'pmeth' '_perl_modules' 'ansible' '_ansible' 'pdfjadetex' '_tex' 'skipstone' '_webbrowser' 'type' '_which' 'eu-nm' '_nm' 'zcompile' '_zcompile' 'rclone' '_rclone' 'dbus-monitor' '_dbus' 'xscreensaver-command' '_xscreensaver' 'guilt' '_guilt' 'vmctl' '_vmctl' 'rusage' '_precommand' 'ifdown' '_net_interfaces' 'stdbuf' '_stdbuf' 'clusterdb' '_postgresql' 'dd' '_dd' 'sha224sum' '_md5sum' 'dpkg-repack' '_dpkg-repack' 'df' '_df' 'members' '_members' 'madison' '_madison' 'rdesktop' '_rdesktop' 'dpkg-reconfigure' '_dpkg' 'gbase64' '_base64' 'rsync' '_rsync' 'quilt' '_quilt' 'bsdconfig' '_bsdconfig' 'chroot' '_chroot' 'sahara' '_openstack' 'pstotgif' '_pspdf' '-value-,LANG,-default-' '_locales' 'cal' '_cal' 'dak' '_dak' 'nawk' '_awk' 'mhlist' '_mh' 'ps2pdf12' '_postscript' 'aap' '_aap' '-value-,PRINTER,-default-' '_printers' 'ps2pdf13' '_postscript' 'ccal' '_ccal' 'ps2pdf14' '_postscript' 'mkshortcut' '_mkshortcut' 'pandoc' '_pandoc' 'mformat' '_mtools' 'opera' '_webbrowser' 'tac' '_tac' 'ps2ps' '_postscript' 'cat' '_cat' 'du' '_du' 'virt-xml-validate' '_libvirt' 'ggetopt' '_getopt' 'rehash' '_hash' 'man' '_man' 'unpigz' '_gzip' 'jar' '_java' '-redirect-,<,gunzip' '_gzip' 'baz' '_baz' 'compdef' '_compdef' 'slrn' '_slrn' 'lsmod' '_modutils' 'avahi-browse-domains' '_avahi' 'putclip' '_putclip' 'ansible-config' '_ansible' 'val' '_sccs' 'rar' '_rar' 'prun' '_pids' 'sar' '_sysstat' 'tar' '_tar' '-value-,GREP_OPTIONS,-default-' '_grep' 'sort' '_sort' 'genisoimage' '_genisoimage' 'swaks' '_swaks' 'sha512sum' '_md5sum' 'pax' '_pax' 'ispell' '_ispell' 'clay' '_clay' 'ed' '_ed' 'say' '_say' 'git-buildpackage' '_git-buildpackage' 'zoneadm' '_zoneadm' 'wipefs' '_wipefs' 'guilt-prev' '_guilt' 'sha384sum' '_md5sum' 'murano' '_openstack' '-redirect-,<,xz' '_xz' 'apt-get' '_apt' 'barbican' '_openstack' 'units' '_units' 'printf' '_print' 'cabal' '_cabal' 'rgview' '_vim' 'reindexdb' '_postgresql' 'iconvconfig' '_iconvconfig' '-redirect-,<,unxz' '_xz' 'zf_mkdir' '_mkdir' 'pstop' '_pids' 'visudo' '_visudo' 'whom' '_mh' 'guilt-header' '_guilt' 'clang++' '_gcc' 'unison' '_unison' 'aodh' '_openstack' 'pg_upgrade' '_postgresql' 'mtoolstest' '_mtools' 'zipinfo' '_zip' 'sqsh' '_sqsh' 'next' '_mh' 'rpmsign' '_rpm' 'skein1024' '_cksum' 'unsetopt' '_setopt' 'chpass' '_chsh' 'md2' '_cksum' '-value-,PROMPT3,-default-' '_ps1234' 'sisu' '_sisu' 'mmove' '_mtools' 'md4' '_cksum' 'javac' '_java' 'iptables-restore' '_iptables' 'pscp.exe' '_pscp' 'md5' '_cksum' 'getfacl.exe' '_getfacl' 'gchown' '_chown' 'doas' '_doas' 'mixerctl' '_mixerctl' 'unfunction' '_functions' 'pacat' '_pulseaudio' 'fc' '_fc' 'javah' '_java' 'fd' '_fd' 'urxvt256cc' '_urxvt' 'otool' '_otool' 'emulate' '_emulate' 'fg' '_jobs_fg' 'gcc' '_gcc' 'sha256sum' '_md5sum' 'mktemp' '_mktemp' 'cdcd' '_cdcd' 'route' '_route' 'ack' '_ack' 'dch' '_debchange' 'removepkg' '_pkgtool' 'iptables-save' '_iptables' 'gsha224sum' '_md5sum' 'tcsh' '_sh' 'javap' '_java' 'mcd' '_mtools' 'sortm' '_mh' 'printenv' '_printenv' 'unlzma' '_xz' 'pbuilder' '_pbuilder' 'apache2ctl' '_apachectl' 'pdflatex' '_tex' 'plutil' '_plutil' 'gcp' '_cp' 'extract' '_extract' 'dos2unix' '_dos2unix' 'sftp' '_ssh' 'ncl' '_nedit' 'showchar' '_psutils' 'groups' '_users' 'smbclient' '_samba' 'scl' '_scl' 'kdeconnect-cli' '_kdeconnect' 'restart' '_initctl' 'rcp' '_rlogin' 'scp' '_ssh' 'rcs' '_rcs' 'eval' '_precommand' 'nohup' '_precommand' 'cdc' '_sccs' 'gcksum' '_cksum' 'postconf' '_postfix' 'cdbs-edit-patch' '_cdbs-edit-patch' 'cloudkitty' '_openstack' 'zcp' '_zmv' 'bogofilter' '_bogofilter' 'gdb' '_gdb' 'strftime' '_strftime' 'bpython2-urwid' '_bpython' 'fixtpps' '_psutils' 'mtype' '_mtools' 'bpython3-urwid' '_bpython' 'bzegrep' '_grep' 'gdd' '_dd' 'parecord' '_pulseaudio' 'jdb' '_java' 'gsha512sum' '_md5sum' 'bzfgrep' '_grep' 'zlistattr' '_zattr' 'gdf' '_df' 'stty' '_stty' 'ldd' '_ldd' 'gm' '_graphicsmagick' '-redirect-,>,xz' '_xz' 'gmktemp' '_mktemp' 'shuf' '_shuf' 'mhshow' '_mh' 'flac' '_flac' 'initctl' '_initctl' 'gsha384sum' '_md5sum' 'tda' '_devtodo' 'cdr' '_cdr' 'chimera' '_webbrowser' 'gs' '_ghostscript' 'guptime' '_uptime' 'a2ensite' '_a2utils' 'code' '_code' 'zone' '_hosts' 'tdd' '_devtodo' 'beep' '_beep' 'zf_rmdir' '_rmdir' 'tde' '_devtodo' 'gv' '_gv' 'usermod' '_user_admin' 'lighty-disable-mod' '_lighttpd' 'hilite' '_precommand' 'filterdiff' '_patchutils' 'arecord' '_alsa-utils' 'base32' '_base64' 'gdu' '_du' 'sudoedit' '_sudo' 'trash' '_trash' 'prompt' '_prompt' 'batch' '_at' 'export' '_typeset' 'btdownloadcurses' '_bittorrent' 'guilt-fork' '_guilt' 'dict' '_dict' 'vimdiff' '_vim' 'lpadmin' '_lp' 'jarsigner' '_java' 'mdu' '_mtools' 'unhash' '_unhash' 'lpoptions' '_lp' 'urxvt256c' '_urxvt' 'pip-3.2' '_pip' 'amaya' '_webbrowser' 'zypper' '_zypper' 'zf_chmod' '_chmod' 'tdr' '_devtodo' 'pmexp' '_perl_modules' 'pip-3.3' '_pip' 'irssi' '_irssi' 'pip-3.4' '_pip' 'setsid' '_setsid' 'hd' '_hexdump' 'gnupod_search.pl' '_gnupod' 'pip-2.7' '_pip' 'darcs' '_darcs' 'gsort' '_sort' 'swiftc' '_swift' 'patch' '_patch' 'feh' '_feh' 'vcsh' '_vcsh' 'rxvt' '_urxvt' 'nautilus' '_nautilus' 'gsha256sum' '_md5sum' 'unwrapdiff' '_patchutils' 'getfacl' '_getfacl' 'combinediff' '_patchutils' 'watch' '_watch' '-value-,XZ_DEFAULTS,-default-' '_xz' 'brctl' '_brctl' 'autoload' '_typeset' 'gem' '_gem' 'ypwhich' '_yp' 'sed' '_sed' 'traceroute' '_hosts' 'tee' '_tee' 'gtac' '_tac' 'gcat' '_cat' 'true' '_nothing' 'bsdtar' '_tar' 'get' '_sccs' 'truss' '_truss' 'mhpath' '_mh' '-value-,RPROMPT,-default-' '_ps1234' 'zsocket' '_zsocket' 'zed' '_zed' 'gex' '_vim' '-value-,LD_DEBUG,-default-' '_ld_debug' 'debdiff' '_debdiff' 'let' '_math' 'guilt-files' '_guilt' 'fnext' '_mh' 'dvips' '_dvi' 'getent' '_getent' '-redirect-,<,bzip2' '_bzip2' 'seq' '_seq' 'lsusb' '_lsusb' 'smitty' '_smit' 'new' '_mh' 'write' '_users_on' 'set' '_set' 'modinfo' '_modutils' 'zen' '_webbrowser' 'tput' '_tput' 'id' '_id' 'tmux' '_tmux' 'start' '_initctl' 'gtar' '_tar' 'btrename' '_bittorrent' 'lintian' '_lintian' 'abcde' '_abcde' 'xterm' '_xterm' 'tex' '_tex' 'head' '_head' 'ecasound' '_ecasound' 'xev' '_x_utils' 'mattrib' '_mtools' 'texi2any' '_texinfo' 'scutil' '_scutil' 'portsnap' '_portsnap' 'ip' '_ip' '-redirect-,<,gzip' '_gzip' 'zparseopts' '_zparseopts' 'networksetup' '_networksetup' 'hexdump' '_hexdump' 'mistral' '_openstack' 'Mosaic' '_webbrowser' 'unlz4' '_lz4' 'gprintenv' '_printenv' 'twistd' '_twisted' 'chfn' '_users' 'cygpath.exe' '_cygpath' 'rcsdiff' '_rcs' 'odmshow' '_object_classes' 'xfd' '_x_utils' 'heat' '_openstack' 'gnupod_search' '_gnupod' 'tardy' '_tardy' '-value-,PS4,-default-' '_ps1234' 'dcopclient' '_dcop' 'dtruss' '_dtruss' 'gsbj' '_pspdf' 'ckeygen' '_twisted' 'picocom' '_picocom' 'parec' '_pulseaudio' 'bttrack' '_bittorrent' 'ansible-playbook' '_ansible' 'fixwpps' '_psutils' 'vared' '_vared' 'zlogin' '_zlogin' 'zfs' '_zfs' 'ps2pdfwr' '_postscript' 'fixwwps' '_psutils' 'ansible-inventory' '_ansible' '-command-' '_autocd' 'diff' '_diff' 'jq' '_jq' 'gstty' '_stty' 'mkzsh.exe' '_mkzsh' 'gshuf' '_shuf' 'ps2ascii' '_pspdf' 'latex' '_tex' 'bibtex' '_bibtex' 'todo.sh' '_todo.sh' 'command' '_command' 'tpkg-install-libc' '_toolchain-source' 'ack2' '_ack' 'setfacl' '_setfacl' 'gnutls-cli' '_gnutls' 'fortune' '_fortune' 'urpmi.addmedia' '_urpmi' 'isag' '_sysstat' 'ggv' '_gnome-gv' 'dpkg-source' '_dpkg_source' 'whoami' '_nothing' 'splitdiff' '_patchutils' 'apachectl' '_apachectl' '-brace-parameter-' '_brace_parameter' 'base64' '_base64' 'exec' '_exec' 'virt-host-validate' '_libvirt' 'bzip2' '_bzip2' 'umount' '_mount' 'django-admin' '_django' 'ssh-agent' '_ssh' 'mgv' '_pspdf' 'insmod' '_modutils' 'prove' '_prove' 'integer' '_typeset' '-value-,LESSCHARSET,-default-' '_less' 'trove' '_openstack' '-value-,PROMPT,-default-' '_ps1234' 'burst' '_mh' '-value-,P4USER,-default-' '_perforce' 'sqlite' '_sqlite' '-value-,LANGUAGE,-default-' '_locales' 'zf_chgrp' '_chown' 'getopt' '_getopt' 'yash' '_sh' 'lha' '_lha' 'strongswan' '_ipsec' 'psnup' '_psutils' 'builtin' '_builtin' 'gpasswd' '_gpasswd' 'xlsatoms' '_x_utils' 'import' '_imagemagick' 'gnocchi' '_openstack' 'btlaunchmanycurses' '_bittorrent' '-redirect-,>,gzip' '_gzip' 'rubber-pipe' '_rubber' 'metaflac' '_flac' 'dcopobject' '_dcop' 'fned' '_zed' 'ssh-keygen' '_ssh' 'mondoarchive' '_mondo' 'pdftops' '_pdf' 'yast' '_yast' 'guilt-pop' '_guilt' 'update-alternatives' '_update-alternatives' 'sha1sum' '_md5sum' 'free' '_free' 'sbuild' '_sbuild' 'parsehdlist' '_urpmi' 'mhn' '_mh' 'mdadm' '_mdadm' '-value-,PS2,-default-' '_ps1234' 'chkstow' '_stow' 'pkg-config' '_pkg-config' 'killall' '_killall' 'guilt-top' '_guilt' 'sched' '_sched' 'apt-cdrom' '_apt' 'php' '_php' 'gsdj' '_pspdf' 'getclip' '_getclip' 'apt-config' '_apt' 'urxvt' '_urxvt' 'b2sum' '_md5sum' 'pmpath' '_perl_modules' 'gnutls-serv' '_gnutls' 'glance' '_openstack' 'asciinema' '_asciinema' 'fetch' '_fetch' 'neutron' '_openstack' 'uml_mconsole' '_uml' 'mlabel' '_mtools' '-value-,LOOPDEV_DEBUG,-default-' '_losetup' 'who' '_who' 'pcred' '_pids' 'reprepro' '_reprepro' 'flex' '_flex' 'gid' '_id' 'asciidoctor' '_asciidoctor' 'dig' '_dig' 'llvm-otool' '_otool' 'avahi-resolve' '_avahi' 'update-rc.d' '_update-rc.d' 'gpatch' '_patch' 'savecore' '_savecore' 'ghead' '_head' 'beadm' '_beadm' 'ln' '_ln' 'epdfview' '_pdf' 'btmakemetafile' '_bittorrent' 'fakeroot' '_fakeroot' 'lp' '_lp' 'fixpspps' '_psutils' '-value-,CFLAGS,-default-' '_gcc' 'ls' '_ls' 'localedef' '_localedef' 'gsed' '_sed' 'axi-cache' '_axi-cache' 'git' '_git' 'xargs' '_xargs' 'schedtool' '_schedtool' 'gtee' '_tee' 'ps2epsi' '_postscript' 'zargs' '_zargs' 'xwud' '_x_utils' 'pstops' '_psutils' 'pip' '_pip' 'tin' '_tin' 'cpio' '_cpio' 'vim' '_vim' 'certtool' '_gnutls' 'jobs' '_jobs_builtin' 'grep' '_grep' 'avahi-resolve-host-name' '_avahi' 'qiv' '_qiv' 'gseq' '_seq' 'gpg2' '_gpg' 'zip' '_zip' 'buildhash' '_ispell' 'zgetattr' '_zattr' 'unxz' '_xz' 'script' '_script' 'mozilla-xremote-client' '_mozilla' 'mysql' '_mysql_utils' 'pyhtmlizer' '_twisted' 'installpkg' '_pkgtool' 'apt-show-versions' '_apt-show-versions' 'xdvi' '_xdvi' 'twist' '_twisted' 'portaudit' '_portaudit' '-value-,CPPFLAGS,-default-' '_gcc' 'mr' '_myrepos' 'yppoll' '_yp' 'gdiff' '_diff' 'mt' '_mt' 'ldap' '_ldap' '-condition-' '_condition' 'native2ascii' '_java' 'lz4c32' '_lz4' 'mv' '_mv' 'gccgo' '_go' 'tunes2pod' '_gnupod' 'mx' '_hosts' 'mlocate' '_locate' 'pdf2dsc' '_pdf' 'gradlew' '_gradle' 'unix2mac' '_dos2unix' 'fmttest' '_mh' 'pg_config' '_postgresql' 'tunes2pod.pl' '_gnupod' 'setxkbmap' '_setxkbmap' 'jexec' '_jexec' 'xdpyinfo' '_x_utils' 'nc' '_netcat' 'guilt-applied' '_guilt' 'cvsup' '_cvsup' 'wajig' '_wajig' 'urxvt256c-mlc' '_urxvt' 'tracepath6' '_tracepath' 'skein512' '_cksum' 'composite' '_imagemagick' 'uptime' '_uptime' 'sysrc' '_sysrc' 'disown' '_jobs_fg' 'ksh88' '_sh' 'zpty' '_zpty' 'valgrind' '_valgrind' 'fusermount' '_fusermount' 'c++' '_gcc' 'tunctl' '_uml' 'nl' '_nl' 'nm' '_nm' 'dpkg-cross' '_dpkg-cross' 'g++' '_gcc' 'debfoster' '_debfoster' 'nkf' '_nkf' 'invoke-rc.d' '_invoke-rc.d' 'gnupod_INIT' '_gnupod' 'ns' '_hosts' 'pkg' '_pkg5' 'p4' '_perforce' 'konqueror' '_webbrowser' 'btlaunchmany' '_bittorrent' 'cowthink' '_cowsay' 'xetex' '_tex' 'evim' '_vim' 'ksh93' '_sh' 'xfontsel' '_x_utils' 'which' '_which' 'od' '_od' 'newgrp' '_groups' 'guilt-unapplied' '_guilt' 'gpgv' '_gpg' 'iwconfig' '_iwconfig' 'ali' '_mh' 'mozilla' '_mozilla' 'make-kpkg' '_make-kpkg' 'lsdiff' '_patchutils' 'catchsegv' '_precommand' '-parameter-' '_parameter' 'portlint' '_portlint' 'mkisofs' '_growisofs' 'rmadison' '_madison' '-value-,ANT_ARGS,-default-' '_ant' 'dumper.exe' '_dumper' 'ncal' '_cal' 'wpa_cli' '_wpa_cli' 'setopt' '_setopt' 'animate' '_imagemagick' 'svn-buildpackage' '_svn-buildpackage' 'zsetattr' '_zattr' 'tla' '_tla' 'gln' '_ln' 'apropos' '_man' 'sccsdiff' '_sccs' 'packf' '_mh' 'kpdf' '_pdf' 'gls' '_ls' 'dpkg' '_dpkg' 'xsetroot' '_x_utils' 'xournal' '_xournal' 'mergechanges' '_mergechanges' 'jls' '_jls' 'bzgrep' '_grep' 'zle' '_zle' 'rpmkeys' '_rpm' 'nmap' '_nmap' 'info' '_texinfo' 'anno' '_mh' 'xli' '_xloadimage' 'unalias' '_aliases' 'merge' '_rcs' 'gb2sum' '_md5sum' 'deborphan' '_deborphan' 'egrep' '_grep' 'zln' '_zmv' 'disable' '_disable' 'fgrep' '_grep' 'gwho' '_who' 'ggrep' '_grep' 'a2ps' '_a2ps' 'uml_moo' '_uml' 'ngrep' '_ngrep' '-value-,TZ,-default-' '_time_zone' 'pmvers' '_perl_modules' 'zf_chown' '_chown' 'pgrep' '_pgrep' 'mmd' '_mtools' 'lldb' '_lldb' 'ethtool' '_ethtool' 'xclip' '_xclip' 'svnadmin' '_subversion' 'cmp' '_cmp' 'rmiregistry' '_java' 'ansible-doc' '_ansible' 'comb' '_sccs' 'ps' '_ps' 'rmf' '_mh' 'rrdtool' '_rrdtool' 'pv' '_pv' 'getconf' '_getconf' '-value-,TERM,-default-' '_terminals' 'mmm' '_webbrowser' 'mktunes' '_gnupod' 'clear' '_nothing' 'dcopfind' '_dcop' 'fmt' '_fmt' 'zgrep' '_grep' 'admin' '_sccs' 'dpkg-query' '_dpkg' 'gnupod_INIT.pl' '_gnupod' 'gmv' '_mv' 'alias' '_alias' 'cygserver.exe' '_cygserver' '-value-,XML_CATALOG_FILES,-default-' '_xmlsoft' 'rmm' '_mh' 'gxargs' '_xargs' 'gnupod_addsong' '_gnupod' 'comm' '_comm' 'diff3' '_diff3' 'svcprop' '_svcprop' 'texi2dvi' '_texinfo' 'comp' '_mh' 'xml' '_xmlstarlet' 'powerd' '_powerd' 'srptool' '_gnutls' 'readelf' '_readelf' 'gvim' '_vim' 'tload' '_tload' 'svnadmin-static' '_subversion' 'shred' '_shred' 'float' '_typeset' 'mysqlshow' '_mysql_utils' 'munchlist' '_ispell' 'dnf' '_dnf' 'inc' '_mh' 'gzip' '_gzip' '-value-,ANSIBLE_STDOUT_CALLBACK,-default-' '_ansible' 'cygserver' '_cygserver' '_zlua' '_zlua_zsh_tab_completion' 'md5sum' '_md5sum' 'mailx' '_mail' 'pdftopbm' '_pdf' 'loadkeys' '_loadkeys' 'zmv' '_zmv' 'tcpdump' '_tcpdump' 'acpi' '_acpi' 'uml_switch' '_uml' 'nice' '_nice' 'pkgtool' '_pkgtool' 'guilt-refresh' '_guilt' 'gnl' '_nl' 'acroread' '_acroread' 'ant' '_ant' '-value-,PROMPT4,-default-' '_ps1234' 'svnlite' '_subversion' 'pacmd' '_pulseaudio' 'bogoutil' '_bogofilter' 'system_profiler' '_system_profiler' 'pcat' '_pack' 'a2dissite' '_a2utils' 'env' '_env' 'pkg_add' '_bsd_pkg' 'postqueue' '_postfix' 'pman' '_perl_modules' 'pmap' '_pmap' '-redirect-,>,compress' '_compress' '-redirect-,<,uncompress' '_compress' 'dkms' '_dkms' 'pinef' '_pine' 'passwd' '_users' 'nedit-nc' '_nedit' 'nedit' '_nedit' 'rc' '_sh' 'psresize' '_psutils' 'pmcat' '_perl_modules' 'SuSEconfig' '_SUSEconfig' 'bpython2' '_bpython' 'skein256' '_cksum' '-value-,PERLDOC,-default-' '_perldoc' 'bpython3' '_bpython' 'osascript' '_osascript' 'chage' '_users' 'rg' '_rg' 'xautolock' '_xautolock' 'tpkg-install' '_toolchain-source' 'god' '_od' '-value-,LPDEST,-default-' '_printers' 'evince' '_evince' 'ri' '_ri' 'pulseaudio' '_pulseaudio' 'm-a' '_module-assistant' 'eog' '_eog' 'mkfifo' '_mkfifo' 'mogrify' '_imagemagick' 'dvipdf' '_dvi' 'shift' '_arrays' 'joe' '_joe' 'rm' '_rm' '-default-' '_default' 'gnome-gv' '_gnome-gv' 'times' '_nothing' 'sysctl' '_sysctl' 'rubber' '_rubber' 'mdel' '_mtools' 'log' '_nothing' 'gmd5sum' '_md5sum' 'unexpand' '_unexpand' 'soa' '_hosts' 'dcopref' '_dcop' 'ping6' '_ping' 'fold' '_fold' 'enable' '_enable' 'openstack' '_openstack' 'antiword' '_antiword' '-value-,GZIP,-default-' '_gzip' 'bpython2-gtk' '_bpython' 'bpython3-gtk' '_bpython' 'zstyle' '_zstyle' '-redirect-' '_redirect' 'zcalc' '_zcalc' 'sha1' '_cksum' 'pon' '_pon' 'jot' '_jot' 'add-zle-hook-widget' '_add-zle-hook-widget' 'mren' '_mtools' 'guilt-push' '_guilt' 'apt-file' '_apt-file' 'top' '_top' 'xon' '_x_utils' '-value-,RPS2,-default-' '_ps1234' 'functions' '_typeset' 'pg_restore' '_postgresql' 'eatmydata' '_precommand' 'xloadimage' '_xloadimage' 'sh' '_sh' 'pfexec' '_pfexec' 'dviconcat' '_dvi' 'figlet' '_figlet' 'read' '_read' 'pinfo' '_texinfo' 'svcadm' '_svcadm' 'gpg' '_gpg' 'apm' '_apm' 'pack' '_pack' 'mpc' '_mpc' 'jail' '_jail' '-value-,PROMPT2,-default-' '_ps1234' 'dladm' '_dladm' 'gmkfifo' '_mkfifo' 'sr' '_surfraw' 'apt' '_apt' 'ack-standalone' '_ack' 'dbus-send' '_dbus' 'dvitype' '_dvi' 'tpb' '_tpb' 'ss' '_ss' 'dcop' '_dcop' 'pick' '_mh' 'keytool' '_java' 'unrar' '_rar' 'su' '_su' 'sv' '_runit' 'oggdec' '_vorbis' 'add-zsh-hook' '_add-zsh-hook' 'mii-tool' '_mii-tool' 'gnupod_check' '_gnupod' 'pkgadd' '_pkgadd' 'npm' '_npm' 'local' '_typeset' 'compress' '_compress' 'lpq' '_lp' 'lpr' '_lp' '-value-,CXXFLAGS,-default-' '_gcc' 'rpm' '_rpm' 'pdfimages' '_pdf' 'locale' '_locale' 'join' '_join' 'gslj' '_pspdf' 'xvncviewer' '_vnc' 'mktunes.pl' '_gnupod' 'mpv' '_mpv' 'gcomm' '_comm' 'atrm' '_at' 'llvm-gcc' '_gcc' 'pscp' '_pscp' 'gslp' '_pspdf' 'groupadd' '_user_admin' 'readshortcut' '_readshortcut' 'gegrep' '_grep' 'tg' '_topgit' 'gfgrep' '_grep' '-value-,WWW_HOME,-default-' '_urls' 'swanctl' '_swanctl' 'dhclient3' '_dhclient' 'xsltproc' '_xmlsoft' 'find' '_find' 'scriptreplay' '_script' 'opera-next' '_webbrowser' 'logname' '_nothing' '-value-,SPROMPT,-default-' '_ps1234' 'fc-match' '_xft_fonts' 'pldd' '_pids' 'bpython' '_bpython' 'xvnc4viewer' '_vnc' 'scan' '_mh' 'rgvim' '_vim' 'ifconfig' '_ifconfig' 'fmadm' '_fmadm' 'tr' '_tr' 'ip6tables-save' '_iptables' 'bindkey' '_bindkey' 'gcmp' '_cmp' 'xmllint' '_xmlsoft' 'lpinfo' '_lp' 'fink' '_fink' 'yppush' '_yp' 'socket' '_socket' 'help' '_sccs' 'zdelattr' '_zattr' 'smartctl' '_smartmontools' 'chdir' '_cd' 'dconf' '_dconf' 'pdftex' '_tex' 'montage' '_imagemagick' 'ipkg' '_opkg' 'unace' '_unace' 'losetup' '_losetup' 'serialver' '_java' 'fs_usage' '_fs_usage' 'gtimeout' '_timeout' 'gfmt' '_fmt' 'gzgrep' '_grep' 'gradle' '_gradle' 'mencal' '_mencal' 'open' '_open' 'iceweasel' '_mozilla' 'netscape' '_netscape' 'hdiutil' '_hdiutil' 'retawq' '_webbrowser' 'designate' '_openstack' 'knock' '_knock' 'aoss' '_precommand' 'display' '_imagemagick' 'aplay' '_alsa-utils' 'piuparts' '_piuparts' 'light' '_webbrowser' 'getclip.exe' '_getclip' 'cplay' '_cplay' 'erb' '_ruby' 'tacker' '_openstack' 'star' '_tar' 'eu-readelf' '_readelf' 'svccfg' '_svccfg' 'stat' '_stat' 'msgchk' '_mh' 'irb' '_ruby' 'gshred' '_shred' 'ginstall' '_install' 'bash' '_bash' 'iconv' '_iconv' 'fw_update' '_fw_update' 'ypcat' '_yp' 'unlimit' '_limits' 'ruby' '_ruby' 'groupdel' '_groups' 'pwdx' '_pids' 'mrd' '_mtools' 'getmail' '_getmail' 'arp' '_arp' 'bogotune' '_bogofilter' 'scons' '_scons' 'grm' '_rm' 'whois' '_whois' 'conch' '_twisted' 'psed' '_sed' 'gsnd' '_pspdf' 'gfold' '_fold' '-redirect-,<,compress' '_compress' 'softwareupdate' '_softwareupdate' 'uncompress' '_compress' 'extcheck' '_java' 'zdump' '_zdump' 'podpath' '_perl_modules' 'install-info' '_texinfo' 'findmnt' '_findmnt' 'genv' '_env' 'guilt-next' '_guilt' 'gstrings' '_strings' 'ansible-galaxy' '_ansible' 'chrt' '_chrt' 'lighty-enable-mod' '_lighttpd' 'xmosaic' '_webbrowser' 'rmdel' '_sccs' 'prs' '_sccs' 'subl' '_sublimetext' 'prt' '_sccs' 'curl' '_curl' 'trap' '_trap' 'appletviewer' '_java' 'zf_ln' '_ln' 'killall5' '_killall' 'attr' '_attr' 'ash' '_sh' 'prev' '_mh' 'pmload' '_perl_modules' 'csh' '_sh' 'dpkg-deb' '_dpkg' 'limit' '_limit' 'dsh' '_dsh' 'tpkg-make' '_toolchain-source' 'fsh' '_fsh' 'touch' '_touch' 'psselect' '_psutils' 'mail' '_mail' 'seaf-cli' '_seafile' 'pg_dumpall' '_postgresql' 'osc' '_osc' 'smbstatus' '_samba' 'module' '_module' 'mhparam' '_mh' 'ksh' '_sh' 'chsh' '_chsh' '-value-,-default-,-command-' '_zargs' 'ypserv' '_yp' 'mread' '_mtools' 'avahi-resolve-address' '_avahi' 'dvitodvi' '_dvi' 'express' '_webbrowser' 'sact' '_sccs' 'poff' '_pon' '-value-,LDFLAGS,-default-' '_gcc' 'sccs' '_sccs' 'pstoedit' '_pspdf' 'mdir' '_mtools' 'rsh' '_rlogin' 'cdrdao' '_cdrdao' 'ssh' '_ssh' 'xrandr' '_xrandr' 'crsh' '_cssh' 'guilt-rm' '_guilt' 'cssh' '_cssh' 'vitrage' '_openstack' 'mdeltree' '_mtools' 'dirs' '_dirs' 'explodepkg' '_pkgtool' 'freezer' '_openstack' 'showmount' '_showmount' 'geany' '_geany' 'zsh' '_zsh' 'pkg_create' '_bsd_pkg' 'cinder' '_openstack' 'gnutls-cli-debug' '_gnutls' 'gjoin' '_join' 'mvim' '_vim' 'ijoin' '_ispell' 'domainname' '_yp' 'espeak' '_espeak' 'wc' '_wc' 'reportbug' '_bug' 'initdb' '_postgresql' 'createdb' '_postgresql' 'trial' '_twisted' '5g' '_go' 'basename' '_basename' 'cscope' '_cscope' 'sadf' '_sysstat' 'svcs' '_svcs' 'dash' '_sh' 'gmplayer' '_mplayer' '5l' '_go' 'zf_mv' '_mv' '-value-,P4MERGE,-default-' '_perforce' '-redirect-,-default-,-default-' '_files' 'configure' '_configure' 'unget' '_sccs' 'pfiles' '_pids' 'guilt-import-commit' '_guilt' 'Mail' '_mail' 'nail' '_mail' 'mkshortcut.exe' '_mkshortcut' '-math-' '_math' 'flex++' '_flex' 'pdfinfo' '_pdf' 'atq' '_at' 'caffeinate' '_caffeinate' 'mcopy' '_mtools' 'lintian-info' '_lintian' 'gfind' '_find' 'xlsclients' '_x_utils' 'ssh-keyscan' '_ssh' 'bts' '_bts' 'pasuspender' '_pulseaudio' 'ftp' '_hosts' 'ipadm' '_ipadm' 'false' '_nothing' 'kill' '_kill' 'gtr' '_tr' 'cftp' '_twisted' 'dumper' '_dumper' 'elfdump' '_elfdump' 'stg' '_stgit' 'policytool' '_java' 'fixpsditps' '_psutils' 'unset' '_vars' 'mtn' '_monotone' 'objdump' '_objdump' 'global' '_global' 'postmaster' '_postgresql' 'yast2' '_yast' 'mtr' '_mtr' 'firefox' '_mozilla' 'dist' '_mh' 's2p' '_sed' 'devtodo' '_devtodo' 'whereis' '_whereis' 'reload' '_initctl' 'mkdir' '_mkdir' 'padsp' '_pulseaudio' 'pkgin' '_pkgin' 'whence' '_which' 'uscan' '_uscan' 'pigz' '_gzip' 'nvim' '_vim' 'sudo' '_sudo' 'interdiff' '_patchutils' 'htop' '_htop' 'dropdb' '_postgresql' 'xtp' '_imagemagick' '-zcalc-line-' '_zcalc_line' 'folder' '_mh' '6g' '_go' 'make' '_make' 'bug' '_bug' 'date' '_date' 'tty' '_tty' 'links' '_links' 'getfattr' '_attr' 'convert' '_imagemagick' 'lua' '_lua' 'inetadm' '_inetadm' '6l' '_go' 'fstat' '_fstat' 'gstat' '_gstat' '-array-value-' '_value' 'cryptsetup' '_cryptsetup' 'ansible-pull' '_ansible' 'hwinfo' '_hwinfo' 'cut' '_cut' 'xsetbg' '_xloadimage' 'xv' '_xv' 'typeset' '_typeset' 'fwhois' '_whois' 'gcore' '_gcore' 'cygstart' '_cygstart' 'xz' '_xz' 'what' '_sccs' 'pactl' '_pulseaudio' 'ipsec' '_ipsec' 'gzegrep' '_grep' 'dillo' '_webbrowser' 'sum' '_cksum' 'gzfgrep' '_grep' 'ffmpeg' '_ffmpeg' 'zstat' '_stat' 'todo' '_devtodo' 'lastb' '_last' 'w3m' '_w3m' 'rup' '_hosts' 'btdownloadheadless' '_bittorrent' 'tidy' '_tidy' 'yum' '_yum' 'virt-admin' '_libvirt' 'nslookup' '_nslookup' 'grep-excuses' '_grep-excuses' 'augtool' '_augeas' 'csup' '_csup' 'debsign' '_debsign' 'zun' '_openstack' 'paste' '_paste' 'urpmi.update' '_urpmi' 'forw' '_mh' 'lslv' '_lslv' 'mhstore' '_mh' 'iftop' '_iftop' 'fprev' '_mh' 'ttyctl' '_ttyctl' 'nginx' '_nginx' 'luarocks' '_luarocks' 'tcptraceroute' '_tcptraceroute' 'ipset' '_ipset' 'a2enmod' '_a2utils' 'chattr' '_chattr' 'p4d' '_perforce' 'xauth' '_xauth' 'tkconch' '_twisted' 'surfraw' '_surfraw' 'dhcpinfo' '_dhcpinfo' 'urxvtc' '_urxvt' 'cvs' '_cvs' 'mysqldiff' '_mysqldiff' 'tree' '_tree' 'mdls' '_mdls' 'dcut' '_dcut' 'epsffit' '_psutils' 'mdfind' '_mdfind' 'xattr' '_attr' 'psig' '_pids' 'cygrunsrv' '_cygrunsrv' 'dtrace' '_dtrace' 'lzma' '_xz' 'gnupod_check.pl' '_gnupod' 'dropuser' '_postgresql' 'zsh-mime-handler' '_zsh-mime-handler' 'ypset' '_yp' 'slabtop' '_slabtop' 'svn' '_subversion' 'lpstat' '_lp' 'vncviewer' '_vnc' 'signify' '_signify' 'entr' '_entr' 'kpartx' '_kpartx' 'xelatex' '_tex' 'ltrace' '_ltrace' 'coreadm' '_coreadm' 'finger' '_finger' 'zmail' '_mail' 'dput' '_dput' 'dwb' '_webbrowser' 'fixfmps' '_psutils' 'rmdir' '_rmdir' 'kvno' '_kvno' '8g' '_go' 'odmget' '_object_classes' 'django-admin.py' '_django' 'gwc' '_wc' 'awk' '_awk' 'gbasename' '_basename' '8l' '_go' 'sqlite3' '_sqlite' 'elinks' '_elinks' 'paplay' '_pulseaudio' 'sw_vers' '_sw_vers' 'ogginfo' '_vorbis' 'makeinfo' '_texinfo' 'gtouch' '_touch' 'auto-apt' '_auto-apt' 'chcon' '_chcon' 'chmod' '_chmod' 'fdfind' '_fd' 'chkconfig' '_chkconfig' 'virt-pki-validate' '_libvirt' 'tryaffix' '_ispell' 'vpnc-connect' '_vpnc' 'psbook' '_psutils' 'xmlstarlet' '_xmlstarlet' 'whatis' '_man' 'service' '_service' 'opkg' '_opkg' 'mysqlimport' '_mysql_utils' 'matlab' '_matlab' 'xwininfo' '_x_utils' 'fc-list' '_xft_fonts' 'xwd' '_x_utils' 'ionice' '_ionice' '-value-,P4PORT,-default-' '_perforce' 'rcctl' '_rcctl' 'modprobe' '_modutils' 'ypxfr' '_yp' 'slitex' '_tex' 'mpstat' '_sysstat' 'pdksh' '_sh' 'lsattr' '_lsattr' 'calendar' '_calendar' 'ncftp' '_ncftp' 'fixmacps' '_psutils' 'pkill' '_pgrep' 'gpg-zip' '_gpg' 'gnumfmt' '_numfmt' 'ansible-console' '_ansible' 'xcode-select' '_xcode-select' 'rwho' '_hosts' 'aptitude' '_aptitude' 'bmake' '_make' 'dmake' '_make' 'dviselect' '_dvi' 'xkill' '_x_utils' 'nvram' '_nvram' 'hash' '_hash' 'www' '_webbrowser' 'gmake' '_make' 'gdate' '_date' 'tune2fs' '_tune2fs' 'pg_isready' '_postgresql' 'vorbiscomment' '_vorbis' 'texindex' '_texinfo' 'sc_usage' '_sc_usage' 'rmic' '_java' 'lynx' '_lynx' 'zeal' '_zeal' 'rmid' '_java' '-tilde-' '_tilde' 'module-assistant' '_module-assistant' 'pmake' '_make' '-command-line-' '_normal' 'pbpaste' '_pbcopy' 'gitk' '_git' 'ssh-copy-id' '_ssh' 'toilet' '_toilet' 'putclip.exe' '_putclip' 'cygcheck.exe' '_cygcheck' 'debchange' '_debchange' 'zcat' '_zcat' 'setfacl.exe' '_setfacl' 'pidof' '_pidof' 'xxd' '_xxd' 'lsof' '_lsof' 'groff' '_groff' 'look' '_look' 'unzip' '_zip' 'renice' '_renice' 'e2label' '_e2label' 'tcp_open' '_tcpsys' 'mhmail' '_mh' 'locate' '_locate' 'hist' '_hist' 'eu-objdump' '_objdump' 'pg_ctl' '_postgresql' 'pdftk' '_pdftk' 'llvm-objdump' '_objdump' '-subscript-' '_subscript' 'lz4' '_lz4' 'rubber-info' '_rubber' 'qtplay' '_qtplay' 'ip6tables-restore' '_iptables' 'bison' '_bison' 'unix2dos' '_dos2unix' 'rtin' '_tin' 'pflags' '_pids' 'zf_rm' '_rm' 'rvim' '_vim' 'lsdev' '_lsdev' 'host' '_host' 'gmkdir' '_mkdir' 'rpmbuild' '_rpm' 'remsh' '_rlogin' 'querybts' '_bug' 'netcat' '_netcat' 'hostname' '_hostname' 'wodim' '_cdrecord' 'txt' '_hosts' 'pdftotext' '_pdf' 'dosread' '_floppy' 'odme' '_object_classes' 'lzop' '_lzop' 'llvm-g++' '_gcc' 'gtty' '_tty' 'podtoc' '_perl_modules' 'pdftexi2dvi' '_texinfo' 'dupload' '_dupload' 'ip6tables' '_iptables' 'btshowmetainfo' '_bittorrent' 'delta' '_sccs' 'tkinfo' '_texinfo' 'sockstat' '_sockstat' 'pg_dump' '_postgresql' 'infocmp' '_terminals' 'pbcopy' '_pbcopy' 'lscfg' '_lscfg' 'ztodo' '_ztodo' 'xrdb' '_x_utils' 'declare' '_typeset' '-value-,P4CLIENT,-default-' '_perforce' 'xpdf' '_xpdf' 'lz4cat' '_lz4' '-equal-' '_equal' 'oggenc' '_vorbis' 'nmcli' '_networkmanager' 'createuser' '_postgresql' 'gcut' '_cut' 'sha512' '_cksum' 'dcopstart' '_dcop' 'cowsay' '_cowsay' 'wget' '_wget' 'refile' '_mh' 'bpython-gtk' '_bpython' 'chflags' '_chflags' 'defaults' '_defaults' 'ghostscript' '_ghostscript' 'dosdel' '_floppy' 'pmls' '_perl_modules' 'mupdf' '_mupdf' 'gsum' '_cksum' 'dlocate' '_dlocate' 'smit' '_smit' 'qdbus' '_qdbus' 'glocate' '_locate' 'ptree' '_ptree' 'makepkg' '_pkgtool' 'yumdb' '_yum' 'noglob' '_precommand' 'rake' '_rake' 'gzilla' '_webbrowser' 'twidge' '_twidge' 'gpaste' '_paste' 'lspv' '_lspv' 'clang' '_gcc' 'ldconfig' '_ldconfig' 'sshfs' '_sshfs' 'gexpand' '_unexpand' 'useradd' '_user_admin' 'pmfunc' '_perl_modules' 'ceilometer' '_openstack' 'tail' '_tail' 'gunexpand' '_unexpand' '-value-,VALGRIND_OPTS,-default-' '_valgrind' 'freebsd-update' '_freebsd-update' 'tpkg-debarch' '_toolchain-source' 'split' '_split' 'gvimdiff' '_vim' 'bzr' '_bzr' 'column' '_column' 'pdf2ps' '_pdf' 'cygpath' '_cygpath' 'eu-strings' '_strings' 'chgrp' '_chown' 'ansible-vault' '_ansible' '-value-' '_value' 'pfctl' '_pfctl' 'mknod' '_mknod' 'where' '_which' 'gsdj500' '_pspdf' 'prstat' '_prstat' 'mysqladmin' '_mysql_utils' 'fixdlsrps' '_psutils' 'btrfs' '_btrfs' 'cygcheck' '_cygcheck' 'pump' '_pump' 'netstat' '_netstat' 'xset' '_xset' 'guilt-rebase' '_guilt' 'flipdiff' '_patchutils' 'sha512t256' '_cksum' 'grmdir' '_rmdir' 'fuser' '_fuser' 'tpkg-update' '_toolchain-source' 'moosic' '_moosic' 'bunzip2' '_bzip2' 'gawk' '_awk' 'telnet' '_telnet' 'pine' '_pine' '-value-,-default-,-default-' '_value' 'pkginfo' '_pkginfo' 'ping' '_ping' 'okular' '_okular' 'gstdbuf' '_stdbuf' 'grail' '_webbrowser' 'gchmod' '_chmod' 'dchroot' '_dchroot' 'userdel' '_users' 'pkg_delete' '_bsd_pkg' 'iostat' '_iostat' 'ifup' '_net_interfaces' 'bzcat' '_bzip2' 'etags' '_etags' 'uname' '_uname' 'dbus-launch' '_dbus' 'gchroot' '_chroot' 'dnf-2' '_dnf' 'ldconfig.real' '_ldconfig' 'dnf-3' '_dnf' 'gzcat' '_gzip' 'pip2' '_pip' 'lprm' '_lp' 'pip3' '_pip' 'uniq' '_uniq' 'lzcat' '_xz' 'eview' '_vim' 'monasca' '_openstack' 'gview' '_vim' 'yafc' '_yafc' 'gphoto2' '_gphoto2' '-value-,PS3,-default-' '_ps1234' 'jadetex' '_tex' 'cdrecord' '_cdrecord' 'readshortcut.exe' '_readshortcut' 'mere' '_mere' 'xzcat' '_xz' 'slocate' '_locate' 'mark' '_mh' 'zegrep' '_grep' 'vserver' '_vserver' 'rview' '_vim' 'pdfopt' '_pdf' 'groupmod' '_user_admin' 'zfgrep' '_grep' 'watcher' '_openstack' 'psmulti' '_postscript' 'folders' '_mh' 'procstat' '_procstat' 'xtightvncviewer' '_vnc' 'podgrep' '_perl_modules' 'manila' '_openstack' 'xview' '_xloadimage' 'ogg123' '_vorbis' 'last' '_last' 'iptables' '_iptables' 'xhost' '_x_utils' 'latexmk' '_tex' 'vacuumdb' '_postgresql' 'less' '_less' 'debuild' '_debuild' 'zmodload' '_zmodload' 'yppasswd' '_yp' 'acpitool' '_acpitool' 'pmdesc' '_perl_modules' 'gunzip' '_gzip' 'gofmt' '_go' 'apt-mark' '_apt' 'rmmod' '_modutils' 'ghostview' '_pspdf' 'pwgen' '_pwgen' 'arping' '_arping' 'composer.phar' '_composer' 'cygstart.exe' '_cygstart' 'rebootin' '_rebootin' 'java' '_java' 'guilt-patchbomb' '_guilt' 'fixscribeps' '_psutils' 'transmission-remote' '_transmission' 'smbcontrol' '_samba' '-value-,DISPLAY,-default-' '_x_display' 'texi2pdf' '_texinfo' 'pstack' '_pids' 'timeout' '_timeout' 'mac2unix' '_dos2unix' 'apvlv' '_pdf' 'readlink' '_readlink' 'run-help' '_run-help' 'zxpdf' '_xpdf' 'virsh' '_libvirt' 'talk' '_other_accounts' 'strace64' '_strace' 'fetchmail' '_fetchmail' 'findaffix' '_ispell' 'totdconfig' '_totd' 'gtail' '_tail' 'vim-addons' '_vim-addons' 'keystone' '_openstack' 'popd' '_directory_stack' 'mksh' '_sh' 'ulimit' '_ulimit' '-value-,RPS1,-default-' '_ps1234' '-value-,RPROMPT2,-default-' '_ps1234' 'wait' '_wait' 'xmodmap' '_xmodmap' 'lftp' '_ncftp' 'mosh' '_mosh' 'install' '_install' 'sha256' '_cksum' 'guilt-add' '_guilt' 'mush' '_mail' 'kfmclient' '_kfmclient' 'combine' '_imagemagick' 'kldunload' '_kld' 'fixwfwps' '_psutils' )
fi

if [[ "${__zsnap_arr[(I)_lastcomp]}" = "0" || "${__zsnap_arr2[(I)_lastcomp]}" != "0" ]]; then
declare -A -H _lastcomp
_lastcomp=( 'prefix' '.zsh/pl' 'unambiguous_cursor' '1' 'nmatches' '1' 'list_lines' '1' 'list_max' '100' 'isuffix' '' 'iprefix' '' 'all_quotes' '\' 'completer' 'complete' 'to_end' 'match' 'unambiguous_positions' '0' 'restore' 'auto' 'tags' ' globbed-files ' 'insert' 'menu' 'last_prompt' 'yes' 'exact' 'accept' 'qisuffix' '' 'qiprefix' '' 'ignored' '0' 'pattern_insert' 'menu' 'insert_positions' '7' 'list' 'ambiguous packed' 'vared' '' 'context' 'command' 'suffix' '' 'unambiguous' '' )
fi

if [[ "${__zsnap_arr[(I)preexec_functions]}" = "0" || "${__zsnap_arr2[(I)preexec_functions]}" != "0" ]]; then
declare -a  preexec_functions
preexec_functions=(
'omz_termsupport_preexec'
'_check_aliases'
'_check_global_aliases'
'_check_git_aliases'
'_zsh_highlight_preexec_hook'
)
fi

if [[ "${__zsnap_arr[(I)COLUMNS]}" = "0" || "${__zsnap_arr2[(I)COLUMNS]}" != "0" ]]; then
declare -i10  COLUMNS
COLUMNS=54
fi

if [[ "${__zsnap_arr[(I)EGID]}" = "0" || "${__zsnap_arr2[(I)EGID]}" != "0" ]]; then
declare -i10  EGID
EGID=11491
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_refresh_display]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_refresh_display]}" != "0" ]]; then
declare  _history_substring_search_refresh_display
_history_substring_search_refresh_display=''
fi

if [[ "${__zsnap_arr[(I)_services]}" = "0" || "${__zsnap_arr2[(I)_services]}" != "0" ]]; then
declare -A -H _services
_services=( 'lzcat' 'unxz' 'dch' 'debchange' 'gnupod_INIT.pl' 'gnupod_INIT' 'iceweasel' 'firefox' 'unlzma' 'unxz' 'xzcat' 'unxz' 'ncl' 'nc' 'xetex' 'tex' 'svnadmin-static' 'svnadmin' '-redirect-,<,gunzip' 'gunzip' '-redirect-,<,bzip2' 'bzip2' 'Mail' 'mail' 'gpg2' 'gpg' 'nail' 'mail' 'gchgrp' 'chgrp' 'mailx' 'mail' 'zf_chgrp' 'chgrp' '-redirect-,<,compress' 'compress' 'gnupod_check.pl' 'gnupod_check' 'lzma' 'xz' 'svnlite' 'svn' '-redirect-,<,bunzip2' 'bunzip2' '-redirect-,>,gzip' 'gunzip' '-redirect-,>,xz' 'unxz' 'pcat' 'unpack' 'slogin' 'ssh' '-redirect-,>,bzip2' 'bunzip2' '-redirect-,<,gzip' 'gzip' '-redirect-,<,xz' 'xz' 'xelatex' 'latex' 'remsh' 'rsh' '-redirect-,<,unxz' 'unxz' 'mktunes.pl' 'mktunes' '-redirect-,>,compress' 'uncompress' '-redirect-,<,uncompress' 'uncompress' 'gnupod_addsong.pl' 'gnupod_addsong' 'nedit-nc' 'nc' 'tunes2pod.pl' 'tunes2pod' 'bzcat' 'bunzip2' 'gchown' 'chown' 'gnupod_search.pl' 'gnupod_search' 'gzcat' 'gunzip' 'zf_chown' 'chown' )
fi

if [[ "${__zsnap_arr[(I)_comp_setup]}" = "0" || "${__zsnap_arr2[(I)_comp_setup]}" != "0" ]]; then
declare -H _comp_setup
_comp_setup='local -A _comp_caller_options;
             _comp_caller_options=(${(kv)options[@]});
             setopt localoptions localtraps localpatterns ${_comp_options[@]};
             local IFS=$'' \t\r\n\0'';
             builtin enable -p \| \~ \( \? \* \[ \< \^ \# 2>&-;
             exec </dev/null;
             trap - ZERR;
             local -a reply;
             local REPLY;
             local REPORTTIME;
             unset REPORTTIME'
fi

if [[ "${__zsnap_arr[(I)_ZSH_AUTOSUGGEST_ASYNC_FD]}" = "0" || "${__zsnap_arr2[(I)_ZSH_AUTOSUGGEST_ASYNC_FD]}" != "0" ]]; then
declare  _ZSH_AUTOSUGGEST_ASYNC_FD
_ZSH_AUTOSUGGEST_ASYNC_FD='12'
fi

if [[ "${__zsnap_arr[(I)BOOTCLASSPATH]}" = "0" || "${__zsnap_arr2[(I)BOOTCLASSPATH]}" != "0" ]]; then
declare -x BOOTCLASSPATH
BOOTCLASSPATH='/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/okhttp.jar:/system/framework/bouncycastle.jar:/system/framework/apache-xml.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/system/framework/sprengine.jar:/system/framework/android.hidl.base-V1.0-java.jar:/system/framework/android.hidl.manager-V1.0-java.jar:/system/framework/knoxsdk.jar:/system/framework/timakeystore.jar:/system/framework/fipstimakeystore.jar:/system/framework/sec_edm.jar:/system/framework/knoxanalyticssdk.jar:/system/framework/smartbondingservice.jar:/system/framework/ucmopensslenginehelper.jar:/system/framework/esecomm.jar:/system/framework/securetimersdk.jar:/system/framework/sec_sdp_sdk.jar:/system/framework/sec_sdp_hidden_sdk.jar:/system/framework/framework-oahl-backward-compatibility.jar:/system/framework/android.test.base.jar:/system/framework/knoxvpnuidtag.jar:/system/framework/SemAudioThumbnail.jar:/system/framework/knoxguard.jar:/system/framework/drutils.jar'
fi

if [[ "${__zsnap_arr[(I)CURSOR]}" = "0" || "${__zsnap_arr2[(I)CURSOR]}" != "0" ]]; then
declare  CURSOR
CURSOR=''
fi

if [[ "${__zsnap_arr[(I)ZSH_THEME_TERM_TAB_TITLE_IDLE]}" = "0" || "${__zsnap_arr2[(I)ZSH_THEME_TERM_TAB_TITLE_IDLE]}" != "0" ]]; then
declare  ZSH_THEME_TERM_TAB_TITLE_IDLE
ZSH_THEME_TERM_TAB_TITLE_IDLE='%15<..<%~%<<'
fi

if [[ "${__zsnap_arr[(I)bg]}" = "0" || "${__zsnap_arr2[(I)bg]}" != "0" ]]; then
declare -A -H bg
bg=( 'cyan' '[46m' 'white' '[47m' 'yellow' '[43m' 'magenta' '[45m' 'black' '[40m' 'blue' '[44m' 'red' '[41m' 'default' '[49m' 'green' '[42m' 'grey' '[40m' )
fi

if [[ "${__zsnap_arr[(I)ZSH_COLORIZE_STYLE]}" = "0" || "${__zsnap_arr2[(I)ZSH_COLORIZE_STYLE]}" != "0" ]]; then
declare  ZSH_COLORIZE_STYLE
ZSH_COLORIZE_STYLE='vim'
fi

if [[ "${__zsnap_arr[(I)LOGCHECK]}" = "0" || "${__zsnap_arr2[(I)LOGCHECK]}" != "0" ]]; then
declare -i  LOGCHECK
LOGCHECK=60
fi

if [[ "${__zsnap_arr[(I)SHELL]}" = "0" || "${__zsnap_arr2[(I)SHELL]}" != "0" ]]; then
declare -x SHELL
SHELL='/data/data/com.termux/files/usr/bin/zsh'
fi

if [[ "${__zsnap_arr[(I)EXTERNAL_STORAGE]}" = "0" || "${__zsnap_arr2[(I)EXTERNAL_STORAGE]}" != "0" ]]; then
declare -x EXTERNAL_STORAGE
EXTERNAL_STORAGE='/sdcard'
fi

if [[ "${__zsnap_arr[(I)_comp_options]}" = "0" || "${__zsnap_arr2[(I)_comp_options]}" != "0" ]]; then
declare -a -H _comp_options
_comp_options=(
'bareglobqual'
'extendedglob'
'glob'
'multibyte'
'multifuncdef'
'nullglob'
'rcexpandparam'
'unset'
'NO_allexport'
'NO_aliases'
'NO_cshnullglob'
'NO_cshjunkiequotes'
'NO_errexit'
'NO_errreturn'
'NO_globassign'
'NO_globsubst'
'NO_histsubstpattern'
'NO_ignorebraces'
'NO_ignoreclosebraces'
'NO_kshglob'
'NO_ksharrays'
'NO_kshtypeset'
'NO_markdirs'
'NO_octalzeroes'
'NO_posixbuiltins'
'NO_posixidentifiers'
'NO_shwordsplit'
'NO_shglob'
'NO_warnnestedvar'
'NO_warncreateglobal'
)
fi

if [[ "${__zsnap_arr[(I)zle_bracketed_paste]}" = "0" || "${__zsnap_arr2[(I)zle_bracketed_paste]}" != "0" ]]; then
declare -a  zle_bracketed_paste
zle_bracketed_paste=(
'[?2004h'
'[?2004l'
)
fi

if [[ "${__zsnap_arr[(I)OPTIND]}" = "0" || "${__zsnap_arr2[(I)OPTIND]}" != "0" ]]; then
declare -i10  OPTIND
OPTIND=1
fi

if [[ "${__zsnap_arr[(I)SVDIR]}" = "0" || "${__zsnap_arr2[(I)SVDIR]}" != "0" ]]; then
declare -x SVDIR
SVDIR='/data/data/com.termux/files/usr/var/service'
fi

if [[ "${__zsnap_arr[(I)FZF_TAB_HOME]}" = "0" || "${__zsnap_arr2[(I)FZF_TAB_HOME]}" != "0" ]]; then
declare  FZF_TAB_HOME
FZF_TAB_HOME='/data/data/com.termux/files/home/.zsh/plugins/fzf-tab'
fi

if [[ "${__zsnap_arr[(I)reset_color]}" = "0" || "${__zsnap_arr2[(I)reset_color]}" != "0" ]]; then
declare -H reset_color
reset_color='[00m'
fi

if [[ "${__zsnap_arr[(I)YSU_VERSION]}" = "0" || "${__zsnap_arr2[(I)YSU_VERSION]}" != "0" ]]; then
declare -x YSU_VERSION
YSU_VERSION='1.7.3'
fi

if [[ "${__zsnap_arr[(I)MBEGIN]}" = "0" || "${__zsnap_arr2[(I)MBEGIN]}" != "0" ]]; then
declare  MBEGIN
MBEGIN=''
fi

if [[ "${__zsnap_arr[(I)IFS]}" = "0" || "${__zsnap_arr2[(I)IFS]}" != "0" ]]; then
declare  IFS
IFS=' 	
 '
fi

if [[ "${__zsnap_arr[(I)BOLD]}" = "0" || "${__zsnap_arr2[(I)BOLD]}" != "0" ]]; then
declare  BOLD
BOLD='[1m'
fi

if [[ "${__zsnap_arr[(I)PROMPT2]}" = "0" || "${__zsnap_arr2[(I)PROMPT2]}" != "0" ]]; then
declare  PROMPT2
PROMPT2='%_> '
fi

if [[ "${__zsnap_arr[(I)PROMPT3]}" = "0" || "${__zsnap_arr2[(I)PROMPT3]}" != "0" ]]; then
declare  PROMPT3
PROMPT3='?# '
fi

if [[ "${__zsnap_arr[(I)PROMPT4]}" = "0" || "${__zsnap_arr2[(I)PROMPT4]}" != "0" ]]; then
declare  PROMPT4
PROMPT4='+%N:%i> '
fi

if [[ "${__zsnap_arr[(I)VENDOR]}" = "0" || "${__zsnap_arr2[(I)VENDOR]}" != "0" ]]; then
declare  VENDOR
VENDOR='unknown'
fi

if [[ "${__zsnap_arr[(I)FAST_HIGHLIGHT_VERSION]}" = "0" || "${__zsnap_arr2[(I)FAST_HIGHLIGHT_VERSION]}" != "0" ]]; then
declare  FAST_HIGHLIGHT_VERSION
FAST_HIGHLIGHT_VERSION='1.55'
fi

if [[ "${__zsnap_arr[(I)KEYBOARD_HACK]}" = "0" || "${__zsnap_arr2[(I)KEYBOARD_HACK]}" != "0" ]]; then
declare  KEYBOARD_HACK
KEYBOARD_HACK=''
fi

if [[ "${__zsnap_arr[(I)ZLAST_COMMANDS]}" = "0" || "${__zsnap_arr2[(I)ZLAST_COMMANDS]}" != "0" ]]; then
declare -a  ZLAST_COMMANDS
ZLAST_COMMANDS=(
'zsnapshot'
)
fi

if [[ "${__zsnap_arr[(I)chpwd_functions]}" = "0" || "${__zsnap_arr2[(I)chpwd_functions]}" != "0" ]]; then
declare -a  chpwd_functions
chpwd_functions=(
'_zlua_precmd'
)
fi

if [[ "${__zsnap_arr[(I)MAILPATH]}" = "0" || "${__zsnap_arr2[(I)MAILPATH]}" != "0" ]]; then
declare  MAILPATH
MAILPATH=''
fi

if [[ "${__zsnap_arr[(I)_postpatcomps]}" = "0" || "${__zsnap_arr2[(I)_postpatcomps]}" != "0" ]]; then
declare -A -H _postpatcomps
_postpatcomps=( '(p[bgpn]m*|*top[bgpn]m)' '_pbm' 'pydoc[0-9.]#' '_pydoc' 'shasum(|5).*' '_shasum' 'qemu(|-system-*)' '_qemu' 'gem[0-9.]#' '_gem' '-value-,RUBY(LIB|OPT|PATH),-default-' '_ruby' '-value-,LC_*,-default-' '_locales' '-value-,*path,-default-' '_directories' 'php[0-9.-]' '_php' '-value-,*PATH,-default-' '_dir_list' '*/X11(|R<4->)/*' '_x_arguments' '(tiff*|*2tiff|pal2rgb)' '_tiff' '-value-,(ftp|http(|s))_proxy,-default-' '_urls' 'zf*' '_zftp' 'c++-*' '_gcc' 'lua[0-9.-]##' '_lua' 'yodl(|2*)' '_yodl' '(texi(2*|ndex))' '_texi' 'python[0-9.]#' '_python' 'gcc-*' '_gcc' 'g++-*' '_gcc' '(ruby|[ei]rb)[0-9.]#' '_ruby' )
fi

if [[ "${__zsnap_arr[(I)bg_no_bold]}" = "0" || "${__zsnap_arr2[(I)bg_no_bold]}" != "0" ]]; then
declare -A -H bg_no_bold
bg_no_bold=( 'cyan' '[22;46m' 'white' '[22;47m' 'yellow' '[22;43m' 'magenta' '[22;45m' 'black' '[22;40m' 'blue' '[22;44m' 'red' '[22;41m' 'default' '[22;49m' 'green' '[22;42m' 'grey' '[22;40m' )
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_EXECUTE_WIDGETS]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_EXECUTE_WIDGETS]}" != "0" ]]; then
declare -a  ZSH_AUTOSUGGEST_EXECUTE_WIDGETS
ZSH_AUTOSUGGEST_EXECUTE_WIDGETS=(
)
fi

if [[ "${__zsnap_arr[(I)comppostfuncs]}" = "0" || "${__zsnap_arr2[(I)comppostfuncs]}" != "0" ]]; then
declare -a  comppostfuncs
comppostfuncs=(
)
fi

if [[ "${__zsnap_arr[(I)FZF_DEFAULT_OPTS]}" = "0" || "${__zsnap_arr2[(I)FZF_DEFAULT_OPTS]}" != "0" ]]; then
declare -x FZF_DEFAULT_OPTS
FZF_DEFAULT_OPTS='--height 80% --layout=reverse --border --inline-info --ansi --bind ctrl-t:toggle'
fi

if [[ "${__zsnap_arr[(I)ZSH_THEME_GIT_PROMPT_SUFFIX]}" = "0" || "${__zsnap_arr2[(I)ZSH_THEME_GIT_PROMPT_SUFFIX]}" != "0" ]]; then
declare  ZSH_THEME_GIT_PROMPT_SUFFIX
ZSH_THEME_GIT_PROMPT_SUFFIX='] %{[00m%}'
fi

if [[ "${__zsnap_arr[(I)fzf_default_completion]}" = "0" || "${__zsnap_arr2[(I)fzf_default_completion]}" != "0" ]]; then
declare  fzf_default_completion
fzf_default_completion='complete-word'
fi

if [[ "${__zsnap_arr[(I)HOME]}" = "0" || "${__zsnap_arr2[(I)HOME]}" != "0" ]]; then
declare -x HOME
HOME='/data/data/com.termux/files/home'
fi

if [[ "${__zsnap_arr[(I)_FAST_COMPLEX_BRACKETS]}" = "0" || "${__zsnap_arr2[(I)_FAST_COMPLEX_BRACKETS]}" != "0" ]]; then
declare -a  _FAST_COMPLEX_BRACKETS
_FAST_COMPLEX_BRACKETS=(
)
fi

if [[ "${__zsnap_arr[(I)fpath]}" = "0" || "${__zsnap_arr2[(I)fpath]}" != "0" ]]; then
declare -a -U fpath
fpath=(
'/data/data/com.termux/files/home/.zsh/plugins/zsh-hist/functions'
'/data/data/com.termux/files/home/.zsh/plugins/zsh-hist'
'/data/data/com.termux/files/home/.zsh/plugins/zsh-history-substring-search'
'/data/data/com.termux/files/home/.zsh/plugins/fast-syntax-highlighting'
'/data/data/com.termux/files/home/.zsh/plugins/zsh-autosuggestions'
'/data/data/com.termux/files/home/.zsh/plugins/you-should-use'
'/data/data/com.termux/files/home/.zsh/plugins/web-search'
'/data/data/com.termux/files/home/.zsh/plugins/youtube-dl'
'/data/data/com.termux/files/home/.zsh/plugins/colorize'
'/data/data/com.termux/files/home/.zsh/plugins/title'
'/data/data/com.termux/files/home/.zsh/plugins/zsh-recycle-bin'
'/data/data/com.termux/files/home/.zsh/plugins/python'
'/data/data/com.termux/files/home/.zsh/plugins/pip'
'/data/data/com.termux/files/home/.zsh/plugins/z.lua'
'/data/data/com.termux/files/home/.zsh/plugins/fzf-tab'
'/data/data/com.termux/files/home/.zsh/plugins/fzf'
'/data/data/com.termux/files/home/.zsh/plugins/fd'
'/data/data/com.termux/files/home/.zsh/plugins/extract'
'/data/data/com.termux/files/home/.zsh/plugins/colored-man-pages'
'/data/data/com.termux/files/home/.zsh/plugins/common-aliases'
'/data/data/com.termux/files/home/.zsh/plugins/gitfast'
'/data/data/com.termux/files/home/.zsh/plugins/gh'
'/data/data/com.termux/files/home/.zsh/functions'
'/data/data/com.termux/files/home/.zsh/completions'
'/data/data/com.termux/files/usr/share/zsh/site-functions'
'/data/data/com.termux/files/usr/share/zsh/5.8/functions'
'/data/data/com.termux/files/home/.zsh/plugins/fzf-tab/lib'
)
fi

if [[ "${__zsnap_arr[(I)_ZSH_AUTOSUGGEST_CHILD_PID]}" = "0" || "${__zsnap_arr2[(I)_ZSH_AUTOSUGGEST_CHILD_PID]}" != "0" ]]; then
declare  _ZSH_AUTOSUGGEST_CHILD_PID
_ZSH_AUTOSUGGEST_CHILD_PID='13654'
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_result]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_result]}" != "0" ]]; then
declare  _history_substring_search_result
_history_substring_search_result=''
fi

if [[ "${__zsnap_arr[(I)custom_config_file]}" = "0" || "${__zsnap_arr2[(I)custom_config_file]}" != "0" ]]; then
declare  custom_config_file
custom_config_file='/.zsh/lib/termsupport.zsh'
fi

if [[ "${__zsnap_arr[(I)EDITOR]}" = "0" || "${__zsnap_arr2[(I)EDITOR]}" != "0" ]]; then
declare -x EDITOR
EDITOR='micro'
fi

if [[ "${__zsnap_arr[(I)__savecursor]}" = "0" || "${__zsnap_arr2[(I)__savecursor]}" != "0" ]]; then
declare  __savecursor
__savecursor='0'
fi

if [[ "${__zsnap_arr[(I)ZSH_HIGHLIGHT_MAXLENGTH]}" = "0" || "${__zsnap_arr2[(I)ZSH_HIGHLIGHT_MAXLENGTH]}" != "0" ]]; then
declare  ZSH_HIGHLIGHT_MAXLENGTH
ZSH_HIGHLIGHT_MAXLENGTH='10000'
fi

if [[ "${__zsnap_arr[(I)NONE]}" = "0" || "${__zsnap_arr2[(I)NONE]}" != "0" ]]; then
declare  NONE
NONE='(B[m'
fi

if [[ "${__zsnap_arr[(I)HISTORY_SUBSTRING_SEARCH_FUZZY]}" = "0" || "${__zsnap_arr2[(I)HISTORY_SUBSTRING_SEARCH_FUZZY]}" != "0" ]]; then
declare  HISTORY_SUBSTRING_SEARCH_FUZZY
HISTORY_SUBSTRING_SEARCH_FUZZY=''
fi

if [[ "${__zsnap_arr[(I)KEYTIMEOUT]}" = "0" || "${__zsnap_arr2[(I)KEYTIMEOUT]}" != "0" ]]; then
declare -i  KEYTIMEOUT
KEYTIMEOUT=40
fi

if [[ "${__zsnap_arr[(I)SHLVL]}" = "0" || "${__zsnap_arr2[(I)SHLVL]}" != "0" ]]; then
declare -i10 -x SHLVL
SHLVL=1
fi

if [[ "${__zsnap_arr[(I)MACHTYPE]}" = "0" || "${__zsnap_arr2[(I)MACHTYPE]}" != "0" ]]; then
declare  MACHTYPE
MACHTYPE='arm'
fi

if [[ "${__zsnap_arr[(I)argv]}" = "0" || "${__zsnap_arr2[(I)argv]}" != "0" ]]; then
declare -a  argv
argv=(
)
fi

if [[ "${__zsnap_arr[(I)pfx]}" = "0" || "${__zsnap_arr2[(I)pfx]}" != "0" ]]; then
declare  pfx
pfx='fzf-tab-lscolors'
fi

if [[ "${__zsnap_arr[(I)ZSH_THEME_GIT_PROMPT_PREFIX]}" = "0" || "${__zsnap_arr2[(I)ZSH_THEME_GIT_PROMPT_PREFIX]}" != "0" ]]; then
declare  ZSH_THEME_GIT_PROMPT_PREFIX
ZSH_THEME_GIT_PROMPT_PREFIX='%{[01;34m%}['
fi

if [[ "${__zsnap_arr[(I)ZLUA_LUAEXE]}" = "0" || "${__zsnap_arr2[(I)ZLUA_LUAEXE]}" != "0" ]]; then
declare  ZLUA_LUAEXE
ZLUA_LUAEXE='/data/data/com.termux/files/usr/bin/lua5.3'
fi

if [[ "${__zsnap_arr[(I)BG]}" = "0" || "${__zsnap_arr2[(I)BG]}" != "0" ]]; then
declare -A -H BG
BG=( '070' '%{[48;5;070m%}' '170' '%{[48;5;170m%}' '071' '%{[48;5;071m%}' '171' '%{[48;5;171m%}' '072' '%{[48;5;072m%}' '172' '%{[48;5;172m%}' '073' '%{[48;5;073m%}' '173' '%{[48;5;173m%}' '074' '%{[48;5;074m%}' '174' '%{[48;5;174m%}' '075' '%{[48;5;075m%}' '175' '%{[48;5;175m%}' '076' '%{[48;5;076m%}' '176' '%{[48;5;176m%}' '077' '%{[48;5;077m%}' '177' '%{[48;5;177m%}' '078' '%{[48;5;078m%}' '178' '%{[48;5;178m%}' '079' '%{[48;5;079m%}' '179' '%{[48;5;179m%}' '080' '%{[48;5;080m%}' '180' '%{[48;5;180m%}' '081' '%{[48;5;081m%}' '181' '%{[48;5;181m%}' '082' '%{[48;5;082m%}' '182' '%{[48;5;182m%}' '083' '%{[48;5;083m%}' '183' '%{[48;5;183m%}' '084' '%{[48;5;084m%}' '184' '%{[48;5;184m%}' '085' '%{[48;5;085m%}' '185' '%{[48;5;185m%}' '086' '%{[48;5;086m%}' '186' '%{[48;5;186m%}' '087' '%{[48;5;087m%}' '187' '%{[48;5;187m%}' '000' '%{[48;5;000m%}' '088' '%{[48;5;088m%}' '188' '%{[48;5;188m%}' '001' '%{[48;5;001m%}' '089' '%{[48;5;089m%}' '100' '%{[48;5;100m%}' '200' '%{[48;5;200m%}' '189' '%{[48;5;189m%}' '002' '%{[48;5;002m%}' '101' '%{[48;5;101m%}' '201' '%{[48;5;201m%}' '003' '%{[48;5;003m%}' '102' '%{[48;5;102m%}' '202' '%{[48;5;202m%}' '004' '%{[48;5;004m%}' '103' '%{[48;5;103m%}' '203' '%{[48;5;203m%}' '005' '%{[48;5;005m%}' '104' '%{[48;5;104m%}' '204' '%{[48;5;204m%}' '006' '%{[48;5;006m%}' '105' '%{[48;5;105m%}' '205' '%{[48;5;205m%}' '007' '%{[48;5;007m%}' '106' '%{[48;5;106m%}' '206' '%{[48;5;206m%}' '008' '%{[48;5;008m%}' '107' '%{[48;5;107m%}' '207' '%{[48;5;207m%}' '009' '%{[48;5;009m%}' '108' '%{[48;5;108m%}' '208' '%{[48;5;208m%}' '109' '%{[48;5;109m%}' '209' '%{[48;5;209m%}' '090' '%{[48;5;090m%}' '190' '%{[48;5;190m%}' '091' '%{[48;5;091m%}' '191' '%{[48;5;191m%}' '092' '%{[48;5;092m%}' '192' '%{[48;5;192m%}' '093' '%{[48;5;093m%}' '193' '%{[48;5;193m%}' '094' '%{[48;5;094m%}' '194' '%{[48;5;194m%}' '095' '%{[48;5;095m%}' '195' '%{[48;5;195m%}' '096' '%{[48;5;096m%}' '196' '%{[48;5;196m%}' '097' '%{[48;5;097m%}' '197' '%{[48;5;197m%}' '010' '%{[48;5;010m%}' '098' '%{[48;5;098m%}' '198' '%{[48;5;198m%}' '011' '%{[48;5;011m%}' '099' '%{[48;5;099m%}' '110' '%{[48;5;110m%}' '210' '%{[48;5;210m%}' '199' '%{[48;5;199m%}' '012' '%{[48;5;012m%}' '111' '%{[48;5;111m%}' '211' '%{[48;5;211m%}' '013' '%{[48;5;013m%}' '112' '%{[48;5;112m%}' '212' '%{[48;5;212m%}' '014' '%{[48;5;014m%}' '113' '%{[48;5;113m%}' '213' '%{[48;5;213m%}' '015' '%{[48;5;015m%}' '114' '%{[48;5;114m%}' '214' '%{[48;5;214m%}' '016' '%{[48;5;016m%}' '115' '%{[48;5;115m%}' '215' '%{[48;5;215m%}' '017' '%{[48;5;017m%}' '116' '%{[48;5;116m%}' '216' '%{[48;5;216m%}' '018' '%{[48;5;018m%}' '117' '%{[48;5;117m%}' '217' '%{[48;5;217m%}' '019' '%{[48;5;019m%}' '118' '%{[48;5;118m%}' '218' '%{[48;5;218m%}' '119' '%{[48;5;119m%}' '219' '%{[48;5;219m%}' '020' '%{[48;5;020m%}' '021' '%{[48;5;021m%}' '120' '%{[48;5;120m%}' '220' '%{[48;5;220m%}' '022' '%{[48;5;022m%}' '121' '%{[48;5;121m%}' '221' '%{[48;5;221m%}' '023' '%{[48;5;023m%}' '122' '%{[48;5;122m%}' '222' '%{[48;5;222m%}' '024' '%{[48;5;024m%}' '123' '%{[48;5;123m%}' '223' '%{[48;5;223m%}' '025' '%{[48;5;025m%}' '124' '%{[48;5;124m%}' '224' '%{[48;5;224m%}' '026' '%{[48;5;026m%}' '125' '%{[48;5;125m%}' '225' '%{[48;5;225m%}' '027' '%{[48;5;027m%}' '126' '%{[48;5;126m%}' '226' '%{[48;5;226m%}' '028' '%{[48;5;028m%}' '127' '%{[48;5;127m%}' '227' '%{[48;5;227m%}' '029' '%{[48;5;029m%}' '128' '%{[48;5;128m%}' '228' '%{[48;5;228m%}' '129' '%{[48;5;129m%}' '229' '%{[48;5;229m%}' '030' '%{[48;5;030m%}' '031' '%{[48;5;031m%}' '130' '%{[48;5;130m%}' '230' '%{[48;5;230m%}' '032' '%{[48;5;032m%}' '131' '%{[48;5;131m%}' '231' '%{[48;5;231m%}' '033' '%{[48;5;033m%}' '132' '%{[48;5;132m%}' '232' '%{[48;5;232m%}' '034' '%{[48;5;034m%}' '133' '%{[48;5;133m%}' '233' '%{[48;5;233m%}' '035' '%{[48;5;035m%}' '134' '%{[48;5;134m%}' '234' '%{[48;5;234m%}' '036' '%{[48;5;036m%}' '135' '%{[48;5;135m%}' '235' '%{[48;5;235m%}' '136' '%{[48;5;136m%}' '037' '%{[48;5;037m%}' '236' '%{[48;5;236m%}' '137' '%{[48;5;137m%}' '038' '%{[48;5;038m%}' '237' '%{[48;5;237m%}' '138' '%{[48;5;138m%}' '039' '%{[48;5;039m%}' '238' '%{[48;5;238m%}' '139' '%{[48;5;139m%}' '239' '%{[48;5;239m%}' '040' '%{[48;5;040m%}' '140' '%{[48;5;140m%}' '041' '%{[48;5;041m%}' '240' '%{[48;5;240m%}' '141' '%{[48;5;141m%}' '042' '%{[48;5;042m%}' '241' '%{[48;5;241m%}' '142' '%{[48;5;142m%}' '043' '%{[48;5;043m%}' '242' '%{[48;5;242m%}' '143' '%{[48;5;143m%}' '044' '%{[48;5;044m%}' '243' '%{[48;5;243m%}' '144' '%{[48;5;144m%}' '045' '%{[48;5;045m%}' '244' '%{[48;5;244m%}' '145' '%{[48;5;145m%}' '046' '%{[48;5;046m%}' '245' '%{[48;5;245m%}' '146' '%{[48;5;146m%}' '047' '%{[48;5;047m%}' '246' '%{[48;5;246m%}' '147' '%{[48;5;147m%}' '048' '%{[48;5;048m%}' '247' '%{[48;5;247m%}' '148' '%{[48;5;148m%}' '049' '%{[48;5;049m%}' '248' '%{[48;5;248m%}' '149' '%{[48;5;149m%}' '249' '%{[48;5;249m%}' '050' '%{[48;5;050m%}' '150' '%{[48;5;150m%}' '051' '%{[48;5;051m%}' '250' '%{[48;5;250m%}' '151' '%{[48;5;151m%}' '052' '%{[48;5;052m%}' '251' '%{[48;5;251m%}' '152' '%{[48;5;152m%}' '053' '%{[48;5;053m%}' '252' '%{[48;5;252m%}' '153' '%{[48;5;153m%}' '054' '%{[48;5;054m%}' '253' '%{[48;5;253m%}' '154' '%{[48;5;154m%}' '055' '%{[48;5;055m%}' '254' '%{[48;5;254m%}' '155' '%{[48;5;155m%}' '056' '%{[48;5;056m%}' '255' '%{[48;5;255m%}' '156' '%{[48;5;156m%}' '057' '%{[48;5;057m%}' '157' '%{[48;5;157m%}' '058' '%{[48;5;058m%}' '158' '%{[48;5;158m%}' '059' '%{[48;5;059m%}' '159' '%{[48;5;159m%}' '060' '%{[48;5;060m%}' '160' '%{[48;5;160m%}' '061' '%{[48;5;061m%}' '161' '%{[48;5;161m%}' '062' '%{[48;5;062m%}' '162' '%{[48;5;162m%}' '063' '%{[48;5;063m%}' '163' '%{[48;5;163m%}' '064' '%{[48;5;064m%}' '164' '%{[48;5;164m%}' '065' '%{[48;5;065m%}' '165' '%{[48;5;165m%}' '066' '%{[48;5;066m%}' '166' '%{[48;5;166m%}' '067' '%{[48;5;067m%}' '167' '%{[48;5;167m%}' '068' '%{[48;5;068m%}' '168' '%{[48;5;168m%}' '069' '%{[48;5;069m%}' '169' '%{[48;5;169m%}' )
fi

if [[ "${__zsnap_arr[(I)RED]}" = "0" || "${__zsnap_arr2[(I)RED]}" != "0" ]]; then
declare  RED
RED='[31m'
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_match_index]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_match_index]}" != "0" ]]; then
declare -i  _history_substring_search_match_index
_history_substring_search_match_index=0
fi

if [[ "${__zsnap_arr[(I)_HIST__ARGS]}" = "0" || "${__zsnap_arr2[(I)_HIST__ARGS]}" != "0" ]]; then
declare -A -H _HIST__ARGS
_HIST__ARGS=( 'f' 'fix:        remove from history, then load into buffer' 'g' 'get:        load into buffer' 'l' 'list:       look, but do not touch' 'n' 'normalize:  remove from history, then format & append as new' 'r' 'reload:     re-initialize local history from file' 'u' 'undo:       roll back to before last action in same session' 'd' 'delete:     remove from history' 'e' 'edit:       remove from history, then modify & append as new' )
fi

if [[ "${__zsnap_arr[(I)PSVAR]}" = "0" || "${__zsnap_arr2[(I)PSVAR]}" != "0" ]]; then
declare  PSVAR
PSVAR=''
fi

if [[ "${__zsnap_arr[(I)EUID]}" = "0" || "${__zsnap_arr2[(I)EUID]}" != "0" ]]; then
declare -i10  EUID
EUID=11491
fi

if [[ "${__zsnap_arr[(I)fg]}" = "0" || "${__zsnap_arr2[(I)fg]}" != "0" ]]; then
declare -A -H fg
fg=( 'cyan' '[36m' 'white' '[37m' 'yellow' '[33m' 'magenta' '[35m' 'black' '[30m' 'blue' '[34m' 'red' '[31m' 'default' '[39m' 'grey' '[30m' 'green' '[32m' )
fi

if [[ "${__zsnap_arr[(I)CDPATH]}" = "0" || "${__zsnap_arr2[(I)CDPATH]}" != "0" ]]; then
declare  CDPATH
CDPATH=''
fi

if [[ "${__zsnap_arr[(I)cdpath]}" = "0" || "${__zsnap_arr2[(I)cdpath]}" != "0" ]]; then
declare -a  cdpath
cdpath=(
)
fi

if [[ "${__zsnap_arr[(I)SECONDS]}" = "0" || "${__zsnap_arr2[(I)SECONDS]}" != "0" ]]; then
declare -i10  SECONDS
SECONDS=342
fi

if [[ "${__zsnap_arr[(I)ANDROID_ROOT]}" = "0" || "${__zsnap_arr2[(I)ANDROID_ROOT]}" != "0" ]]; then
declare -x ANDROID_ROOT
ANDROID_ROOT='/system'
fi

if [[ "${__zsnap_arr[(I)ft]}" = "0" || "${__zsnap_arr2[(I)ft]}" != "0" ]]; then
declare  ft
ft='webm'
fi

if [[ "${__zsnap_arr[(I)LINES]}" = "0" || "${__zsnap_arr2[(I)LINES]}" != "0" ]]; then
declare -i10  LINES
LINES=31
fi

if [[ "${__zsnap_arr[(I)ZLUA_EXEC]}" = "0" || "${__zsnap_arr2[(I)ZLUA_EXEC]}" != "0" ]]; then
declare  ZLUA_EXEC
ZLUA_EXEC='/data/data/com.termux/files/usr/bin/lua5.3'
fi

if [[ "${__zsnap_arr[(I)PATH]}" = "0" || "${__zsnap_arr2[(I)PATH]}" != "0" ]]; then
declare -x PATH
PATH='/data/data/com.termux/files/home/bin://data/data/com.termux/files/home/.local/bin:/data/data/com.termux/files/usr/bin:/storage/emulated/0/bin:/storage/40E6-DFFD/bin:/data/data/com.termux/files/home/.zsh/plugins/zsnapshot'
fi

if [[ "${__zsnap_arr[(I)ZSH_COMPDUMP]}" = "0" || "${__zsnap_arr2[(I)ZSH_COMPDUMP]}" != "0" ]]; then
declare  ZSH_COMPDUMP
ZSH_COMPDUMP='/data/data/com.termux/files/home/.config/.zcompdump-localhost-5.8'
fi

if [[ "${__zsnap_arr[(I)FAST_HIGHLIGHT_STYLES]}" = "0" || "${__zsnap_arr2[(I)FAST_HIGHLIGHT_STYLES]}" != "0" ]]; then
declare -A  FAST_HIGHLIGHT_STYLES
FAST_HIGHLIGHT_STYLES=( 'mythemeoptarg-number' 'fg=magenta' 'mythemesingle-sq-bracket' 'fg=green' 'mythemeunknown-token' 'fg=red,bold' 'mythemecase-parentheses' 'fg=yellow' 'mythemefor-loop-operator' 'fg=yellow' 'mythemedollar-quoted-argument' 'fg=yellow' 'mythemecorrect-subtle' 'fg=12' 'mythemeprecommand' 'fg=green' 'mythemecase-condition' 'bg=blue' 'mythemefor-loop-number' 'fg=magenta' 'mythemeoptarg-string' 'fg=yellow' 'mythemedouble-sq-bracket' 'fg=green' 'mythemesubcommand' 'fg=yellow' 'mythemealias' 'fg=green' 'mythemeglobbing-ext' 'fg=13' 'mythemehistory-expansion' 'fg=blue,bold' 'mythemedefault' 'none' 'mythemehere-string-text' 'fg=18' 'mythemecommandseparator' 'none' 'mythemereserved-word' 'fg=yellow' 'mythemepath_pathseparator' '' 'mythemeassign-array-bracket' 'fg=green' 'mythemerecursive-base' 'none' 'mythemebracket-level-1' 'fg=green,bold' 'mythememathvar' 'fg=blue,bold' 'mythemematherr' 'fg=red' 'mythemebracket-level-2' 'fg=yellow,bold' 'mythemefor-loop-separator' 'fg=yellow,bold' 'mythemebracket-level-3' 'fg=cyan,bold' 'mythemecommand' 'fg=green' 'mythemeglobal-alias' 'bg=blue' 'mythemepath' 'fg=27' 'mythemedouble-paren' 'fg=yellow' 'mythemefunction' 'fg=green' 'mythemeback-dollar-quoted-argument' 'fg=cyan' 'mythemesingle-hyphen-option' 'fg=cyan' 'mythemeassign' 'none' 'mythemehere-string-var' 'fg=cyan,bg=18' 'mythemeincorrect-subtle' 'fg=red' 'mythemeexec-descriptor' 'fg=yellow,bold' 'mythemehere-string-tri' 'fg=yellow' 'mythemeglobbing' 'fg=blue,bold' 'mythemeredirection' 'none' 'mythemesecondary' 'free' 'mythemepath-to-dir' 'fg=27,underline' 'mythemedouble-hyphen-option' 'fg=cyan' 'mythemecomment' 'fg=black,bold' 'mythemehashed-command' 'fg=green' 'mythemesingle-quoted-argument' 'fg=yellow' 'mythemebuiltin' 'fg=green' 'mythemesuffix-alias' 'fg=green' 'mythemecase-input' 'fg=green' 'mythemefor-loop-variable' 'none' 'mythemevariable' 'fg=113' 'mythemesubtle-separator' 'fg=green' 'mythememathnum' 'fg=magenta' 'mythemeback-quoted-argument' 'none' 'mythemesubtle-bg' 'bg=18' 'mythemeback-or-dollar-double-quoted-argument' 'fg=cyan' 'mythemepaired-bracket' 'bg=blue' 'mythemedouble-quoted-argument' 'fg=yellow' )
fi

if [[ "${__zsnap_arr[(I)manpath]}" = "0" || "${__zsnap_arr2[(I)manpath]}" != "0" ]]; then
declare -a  manpath
manpath=(
)
fi

if [[ "${__zsnap_arr[(I)__searching]}" = "0" || "${__zsnap_arr2[(I)__searching]}" != "0" ]]; then
declare  __searching
__searching='down-line-or-beginning-search'
fi

if [[ "${__zsnap_arr[(I)ANDROID_DATA]}" = "0" || "${__zsnap_arr2[(I)ANDROID_DATA]}" != "0" ]]; then
declare -x ANDROID_DATA
ANDROID_DATA='/data'
fi

if [[ "${__zsnap_arr[(I)MANPATH]}" = "0" || "${__zsnap_arr2[(I)MANPATH]}" != "0" ]]; then
declare  MANPATH
MANPATH=''
fi

if [[ "${__zsnap_arr[(I)ZSH_ARGZERO]}" = "0" || "${__zsnap_arr2[(I)ZSH_ARGZERO]}" != "0" ]]; then
declare  ZSH_ARGZERO
ZSH_ARGZERO='/data/data/com.termux/files/usr/bin/zsh'
fi

if [[ "${__zsnap_arr[(I)ZSH_PIP_CACHE_FILE]}" = "0" || "${__zsnap_arr2[(I)ZSH_PIP_CACHE_FILE]}" != "0" ]]; then
declare  ZSH_PIP_CACHE_FILE
ZSH_PIP_CACHE_FILE='/data/data/com.termux/files/home/.cache/pip/zsh-cache'
fi

if [[ "${__zsnap_arr[(I)_ZSH_HIGHLIGHT_PRIOR_CURSOR]}" = "0" || "${__zsnap_arr2[(I)_ZSH_HIGHLIGHT_PRIOR_CURSOR]}" != "0" ]]; then
declare -i  _ZSH_HIGHLIGHT_PRIOR_CURSOR
_ZSH_HIGHLIGHT_PRIOR_CURSOR=0
fi

if [[ "${__zsnap_arr[(I)_HIST__OPTS]}" = "0" || "${__zsnap_arr2[(I)_HIST__OPTS]}" != "0" ]]; then
declare -A -H _HIST__OPTS
_HIST__OPTS=( '-s' 'silent:      do not print anything' '-f' 'force:       never ask for confirmation' '-i' 'interactive: always ask for confirmation' )
fi

if [[ "${__zsnap_arr[(I)precmd_functions]}" = "0" || "${__zsnap_arr2[(I)precmd_functions]}" != "0" ]]; then
declare -a  precmd_functions
precmd_functions=(
'omz_termsupport_precmd'
'_show_title'
'_flush_ysu_buffer'
'_zsh_autosuggest_start'
)
fi

if [[ "${__zsnap_arr[(I)signals]}" = "0" || "${__zsnap_arr2[(I)signals]}" != "0" ]]; then
declare -a  signals
signals=(
'EXIT'
'HUP'
'INT'
'QUIT'
'ILL'
'TRAP'
'ABRT'
'BUS'
'FPE'
'KILL'
'USR1'
'SEGV'
'USR2'
'PIPE'
'ALRM'
'TERM'
'STKFLT'
'CHLD'
'CONT'
'STOP'
'TSTP'
'TTIN'
'TTOU'
'URG'
'XCPU'
'XFSZ'
'VTALRM'
'PROF'
'WINCH'
'POLL'
'PWR'
'SYS'
'SWI'
'ZERR'
'DEBUG'
)
fi

if [[ "${__zsnap_arr[(I)ZSH_CUSTOM]}" = "0" || "${__zsnap_arr2[(I)ZSH_CUSTOM]}" != "0" ]]; then
declare  ZSH_CUSTOM
ZSH_CUSTOM='/.zsh'
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_raw_match_index]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_raw_match_index]}" != "0" ]]; then
declare -i  _history_substring_search_raw_match_index
_history_substring_search_raw_match_index=0
fi

if [[ "${__zsnap_arr[(I)WATCHFMT]}" = "0" || "${__zsnap_arr2[(I)WATCHFMT]}" != "0" ]]; then
declare  WATCHFMT
WATCHFMT='%n has %a %l.'
fi

if [[ "${__zsnap_arr[(I)OSTYPE]}" = "0" || "${__zsnap_arr2[(I)OSTYPE]}" != "0" ]]; then
declare  OSTYPE
OSTYPE='linux-androideabi'
fi

if [[ "${__zsnap_arr[(I)__git_printf_supports_v]}" = "0" || "${__zsnap_arr2[(I)__git_printf_supports_v]}" != "0" ]]; then
declare  __git_printf_supports_v
__git_printf_supports_v='yes'
fi

if [[ "${__zsnap_arr[(I)PS1]}" = "0" || "${__zsnap_arr2[(I)PS1]}" != "0" ]]; then
declare  PS1
PS1='
%(?,%{[31m%}┌─╼%{[01;31m%}[%{[01;34m%}H4CK3R%{[01;33m%}@%{[01;36m%}LINUX%{[01;31m%}]%{[01;32m%}—%{[01;31m%}[%{[01;32m%}%(5~|%-1~/…/%2~|%4~)%{[01;31m%}]%{[00m%} $()%{$reset_color%}
%{[31m%}└────╼%{[01;37m%} ❯%{[01;34m%}❯%{[01;36m%}❯%{[00m%} ,%{[31m%}┌─╼%{[01;31m%}[%{[01;32m%}%(5~|%-1~/…/%2~|%4~)%{[01;31m%}]%{[00m%}
%{[31m%}└╼%{[01;37m%} ❯%{[01;34m%}❯%{[01;36m%}❯%{[00m%} '
fi

if [[ "${__zsnap_arr[(I)ZLUA_SCRIPT]}" = "0" || "${__zsnap_arr2[(I)ZLUA_SCRIPT]}" != "0" ]]; then
declare  ZLUA_SCRIPT
ZLUA_SCRIPT='/data/data/com.termux/files/home/.zsh/plugins/z.lua/z.lua'
fi

if [[ "${__zsnap_arr[(I)FSH_LIST]}" = "0" || "${__zsnap_arr2[(I)FSH_LIST]}" != "0" ]]; then
declare -a  FSH_LIST
FSH_LIST=(
)
fi

if [[ "${__zsnap_arr[(I)histchars]}" = "0" || "${__zsnap_arr2[(I)histchars]}" != "0" ]]; then
declare  histchars
histchars='!^#'
fi

if [[ "${__zsnap_arr[(I)PS2]}" = "0" || "${__zsnap_arr2[(I)PS2]}" != "0" ]]; then
declare  PS2
PS2='%_> '
fi

if [[ "${__zsnap_arr[(I)ZSH_NAME]}" = "0" || "${__zsnap_arr2[(I)ZSH_NAME]}" != "0" ]]; then
declare  ZSH_NAME
ZSH_NAME='zsh'
fi

if [[ "${__zsnap_arr[(I)BUFFER]}" = "0" || "${__zsnap_arr2[(I)BUFFER]}" != "0" ]]; then
declare  BUFFER
BUFFER=''
fi

if [[ "${__zsnap_arr[(I)ZSS_DIR]}" = "0" || "${__zsnap_arr2[(I)ZSS_DIR]}" != "0" ]]; then
declare  ZSS_DIR
ZSS_DIR='/data/data/com.termux/files/home/.zsh/plugins/zsnapshot'
fi

if [[ "${__zsnap_arr[(I)PS3]}" = "0" || "${__zsnap_arr2[(I)PS3]}" != "0" ]]; then
declare  PS3
PS3='?# '
fi

if [[ "${__zsnap_arr[(I)PS4]}" = "0" || "${__zsnap_arr2[(I)PS4]}" != "0" ]]; then
declare  PS4
PS4='+%N:%i> '
fi

if [[ "${__zsnap_arr[(I)_editor_fts]}" = "0" || "${__zsnap_arr2[(I)_editor_fts]}" != "0" ]]; then
declare -a  _editor_fts
_editor_fts=(
'cpp'
'cxx'
'cc'
'c'
'hh'
'h'
'inl'
'asc'
'txt'
'TXT'
'tex'
)
fi

if [[ "${__zsnap_arr[(I)ZERO]}" = "0" || "${__zsnap_arr2[(I)ZERO]}" != "0" ]]; then
declare  ZERO
ZERO='/data/data/com.termux/files/home/.zsh/plugins/zsnapshot/zsnapshot.plugin.zsh'
fi

if [[ "${__zsnap_arr[(I)TERM]}" = "0" || "${__zsnap_arr2[(I)TERM]}" != "0" ]]; then
declare -x TERM
TERM='xterm-256color'
fi

if [[ "${__zsnap_arr[(I)_ZSH_HIGHLIGHT_PRIOR_RACTIVE]}" = "0" || "${__zsnap_arr2[(I)_ZSH_HIGHLIGHT_PRIOR_RACTIVE]}" != "0" ]]; then
declare  _ZSH_HIGHLIGHT_PRIOR_RACTIVE
_ZSH_HIGHLIGHT_PRIOR_RACTIVE='0'
fi

if [[ "${__zsnap_arr[(I)less_termcap]}" = "0" || "${__zsnap_arr2[(I)less_termcap]}" != "0" ]]; then
declare -A -H less_termcap
less_termcap=( 'ue' '[00m' 'se' '[00m' 'mb' '[01;31m' 'md' '[01;31m' 'me' '[00m' 'so' '[01;33m[44m' 'us' '[01;32m' )
fi

if [[ "${__zsnap_arr[(I)MODULE_PATH]}" = "0" || "${__zsnap_arr2[(I)MODULE_PATH]}" != "0" ]]; then
declare  MODULE_PATH
MODULE_PATH='/data/data/com.termux/files/usr/lib/zsh/5.8'
fi

if [[ "${__zsnap_arr[(I)ZSH_PIP_INDEXES]}" = "0" || "${__zsnap_arr2[(I)ZSH_PIP_INDEXES]}" != "0" ]]; then
declare -a  ZSH_PIP_INDEXES
ZSH_PIP_INDEXES=(
'https://pypi.org/simple/'
)
fi

if [[ "${__zsnap_arr[(I)_history_substring_search_query_parts]}" = "0" || "${__zsnap_arr2[(I)_history_substring_search_query_parts]}" != "0" ]]; then
declare -a  _history_substring_search_query_parts
_history_substring_search_query_parts=(
)
fi

if [[ "${__zsnap_arr[(I)OLDPWD]}" = "0" || "${__zsnap_arr2[(I)OLDPWD]}" != "0" ]]; then
declare -x OLDPWD
OLDPWD='/data/data/com.termux/files/home/.zsh/plugins/zsnapshot'
fi

if [[ "${__zsnap_arr[(I)FAST_WORK_DIR]}" = "0" || "${__zsnap_arr2[(I)FAST_WORK_DIR]}" != "0" ]]; then
declare  FAST_WORK_DIR
FAST_WORK_DIR='/data/data/com.termux/files/home/.cache/fsh'
fi

if [[ "${__zsnap_arr[(I)SAVEHIST]}" = "0" || "${__zsnap_arr2[(I)SAVEHIST]}" != "0" ]]; then
declare -i10  SAVEHIST
SAVEHIST=20000
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_IGNORE_WIDGETS]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_IGNORE_WIDGETS]}" != "0" ]]; then
declare -a  ZSH_AUTOSUGGEST_IGNORE_WIDGETS
ZSH_AUTOSUGGEST_IGNORE_WIDGETS=(
'orig-*'
'beep'
'run-help'
'set-local-history'
'which-command'
'yank'
'yank-pop'
'zle-*'
)
fi

if [[ "${__zsnap_arr[(I)MATCH]}" = "0" || "${__zsnap_arr2[(I)MATCH]}" != "0" ]]; then
declare  MATCH
MATCH=''
fi

if [[ "${__zsnap_arr[(I)ZSH_CACHE_DIR]}" = "0" || "${__zsnap_arr2[(I)ZSH_CACHE_DIR]}" != "0" ]]; then
declare  ZSH_CACHE_DIR
ZSH_CACHE_DIR='/data/data/com.termux/files/home/.cache/zsh'
fi

if [[ "${__zsnap_arr[(I)_ZSH_AUTOSUGGEST_BUILTIN_ACTIONS]}" = "0" || "${__zsnap_arr2[(I)_ZSH_AUTOSUGGEST_BUILTIN_ACTIONS]}" != "0" ]]; then
declare -a  _ZSH_AUTOSUGGEST_BUILTIN_ACTIONS
_ZSH_AUTOSUGGEST_BUILTIN_ACTIONS=(
'clear'
'fetch'
'suggest'
'accept'
'execute'
'enable'
'disable'
'toggle'
)
fi

if [[ "${__zsnap_arr[(I)HISTCHARS]}" = "0" || "${__zsnap_arr2[(I)HISTCHARS]}" != "0" ]]; then
declare  HISTCHARS
HISTCHARS='!^#'
fi

if [[ "${__zsnap_arr[(I)ZSH]}" = "0" || "${__zsnap_arr2[(I)ZSH]}" != "0" ]]; then
declare -x ZSH
ZSH='/data/data/com.termux/files/home/.zsh'
fi

if [[ "${__zsnap_arr[(I)ZSH_AUTOSUGGEST_STRATEGY]}" = "0" || "${__zsnap_arr2[(I)ZSH_AUTOSUGGEST_STRATEGY]}" != "0" ]]; then
declare -a  ZSH_AUTOSUGGEST_STRATEGY
ZSH_AUTOSUGGEST_STRATEGY=(
'history'
)
fi

if [[ "${__zsnap_arr[(I)TERMUX_VERSION]}" = "0" || "${__zsnap_arr2[(I)TERMUX_VERSION]}" != "0" ]]; then
declare -x TERMUX_VERSION
TERMUX_VERSION='0.114'
fi

if [[ "${__zsnap_arr[(I)prompt_themes]}" = "0" || "${__zsnap_arr2[(I)prompt_themes]}" != "0" ]]; then
declare -a -U prompt_themes
prompt_themes=(
'Imp'
'adam1'
'adam2'
'adben'
'astro-z'
'bart'
'berlin'
'bigfade'
'candy'
'classyTouch'
'clint'
'darkblood'
'default'
'dragon'
'elite2'
'elite'
'fade'
'fino-time'
'fino'
'fire'
'fox'
'funky'
'gnzh'
'gruvbox'
'intheloop'
'kali'
'kphoen'
'mikeh'
'multiline'
'my-theme'
'off'
'oliver'
'parrot2'
'parrot'
'punctual'
'pws'
'redhat'
'refined'
'restore'
'rgm'
'rkj-repos'
'rkj'
'sepshell'
'shelder'
'simonoff'
'steeef'
'strug'
'suse'
'ubunly'
'walters'
'xiong-chiamov'
'xiong'
'ys'
'zefram'
)
fi

if [[ "${__zsnap_arr[(I)PAGER]}" = "0" || "${__zsnap_arr2[(I)PAGER]}" != "0" ]]; then
declare -x PAGER
PAGER='less'
fi

if [[ "${__zsnap_arr[(I)FG]}" = "0" || "${__zsnap_arr2[(I)FG]}" != "0" ]]; then
declare -A -H FG
FG=( '070' '%{[38;5;070m%}' '170' '%{[38;5;170m%}' '071' '%{[38;5;071m%}' '171' '%{[38;5;171m%}' '072' '%{[38;5;072m%}' '172' '%{[38;5;172m%}' '073' '%{[38;5;073m%}' '173' '%{[38;5;173m%}' '074' '%{[38;5;074m%}' '174' '%{[38;5;174m%}' '075' '%{[38;5;075m%}' '175' '%{[38;5;175m%}' '076' '%{[38;5;076m%}' '176' '%{[38;5;176m%}' '077' '%{[38;5;077m%}' '177' '%{[38;5;177m%}' '078' '%{[38;5;078m%}' '178' '%{[38;5;178m%}' '079' '%{[38;5;079m%}' '179' '%{[38;5;179m%}' '080' '%{[38;5;080m%}' '180' '%{[38;5;180m%}' '081' '%{[38;5;081m%}' '181' '%{[38;5;181m%}' '082' '%{[38;5;082m%}' '182' '%{[38;5;182m%}' '083' '%{[38;5;083m%}' '183' '%{[38;5;183m%}' '084' '%{[38;5;084m%}' '184' '%{[38;5;184m%}' '085' '%{[38;5;085m%}' '185' '%{[38;5;185m%}' '086' '%{[38;5;086m%}' '186' '%{[38;5;186m%}' '087' '%{[38;5;087m%}' '187' '%{[38;5;187m%}' '000' '%{[38;5;000m%}' '088' '%{[38;5;088m%}' '188' '%{[38;5;188m%}' '001' '%{[38;5;001m%}' '089' '%{[38;5;089m%}' '100' '%{[38;5;100m%}' '200' '%{[38;5;200m%}' '189' '%{[38;5;189m%}' '002' '%{[38;5;002m%}' '101' '%{[38;5;101m%}' '201' '%{[38;5;201m%}' '003' '%{[38;5;003m%}' '102' '%{[38;5;102m%}' '202' '%{[38;5;202m%}' '004' '%{[38;5;004m%}' '103' '%{[38;5;103m%}' '203' '%{[38;5;203m%}' '005' '%{[38;5;005m%}' '104' '%{[38;5;104m%}' '204' '%{[38;5;204m%}' '006' '%{[38;5;006m%}' '105' '%{[38;5;105m%}' '205' '%{[38;5;205m%}' '007' '%{[38;5;007m%}' '106' '%{[38;5;106m%}' '206' '%{[38;5;206m%}' '008' '%{[38;5;008m%}' '107' '%{[38;5;107m%}' '207' '%{[38;5;207m%}' '009' '%{[38;5;009m%}' '108' '%{[38;5;108m%}' '208' '%{[38;5;208m%}' '109' '%{[38;5;109m%}' '209' '%{[38;5;209m%}' '090' '%{[38;5;090m%}' '190' '%{[38;5;190m%}' '091' '%{[38;5;091m%}' '191' '%{[38;5;191m%}' '092' '%{[38;5;092m%}' '192' '%{[38;5;192m%}' '093' '%{[38;5;093m%}' '193' '%{[38;5;193m%}' '094' '%{[38;5;094m%}' '194' '%{[38;5;194m%}' '095' '%{[38;5;095m%}' '195' '%{[38;5;195m%}' '096' '%{[38;5;096m%}' '196' '%{[38;5;196m%}' '097' '%{[38;5;097m%}' '197' '%{[38;5;197m%}' '010' '%{[38;5;010m%}' '098' '%{[38;5;098m%}' '198' '%{[38;5;198m%}' '011' '%{[38;5;011m%}' '099' '%{[38;5;099m%}' '110' '%{[38;5;110m%}' '210' '%{[38;5;210m%}' '199' '%{[38;5;199m%}' '012' '%{[38;5;012m%}' '111' '%{[38;5;111m%}' '211' '%{[38;5;211m%}' '013' '%{[38;5;013m%}' '112' '%{[38;5;112m%}' '212' '%{[38;5;212m%}' '014' '%{[38;5;014m%}' '113' '%{[38;5;113m%}' '213' '%{[38;5;213m%}' '015' '%{[38;5;015m%}' '114' '%{[38;5;114m%}' '214' '%{[38;5;214m%}' '016' '%{[38;5;016m%}' '115' '%{[38;5;115m%}' '215' '%{[38;5;215m%}' '017' '%{[38;5;017m%}' '116' '%{[38;5;116m%}' '216' '%{[38;5;216m%}' '018' '%{[38;5;018m%}' '117' '%{[38;5;117m%}' '217' '%{[38;5;217m%}' '019' '%{[38;5;019m%}' '118' '%{[38;5;118m%}' '218' '%{[38;5;218m%}' '119' '%{[38;5;119m%}' '219' '%{[38;5;219m%}' '020' '%{[38;5;020m%}' '021' '%{[38;5;021m%}' '120' '%{[38;5;120m%}' '220' '%{[38;5;220m%}' '022' '%{[38;5;022m%}' '121' '%{[38;5;121m%}' '221' '%{[38;5;221m%}' '023' '%{[38;5;023m%}' '122' '%{[38;5;122m%}' '222' '%{[38;5;222m%}' '024' '%{[38;5;024m%}' '123' '%{[38;5;123m%}' '223' '%{[38;5;223m%}' '025' '%{[38;5;025m%}' '124' '%{[38;5;124m%}' '224' '%{[38;5;224m%}' '026' '%{[38;5;026m%}' '125' '%{[38;5;125m%}' '225' '%{[38;5;225m%}' '027' '%{[38;5;027m%}' '126' '%{[38;5;126m%}' '226' '%{[38;5;226m%}' '028' '%{[38;5;028m%}' '127' '%{[38;5;127m%}' '227' '%{[38;5;227m%}' '029' '%{[38;5;029m%}' '128' '%{[38;5;128m%}' '228' '%{[38;5;228m%}' '129' '%{[38;5;129m%}' '229' '%{[38;5;229m%}' '030' '%{[38;5;030m%}' '031' '%{[38;5;031m%}' '130' '%{[38;5;130m%}' '230' '%{[38;5;230m%}' '032' '%{[38;5;032m%}' '131' '%{[38;5;131m%}' '231' '%{[38;5;231m%}' '033' '%{[38;5;033m%}' '132' '%{[38;5;132m%}' '232' '%{[38;5;232m%}' '034' '%{[38;5;034m%}' '133' '%{[38;5;133m%}' '233' '%{[38;5;233m%}' '035' '%{[38;5;035m%}' '134' '%{[38;5;134m%}' '234' '%{[38;5;234m%}' '036' '%{[38;5;036m%}' '135' '%{[38;5;135m%}' '235' '%{[38;5;235m%}' '136' '%{[38;5;136m%}' '037' '%{[38;5;037m%}' '236' '%{[38;5;236m%}' '137' '%{[38;5;137m%}' '038' '%{[38;5;038m%}' '237' '%{[38;5;237m%}' '138' '%{[38;5;138m%}' '039' '%{[38;5;039m%}' '238' '%{[38;5;238m%}' '139' '%{[38;5;139m%}' '239' '%{[38;5;239m%}' '040' '%{[38;5;040m%}' '140' '%{[38;5;140m%}' '041' '%{[38;5;041m%}' '240' '%{[38;5;240m%}' '141' '%{[38;5;141m%}' '042' '%{[38;5;042m%}' '241' '%{[38;5;241m%}' '142' '%{[38;5;142m%}' '043' '%{[38;5;043m%}' '242' '%{[38;5;242m%}' '143' '%{[38;5;143m%}' '044' '%{[38;5;044m%}' '243' '%{[38;5;243m%}' '144' '%{[38;5;144m%}' '045' '%{[38;5;045m%}' '244' '%{[38;5;244m%}' '145' '%{[38;5;145m%}' '046' '%{[38;5;046m%}' '245' '%{[38;5;245m%}' '146' '%{[38;5;146m%}' '047' '%{[38;5;047m%}' '246' '%{[38;5;246m%}' '147' '%{[38;5;147m%}' '048' '%{[38;5;048m%}' '247' '%{[38;5;247m%}' '148' '%{[38;5;148m%}' '049' '%{[38;5;049m%}' '248' '%{[38;5;248m%}' '149' '%{[38;5;149m%}' '249' '%{[38;5;249m%}' '050' '%{[38;5;050m%}' '150' '%{[38;5;150m%}' '051' '%{[38;5;051m%}' '250' '%{[38;5;250m%}' '151' '%{[38;5;151m%}' '052' '%{[38;5;052m%}' '251' '%{[38;5;251m%}' '152' '%{[38;5;152m%}' '053' '%{[38;5;053m%}' '252' '%{[38;5;252m%}' '153' '%{[38;5;153m%}' '054' '%{[38;5;054m%}' '253' '%{[38;5;253m%}' '154' '%{[38;5;154m%}' '055' '%{[38;5;055m%}' '254' '%{[38;5;254m%}' '155' '%{[38;5;155m%}' '056' '%{[38;5;056m%}' '255' '%{[38;5;255m%}' '156' '%{[38;5;156m%}' '057' '%{[38;5;057m%}' '157' '%{[38;5;157m%}' '058' '%{[38;5;058m%}' '158' '%{[38;5;158m%}' '059' '%{[38;5;059m%}' '159' '%{[38;5;159m%}' '060' '%{[38;5;060m%}' '160' '%{[38;5;160m%}' '061' '%{[38;5;061m%}' '161' '%{[38;5;161m%}' '062' '%{[38;5;062m%}' '162' '%{[38;5;162m%}' '063' '%{[38;5;063m%}' '163' '%{[38;5;163m%}' '064' '%{[38;5;064m%}' '164' '%{[38;5;164m%}' '065' '%{[38;5;065m%}' '165' '%{[38;5;165m%}' '066' '%{[38;5;066m%}' '166' '%{[38;5;166m%}' '067' '%{[38;5;067m%}' '167' '%{[38;5;167m%}' '068' '%{[38;5;068m%}' '168' '%{[38;5;168m%}' '069' '%{[38;5;069m%}' '169' '%{[38;5;169m%}' )
fi

if [[ "${__zsnap_arr[(I)FPATH]}" = "0" || "${__zsnap_arr2[(I)FPATH]}" != "0" ]]; then
declare -U FPATH
FPATH='/data/data/com.termux/files/home/.zsh/plugins/zsh-hist/functions:/data/data/com.termux/files/home/.zsh/plugins/zsh-hist:/data/data/com.termux/files/home/.zsh/plugins/zsh-history-substring-search:/data/data/com.termux/files/home/.zsh/plugins/fast-syntax-highlighting:/data/data/com.termux/files/home/.zsh/plugins/zsh-autosuggestions:/data/data/com.termux/files/home/.zsh/plugins/you-should-use:/data/data/com.termux/files/home/.zsh/plugins/web-search:/data/data/com.termux/files/home/.zsh/plugins/youtube-dl:/data/data/com.termux/files/home/.zsh/plugins/colorize:/data/data/com.termux/files/home/.zsh/plugins/title:/data/data/com.termux/files/home/.zsh/plugins/zsh-recycle-bin:/data/data/com.termux/files/home/.zsh/plugins/python:/data/data/com.termux/files/home/.zsh/plugins/pip:/data/data/com.termux/files/home/.zsh/plugins/z.lua:/data/data/com.termux/files/home/.zsh/plugins/fzf-tab:/data/data/com.termux/files/home/.zsh/plugins/fzf:/data/data/com.termux/files/home/.zsh/plugins/fd:/data/data/com.termux/files/home/.zsh/plugins/extract:/data/data/com.termux/files/home/.zsh/plugins/colored-man-pages:/data/data/com.termux/files/home/.zsh/plugins/common-aliases:/data/data/com.termux/files/home/.zsh/plugins/gitfast:/data/data/com.termux/files/home/.zsh/plugins/gh:/data/data/com.termux/files/home/.zsh/functions:/data/data/com.termux/files/home/.zsh/completions:/data/data/com.termux/files/usr/share/zsh/site-functions:/data/data/com.termux/files/usr/share/zsh/5.8/functions:/data/data/com.termux/files/home/.zsh/plugins/fzf-tab/lib'
fi

if [[ "${__zsnap_arr[(I)LESS]}" = "0" || "${__zsnap_arr2[(I)LESS]}" != "0" ]]; then
declare -x LESS
LESS='-R'
fi

if [[ "${__zsnap_arr[(I)__FAST_HIGHLIGHT_TOKEN_TYPES]}" = "0" || "${__zsnap_arr2[(I)__FAST_HIGHLIGHT_TOKEN_TYPES]}" != "0" ]]; then
declare -A  __FAST_HIGHLIGHT_TOKEN_TYPES
__FAST_HIGHLIGHT_TOKEN_TYPES=( '||' '3' '&&' '3' '()' '2' 'coproc' '2' 'elif' '2' 'noglob' '1' 'command' '1' 'do' '2' 'time' '2' 'exec' '1' '&|' '3' 'until' '2' 'pkexec' '1' 'if' '2' 'then' '2' '!' '2' 'builtin' '1' '&' '3' '(' '2' 'while' '2' 'nocorrect' '1' '|&' '3' '{' '2' '|' '3' ';' '3' 'else' '2' '&!' '3' )
fi

if [[ "${__zsnap_arr[(I)ZSH_COLORIZE_TOOL]}" = "0" || "${__zsnap_arr2[(I)ZSH_COLORIZE_TOOL]}" != "0" ]]; then
declare  ZSH_COLORIZE_TOOL
ZSH_COLORIZE_TOOL='pygmentize'
fi

if [[ "${__zsnap_arr[(I)ZSH_COLORIZE_PLUGIN_PATH]}" = "0" || "${__zsnap_arr2[(I)ZSH_COLORIZE_PLUGIN_PATH]}" != "0" ]]; then
declare  ZSH_COLORIZE_PLUGIN_PATH
ZSH_COLORIZE_PLUGIN_PATH='/data/data/com.termux/files/home/.zsh/plugins/colorize/colorize.plugin.zsh'
fi

if [[ "${__zsnap_arr[(I)_ftb_group_colors]}" = "0" || "${__zsnap_arr2[(I)_ftb_group_colors]}" != "0" ]]; then
declare -a  _ftb_group_colors
_ftb_group_colors=(
'[94m'
'[32m'
'[33m'
'[35m'
'[31m'
'[38;5;27m'
'[36m'
'[38;5;100m'
'[38;5;98m'
'[91m'
'[38;5;80m'
'[92m'
'[38;5;214m'
'[38;5;165m'
'[38;5;124m'
'[38;5;120m'
)
fi

if [[ "${__zsnap_arr[(I)SPROMPT]}" = "0" || "${__zsnap_arr2[(I)SPROMPT]}" != "0" ]]; then
declare  SPROMPT
SPROMPT='zsh: correct ''%R'' to ''%r'' [nyae]? '
fi

if [[ "${__zsnap_arr[(I)FX]}" = "0" || "${__zsnap_arr2[(I)FX]}" != "0" ]]; then
declare -A -H FX
FX=( 'no-italic' '%{[23m%}' 'bold' '%{[01m%}' 'no-reverse' '%{[27m%}' 'blink' '%{[05m%}' 'reset' '%{[00m%}' 'reverse' '%{[07m%}' 'no-blink' '%{[25m%}' 'underline' '%{[04m%}' 'no-bold' '%{[22m%}' 'no-underline' '%{[24m%}' 'italic' '%{[03m%}' )
fi

if [[ "${__zsnap_arr[(I)colour]}" = "0" || "${__zsnap_arr2[(I)colour]}" != "0" ]]; then
declare -A  colour
colour=( '00' 'none' '22' 'normal' '44' 'bg-blue' 'fg-red' '31' '01' 'bold' '23' 'no-standout' '45' 'bg-magenta' '02' 'faint' '24' 'no-underline' '46' 'bg-cyan' '03' 'standout' '25' 'no-blink' '47' 'bg-white' '04' 'underline' 'yellow' '33' 'bg-red' '41' 'bold' '01' '05' 'blink' '27' 'no-reverse' '49' 'bg-default' 'no-reverse' '27' '28' 'no-conceal' '07' 'reverse' '08' 'conceal' 'fg-black' '30' 'red' '31' 'conceal' '08' 'default' '39' 'faint' '02' 'fg-green' '32' 'no-underline' '24' 'bg-magenta' '45' 'magenta' '35' 'blink' '05' 'blue' '34' '30' 'black' 'bg-white' '47' 'fg-default' '39' 'grey' '30' '31' 'red' 'no-standout' '23' '32' 'green' '33' 'yellow' 'bg-yellow' '43' '34' 'blue' 'cyan' '36' '35' 'magenta' '36' 'cyan' 'white' '37' 'bg-blue' '44' '37' 'white' 'standout' '03' 'fg-magenta' '35' '39' 'default' 'bg-grey' '40' 'no-conceal' '28' 'reverse' '07' 'bg-cyan' '46' 'underline' '04' 'fg-yellow' '33' 'bg-black' '40' 'fg-white' '37' 'normal' '22' 'fg-blue' '34' 'bg-green' '42' 'none' '00' 'black' '30' 'fg-grey' '30' 'no-blink' '25' 'bg-default' '49' '40' 'bg-black' '41' 'bg-red' 'green' '32' 'fg-cyan' '36' '42' 'bg-green' '43' 'bg-yellow' )
fi

if [[ "${__zsnap_arr[(I)pipestatus]}" = "0" || "${__zsnap_arr2[(I)pipestatus]}" != "0" ]]; then
declare -a  pipestatus
pipestatus=(
'0'
)
fi

if [[ "${__zsnap_arr[(I)prompt]}" = "0" || "${__zsnap_arr2[(I)prompt]}" != "0" ]]; then
declare  prompt
prompt='
%(?,%{[31m%}┌─╼%{[01;31m%}[%{[01;34m%}H4CK3R%{[01;33m%}@%{[01;36m%}LINUX%{[01;31m%}]%{[01;32m%}—%{[01;31m%}[%{[01;32m%}%(5~|%-1~/…/%2~|%4~)%{[01;31m%}]%{[00m%} $()%{$reset_color%}
%{[31m%}└────╼%{[01;37m%} ❯%{[01;34m%}❯%{[01;36m%}❯%{[00m%} ,%{[31m%}┌─╼%{[01;31m%}[%{[01;32m%}%(5~|%-1~/…/%2~|%4~)%{[01;31m%}]%{[00m%}
%{[31m%}└╼%{[01;37m%} ❯%{[01;34m%}❯%{[01;36m%}❯%{[00m%} '
fi

if [[ "${__zsnap_arr[(I)PURPLE]}" = "0" || "${__zsnap_arr2[(I)PURPLE]}" != "0" ]]; then
declare  PURPLE
PURPLE='[35m'
fi

if [[ "${__zsnap_arr[(I)MAILCHECK]}" = "0" || "${__zsnap_arr2[(I)MAILCHECK]}" != "0" ]]; then
declare -i  MAILCHECK
MAILCHECK=60
fi

if [[ "${__zsnap_arr[(I)PROMPT]}" = "0" || "${__zsnap_arr2[(I)PROMPT]}" != "0" ]]; then
declare  PROMPT
PROMPT='
%(?,%{[31m%}┌─╼%{[01;31m%}[%{[01;34m%}H4CK3R%{[01;33m%}@%{[01;36m%}LINUX%{[01;31m%}]%{[01;32m%}—%{[01;31m%}[%{[01;32m%}%(5~|%-1~/…/%2~|%4~)%{[01;31m%}]%{[00m%} $()%{$reset_color%}
%{[31m%}└────╼%{[01;37m%} ❯%{[01;34m%}❯%{[01;36m%}❯%{[00m%} ,%{[31m%}┌─╼%{[01;31m%}[%{[01;32m%}%(5~|%-1~/…/%2~|%4~)%{[01;31m%}]%{[00m%}
%{[31m%}└╼%{[01;37m%} ❯%{[01;34m%}❯%{[01;36m%}❯%{[00m%} '
fi

if [[ "${__zsnap_arr[(I)HOST]}" = "0" || "${__zsnap_arr2[(I)HOST]}" != "0" ]]; then
declare  HOST
HOST='localhost'
fi

if [[ "${__zsnap_arr[(I)version]}" = "0" || "${__zsnap_arr2[(I)version]}" != "0" ]]; then
declare  version
version='recycle-bin v1.2.1'
fi


#
# Functions
#
unfunction -m \*
-fast-highlight-check-path () {
	(( _start_pos-__PBUFLEN >= 0 )) || {
		[[ $1 != "noasync" ]] && print -r -- "- $_start_pos $_end_pos"
		return 1
	}
	[[ $1 != "noasync" ]] && {
		print -r -- ${sysparams[pid]}
		print -r -- $__arg
	}
	: ${expanded_path:=${(Q)~__arg}}
	[[ -n ${FAST_BLIST_PATTERNS[(k)${${(M)expanded_path:#/*}:-$PWD/$expanded_path}]} ]] && {
		[[ $1 != "noasync" ]] && print -r -- "- $_start_pos $_end_pos"
		return 1
	}
	[[ -z $expanded_path ]] && {
		[[ $1 != "noasync" ]] && print -r -- "- $_start_pos $_end_pos"
		return 1
	}
	[[ -d $expanded_path ]] && {
		[[ $1 != "noasync" ]] && print -r -- "$_start_pos ${_end_pos}D" || __style=${FAST_THEME_NAME}path-to-dir 
		return 0
	}
	[[ -e $expanded_path ]] && {
		[[ $1 != "noasync" ]] && print -r -- "$_start_pos $_end_pos" || __style=${FAST_THEME_NAME}path 
		return 0
	}
	[[ $active_command = "cd" ]] && for cdpath_dir in $cdpath
	do
		[[ -d $cdpath_dir/$expanded_path ]] && {
			[[ $1 != "noasync" ]] && print -r -- "$_start_pos ${_end_pos}D" || __style=${FAST_THEME_NAME}path-to-dir 
			return 0
		}
		[[ -e $cdpath_dir/$expanded_path ]] && {
			[[ $1 != "noasync" ]] && print -r -- "$_start_pos $_end_pos" || __style=${FAST_THEME_NAME}path 
			return 0
		}
	done
	[[ $1 != "noasync" ]] && print -r -- "- $_start_pos $_end_pos"
	return 1
}
-fast-highlight-check-path-handler () {
	local IFS=$'\n' pid PCFD=$1 line stripped val 
	integer idx
	if read -r -u $PCFD pid
	then
		if read -r -u $PCFD val
		then
			if read -r -u $PCFD line
			then
				stripped=${${line#- }%D} 
				FAST_HIGHLIGHT[cache-path-${(q)val}-${stripped%% *}-born-at]=$EPOCHSECONDS 
				idx=${${FAST_HIGHLIGHT[path-queue]}[(I)$stripped]} 
				(( idx > 0 )) && {
					if [[ $line != -* ]]
					then
						FAST_HIGHLIGHT[cache-path-${(q)val}-${stripped%% *}]="1${(M)line%D}" 
						region_highlight+=("${line%% *} ${${line##* }%D} ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}path${${(M)line%D}:+-to-dir}]}") 
					else
						FAST_HIGHLIGHT[cache-path-${(q)val}-${stripped%% *}]=0 
					fi
					val=${FAST_HIGHLIGHT[path-queue]} 
					val[idx-1,idx+${#stripped}]="" 
					FAST_HIGHLIGHT[path-queue]=$val 
					[[ ${FAST_HIGHLIGHT[cache-path-${(q)val}-${stripped%% *}]%D} = 1 && ${#val} -le 27 ]] && zle -R
				}
			fi
		fi
		kill -9 $pid 2> /dev/null
	fi
	zle -F -w ${PCFD}
	exec {PCFD}<&-
}
-fast-highlight-dollar-string () {
	(( _start_pos-__PBUFLEN >= 0 )) || return 0
	local i j k __style
	local AA
	integer c
	for ((i = 3 ; i < _end_pos - _start_pos ; i += 1 )) do
		(( j = i + _start_pos - 1 ))
		(( k = j + 1 ))
		case ${__arg[$i]} in
			("\\") __style=${FAST_THEME_NAME}back-dollar-quoted-argument 
				for ((c = i + 1 ; c <= _end_pos - _start_pos ; c += 1 )) do
					[[ ${__arg[$c]} != ([0-9xXuUa-fA-F]) ]] && break
				done
				AA=$__arg[$i+1,$c-1] 
				if [[ "$AA" == (#m)(#s)(x|X)[0-9a-fA-F](#c1,2) || "$AA" == (#m)(#s)[0-7](#c1,3) || "$AA" == (#m)(#s)u[0-9a-fA-F](#c1,4) || "$AA" == (#m)(#s)U[0-9a-fA-F](#c1,8) ]]
				then
					(( k += MEND ))
					(( i += MEND ))
				else
					if (( __asize > i+1 )) && [[ $__arg[i+1] == [xXuU] ]]
					then
						__style=${FAST_THEME_NAME}unknown-token 
					fi
					(( k += 1 ))
					(( i += 1 ))
				fi ;;
			(*) continue ;;
		esac
		(( __start=j-__PBUFLEN, __end=k-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}") 
	done
}
-fast-highlight-fill-option-variables () {
	if [[ -o ignore_braces ]] || eval '[[ -o ignore_close_braces ]] 2>/dev/null'
	then
		FAST_HIGHLIGHT[right_brace_is_recognised_everywhere]=0 
	else
		FAST_HIGHLIGHT[right_brace_is_recognised_everywhere]=1 
	fi
	if [[ -o path_dirs ]]
	then
		FAST_HIGHLIGHT[path_dirs_was_set]=1 
	else
		FAST_HIGHLIGHT[path_dirs_was_set]=0 
	fi
	if [[ -o multi_func_def ]]
	then
		FAST_HIGHLIGHT[multi_func_def]=1 
	else
		FAST_HIGHLIGHT[multi_func_def]=0 
	fi
	if [[ -o interactive_comments ]]
	then
		FAST_HIGHLIGHT[ointeractive_comments]=1 
	else
		FAST_HIGHLIGHT[ointeractive_comments]=0 
	fi
}
-fast-highlight-init () {
	_FAST_COMPLEX_BRACKETS=() 
	__fast_highlight_main__command_type_cache=() 
}
-fast-highlight-main-type () {
	REPLY=$__fast_highlight_main__command_type_cache[(e)$1] 
	[[ -z $REPLY ]] && {
		if zmodload -e zsh/parameter
		then
			if (( $+aliases[(e)$1] ))
			then
				REPLY=alias 
			elif (( ${+galiases[(e)$1]} ))
			then
				REPLY="global alias" 
			elif (( $+functions[(e)$1] ))
			then
				REPLY=function 
			elif (( $+builtins[(e)$1] ))
			then
				REPLY=builtin 
			elif (( $+commands[(e)$1] ))
			then
				REPLY=command 
			elif (( $+saliases[(e)${1##*.}] ))
			then
				REPLY='suffix alias' 
			elif (( $reswords[(Ie)$1] ))
			then
				REPLY=reserved 
			elif [[ $1 != */* || ${+ZSH_ARGZERO} = "1" ]] && ! builtin type -w -- $1 > /dev/null 2>&1
			then
				REPLY=none 
			fi
		fi
		[[ -z $REPLY ]] && REPLY="${$(LC_ALL=C builtin type -w -- $1 2>/dev/null)##*: }" 
		[[ $REPLY = "none" ]] && {
			[[ -n ${FAST_BLIST_PATTERNS[(k)${${(M)1:#/*}:-$PWD/$1}]} ]] || {
				[[ -d $1 ]] && REPLY="dirpath"  || {
					for cdpath_dir in $cdpath
					do
						[[ -d $cdpath_dir/$1 ]] && {
							REPLY="dirpath" 
							break
						}
					done
				}
			}
		}
		__fast_highlight_main__command_type_cache[(e)$1]=$REPLY 
	}
}
-fast-highlight-math-string () {
	(( _start_pos-__PBUFLEN >= 0 )) || return 0
	_mybuf=$__arg 
	__idx=_start_pos 
	while [[ $_mybuf = (#b)[^\$_a-zA-Z0-9]#((\$(#B)(+|)(#B)([a-zA-Z_:][a-zA-Z0-9_:]#|[0-9]##)(#b)(\[[^\]]##\])(#c0,1))|(\$[{](#B)(+|)(#b)(\([a-zA-Z0-9_:@%#]##\))(#c0,1)[a-zA-Z0-9_:#]##(\[[^\]]##\])(#c0,1)[}])|\$|[a-zA-Z_][a-zA-Z0-9_]#|[0-9]##)(*) ]]
	do
		__idx+=${mbegin[1]}-1 
		_end_idx=__idx+${mend[1]}-${mbegin[1]}+1 
		_mybuf=${match[7]} 
		[[ ${match[1]} = [0-9]* ]] && __style=${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}mathnum]}  || {
			[[ ${match[1]} = [a-zA-Z_]* ]] && {
				[[ ${+parameters[${match[1]}]} = 1 || ${FAST_ASSIGNS_SEEN[${match[1]}]} = 1 ]] && __style=${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}mathvar]}  || __style=${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}matherr]} 
			} || {
				[[ ${match[1]} = "$"* ]] && {
					match[1]=${match[1]//[\{\}+]/} 
					if [[ ${match[1]} = "$" || ${FAST_ASSIGNS_SEEN[${match[1]:1}]} = 1 ]] || {
							eval "[[ -n \${(P)\${match[1]:1}} ]]"
						} 2>> /dev/null
					then
						__style=${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}back-or-dollar-double-quoted-argument]} 
					else
						__style=${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}matherr]} 
					fi
				}
			}
		}
		[[ $__style != "none" && -n $__style ]] && (( __start=__idx-__PBUFLEN, __end=_end_idx-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end $__style") 
		__idx=_end_idx 
	done
}
-fast-highlight-process () {
	emulate -L zsh
	setopt extendedglob bareglobqual nonomatch typesetsilent
	[[ $CONTEXT == "select" ]] && return 0
	(( FAST_HIGHLIGHT[path_dirs_was_set] )) && setopt PATH_DIRS
	(( FAST_HIGHLIGHT[ointeractive_comments] )) && local interactive_comments= 
	local _start_pos=$3 _end_pos __start __end highlight_glob=1 __arg __style in_array_assignment=0 MATCH expanded_path braces_stack __buf=$1$2 _mybuf __workbuf cdpath_dir active_command alias_target _was_double_hyphen=0 __nul=$'\0' __tmp 
	integer __arg_type=0 MBEGIN MEND in_redirection __len=${#__buf} __PBUFLEN=${#1} already_added offset __idx _end_idx this_word=1 next_word=0 __pos __asize __delimited=0 itmp iitmp 
	local -a match mbegin mend __inputs __list
	integer BIT_case_preamble=512 BIT_case_item=1024 BIT_case_nempty_item=2048 BIT_case_code=4096 
	ZLAST_COMMANDS=() 
	FAST_ASSIGNS_SEEN=() 
	FAST_HIGHLIGHT[chroma-autoload-elements]="" 
	FAST_HIGHLIGHT[chroma-fpath_peq-elements]="" 
	FAST_HIGHLIGHT[chroma-zinit-ice-elements-svn]=0 
	FAST_HIGHLIGHT[chroma-zinit-ice-elements-id-as]="" 
	[[ -n $ZCALC_ACTIVE ]] && {
		_start_pos=0 
		_end_pos=__len 
		__arg=$__buf 
		-fast-highlight-math-string
		return 0
	}
	local proc_buf=$__buf needle 
	for __arg in ${interactive_comments-${(z)__buf}} ${interactive_comments+${(zZ+c+)__buf}}
	do
		(( in_redirection = in_redirection > 0 ? in_redirection - 1 : in_redirection ))
		(( next_word = (in_redirection == 0) ? 2 : next_word ))
		(( next_word = next_word | (this_word & (BIT_case_code|8192)) ))
		[[ $__arg = '{' && $__delimited = 2 ]] && {
			(( this_word = (this_word & ~2) | 1 ))
			__delimited=0 
		}
		__asize=${#__arg} 
		already_added=0 
		__style=${FAST_THEME_NAME}unknown-token 
		(( this_word & 1 )) && {
			in_array_assignment=0 
			[[ $__arg == 'noglob' ]] && highlight_glob=0 
		}
		if [[ $__arg == ';' ]]
		then
			braces_stack=${braces_stack#T} 
			__delimited=0 
			needle=$';\n' 
			[[ $proc_buf = (#b)[^$needle]#([$needle]##)* ]] && offset=${mbegin[1]}-1 
			(( _start_pos += offset ))
			(( _end_pos = _start_pos + __asize ))
			(( this_word & BIT_case_item )) || {
				(( in_array_assignment )) && (( this_word = 2 | (this_word & BIT_case_code) )) || {
					(( this_word = 1 | (this_word & BIT_case_code) ))
					highlight_glob=1 
				}
			}
			in_redirection=0 
			[[ ${proc_buf[offset+1]} != $'\n' ]] && {
				[[ ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}commandseparator]} != "none" ]] && (( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}commandseparator]}") 
			}
			proc_buf=${proc_buf[offset + __asize + 1,__len]} 
			_start_pos=$_end_pos 
			continue
		else
			offset=0 
			if [[ $proc_buf = (#b)(#s)(([[:space:]]|\\[[:space:]])##)* ]]
			then
				offset=${mend[1]} 
			fi
			(( _start_pos += offset ))
			(( _end_pos = _start_pos + __asize ))
			__arg_type=${__FAST_HIGHLIGHT_TOKEN_TYPES[$__arg]} 
		fi
		(( this_word & 1 )) && ZLAST_COMMANDS+=($__arg) 
		proc_buf=${proc_buf[offset + __asize + 1,__len]} 
		if [[ -n ${interactive_comments+'set'} && $__arg == ${histchars[3]}* ]]
		then
			if (( this_word & 3 ))
			then
				__style=${FAST_THEME_NAME}comment 
			else
				__style=${FAST_THEME_NAME}unknown-token 
			fi
			(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}") 
			_start_pos=$_end_pos 
			continue
		fi
		[[ $__arg == (<0-9>|)(\<|\>)* && $__arg != (\<|\>)$'\x28'* && $__arg != "<<<" ]] && in_redirection=2 
		if (( ! in_redirection ))
		then
			(( this_word & 4 )) && [[ $__arg != -* ]] && (( this_word = this_word ^ 4 ))
			if (( this_word & 4 ))
			then
				case $__arg in
					('-'[Cgprtu]) (( this_word = this_word & ~1 ))
						(( next_word = 8 | (this_word & BIT_case_code) )) ;;
					('-'*) (( this_word = this_word & ~1 ))
						(( next_word = next_word | 1 | 4 )) ;;
				esac
			elif (( this_word & 8 ))
			then
				(( next_word = next_word | 4 | 1 ))
			elif (( this_word & 64 ))
			then
				[[ $__arg = -[pvV-]## && $active_command = "command" ]] && (( this_word = (this_word & ~1) | 2, next_word = (next_word | 65) & ~2 ))
				[[ $__arg = -[cla-]## && $active_command = "exec" ]] && (( this_word = (this_word & ~1) | 2, next_word = (next_word | 65) & ~2 ))
				[[ $__arg = \{[a-zA-Z_][a-zA-Z0-9_]#\} && $active_command = "exec" ]] && {
					(( this_word = (this_word & ~1) | 2, next_word = (next_word | 65) & ~2 ))
					(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}exec-descriptor]}") 
					already_added=1 
				}
			fi
		fi
		(( this_word & 8192 )) && {
			__list=(${(z@)${aliases[$active_command]:-${active_command##*/}}##[[:space:]]#(command|builtin|exec|noglob|nocorrect|pkexec)[[:space:]]#}) 
			${${FAST_HIGHLIGHT[chroma-${__list[1]}]}%\%*} ${(M)FAST_HIGHLIGHT[chroma-${__list[1]}]%\%*} 0 "$__arg" $_start_pos $_end_pos 2> /dev/null && continue
		}
		(( this_word & 1 )) && {
			(( !in_redirection )) && active_command=$__arg 
			_mybuf=${${aliases[$active_command]:-${active_command##*/}}##[[:space:]]#(command|builtin|exec|noglob|nocorrect|pkexec)[[:space:]]#} 
			[[ "$_mybuf" = (#b)(FPATH+(#c0,1)=)* ]] && _mybuf="${match[1]} ${(j: :)${(s,:,)${_mybuf#FPATH+(#c0,1)=}}}" 
			[[ -n ${FAST_HIGHLIGHT[chroma-${_mybuf%% *}]} ]] && {
				__list=(${(z@)_mybuf}) 
				if (( ${#__list} > 1 )) || [[ $active_command != $_mybuf ]]
				then
					__style=${FAST_THEME_NAME}alias 
					(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}") 
					${${FAST_HIGHLIGHT[chroma-${__list[1]}]}%\%*} ${(M)FAST_HIGHLIGHT[chroma-${__list[1]}]%\%*} 1 "${__list[1]}" "-100000" $_end_pos 2> /dev/null || (( this_word = next_word, next_word = 2 ))
					for _mybuf in "${(@)__list[2,-1]}"
					do
						(( next_word = next_word | (this_word & (BIT_case_code|8192)) ))
						${${FAST_HIGHLIGHT[chroma-${__list[1]}]}%\%*} ${(M)FAST_HIGHLIGHT[chroma-${__list[1]}]%\%*} 0 "$_mybuf" "-100000" $_end_pos 2> /dev/null || (( this_word = next_word, next_word = 2 ))
					done
					_start_pos=$_end_pos 
					continue
				else
					${${FAST_HIGHLIGHT[chroma-${__list[1]}]}%\%*} ${(M)FAST_HIGHLIGHT[chroma-${__list[1]}]%\%*} 1 "$__arg" $_start_pos $_end_pos 2> /dev/null && continue
				fi
			} || (( 1 ))
		}
		expanded_path="" 
		if (( this_word & 16 )) && [[ $__arg == 'always' ]]
		then
			__style=${FAST_THEME_NAME}reserved-word 
			(( next_word = 1 | (this_word & BIT_case_code) ))
		elif (( (this_word & 1) && (in_redirection == 0) )) || [[ $braces_stack = T* ]]
		then
			if (( __arg_type == 1 ))
			then
				__style=${FAST_THEME_NAME}precommand 
				[[ $__arg = "command" || $__arg = "exec" ]] && (( next_word = next_word | 64 ))
			elif [[ $__arg = (sudo|doas) ]]
			then
				__style=${FAST_THEME_NAME}precommand 
				(( next_word = (next_word & ~2) | 4 | 1 ))
			else
				_mybuf=${${(Q)__arg}#\"} 
				if (( ${+parameters} )) && [[ $_mybuf = (#b)(*)(*)\$([a-zA-Z_][a-zA-Z0-9_]#|[0-9]##)(*) || $_mybuf = (#b)(*)(*)\$\{([a-zA-Z_][a-zA-Z0-9_:-]#|[0-9]##)(*) ]] && (( ${+parameters[${match[3]%%:-*}]} ))
				then
					-fast-highlight-main-type ${match[1]}${match[2]}${(P)match[3]%%:-*}${match[4]#\}}
				elif [[ $braces_stack = T* ]]
				then
					REPLY=none 
				else
					: ${expanded_path::=${~_mybuf}}
					-fast-highlight-main-type $expanded_path
				fi
				case $REPLY in
					(reserved) [[ $__arg = "[[" ]] && __style=${FAST_THEME_NAME}double-sq-bracket  || __style=${FAST_THEME_NAME}reserved-word 
						if [[ $__arg == $'\x7b' ]]
						then
							braces_stack='Y'$braces_stack 
						elif [[ $__arg == $'\x7d' && $braces_stack = Y* ]]
						then
							braces_stack=${braces_stack#Y} 
							__style=${FAST_THEME_NAME}reserved-word 
							(( next_word = next_word | 16 ))
						elif [[ $__arg == "[[" ]]
						then
							braces_stack='A'$braces_stack 
							_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )) $(( _start_pos-__PBUFLEN + 1 ))) 
						elif [[ $__arg == "for" ]]
						then
							(( next_word = next_word | 32 ))
						elif [[ $__arg == "case" ]]
						then
							(( next_word = BIT_case_preamble ))
						elif [[ $__arg = (typeset|declare|local|float|integer|export|readonly) ]]
						then
							braces_stack='T'$braces_stack 
						fi ;;
					('suffix alias') __style=${FAST_THEME_NAME}suffix-alias  ;;
					('global alias') __style=${FAST_THEME_NAME}global-alias  ;;
					(alias) if [[ $__arg = ?*'='* ]]
						then
							__style=${FAST_THEME_NAME}unknown-token 
						else
							__style=${FAST_THEME_NAME}alias 
							(( ${+aliases} )) && alias_target=${aliases[$__arg]}  || alias_target="${"$(alias -- $__arg)"#*=}" 
							[[ ${__FAST_HIGHLIGHT_TOKEN_TYPES[$alias_target]} = "1" && $__arg_type != "1" ]] && __FAST_HIGHLIGHT_TOKEN_TYPES[$__arg]="1" 
						fi ;;
					(builtin) [[ $__arg = "[" ]] && {
							__style=${FAST_THEME_NAME}single-sq-bracket 
							_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN ))) 
						} || __style=${FAST_THEME_NAME}builtin 
						[[ $__arg = (typeset|declare|local|float|integer|export|readonly) ]] && braces_stack='T'$braces_stack 
						[[ $__arg = eval ]] && (( next_word = next_word | 256 )) ;;
					(function) __style=${FAST_THEME_NAME}function  ;;
					(command) __style=${FAST_THEME_NAME}command  ;;
					(hashed) __style=${FAST_THEME_NAME}hashed-command  ;;
					(dirpath) __style=${FAST_THEME_NAME}path-to-dir  ;;
					(none) if [[ $__arg == [a-zA-Z_][a-zA-Z0-9_]#(|\[[^\]]#\])(|[^\]]#\])(|[+])=* || $__arg == [0-9]##(|[+])=* || ( $braces_stack = T* && ${__arg_type} != 3 ) ]]
						then
							__style=${FAST_THEME_NAME}assign 
							FAST_ASSIGNS_SEEN[${__arg%%=*}]=1 
							[[ $__arg = (#b)*=(\()*(\))* || $__arg = (#b)*=(\()* ]] && {
								(( __start=_start_pos-__PBUFLEN+${mbegin[1]}-1, __end=__start+1, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}assign-array-bracket]}") 
								_FAST_COMPLEX_BRACKETS+=($__start) 
								(( mbegin[2] >= 1 )) && {
									(( __start=_start_pos-__PBUFLEN+${mbegin[2]}-1, __end=__start+1, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}assign-array-bracket]}") 
									_FAST_COMPLEX_BRACKETS+=($__start) 
								} || in_array_assignment=1 
							} || {
								[[ ${braces_stack[1]} != 'T' ]] && (( next_word = (next_word | 1) & ~2 ))
							}
							local ctmp="\"" dtmp="'" 
							itmp=${__arg[(i)$ctmp]}-1 iitmp=${__arg[(i)$dtmp]}-1 
							integer jtmp=${__arg[(b:itmp+2:i)$ctmp]} jjtmp=${__arg[(b:iitmp+2:i)$dtmp]} 
							(( itmp < iitmp && itmp <= __asize - 1 )) && (( jtmp > __asize && (jtmp = __asize), 1 > 0 )) && (( __start=_start_pos-__PBUFLEN+itmp, __end=_start_pos-__PBUFLEN+jtmp, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-quoted-argument]}")  && {
								itmp=${__arg[(i)=]} 
								__arg=${__arg[itmp,__asize]} 
								(( _start_pos += itmp - 1 ))
								-fast-highlight-string
								(( _start_pos = _start_pos - itmp + 1, 1 > 0 ))
							} || {
								(( iitmp <= __asize - 1 )) && (( jjtmp > __asize && (jjtmp = __asize), 1 > 0 )) && (( __start=_start_pos-__PBUFLEN+iitmp, __end=_start_pos-__PBUFLEN+jjtmp, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}single-quoted-argument]}") 
							} || {
								itmp=${__arg[(i)=]} 
								__arg=${__arg[itmp,__asize]} 
								(( _start_pos += itmp - 1 ))
								[[ ${__arg[2,4]} = '$((' ]] && {
									-fast-highlight-math-string
									(( __start=_start_pos-__PBUFLEN+2, __end=__start+2, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-paren]}") 
									_FAST_COMPLEX_BRACKETS+=($__start $(( __start + 1 ))) 
									(( jtmp = ${__arg[(I)\)\)]}-1, jtmp > 0 )) && {
										(( __start=_start_pos-__PBUFLEN+jtmp, __end=__start+2, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-paren]}") 
										_FAST_COMPLEX_BRACKETS+=($__start $(( __start + 1 ))) 
									}
								} || -fast-highlight-string
								(( _start_pos = _start_pos - itmp + 1, 1 > 0 ))
							}
						elif [[ $__arg = ${histchars[1]}* && -n ${__arg[2]} ]]
						then
							__style=${FAST_THEME_NAME}history-expansion 
						elif [[ $__arg == ${histchars[2]}* ]]
						then
							__style=${FAST_THEME_NAME}history-expansion 
						elif (( __arg_type == 3 ))
						then
							(( this_word & 3 )) && __style=${FAST_THEME_NAME}commandseparator 
						elif [[ $__arg[1,2] == '((' ]]
						then
							(( __start=_start_pos-__PBUFLEN, __end=__start+2, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-paren]}") 
							already_added=1 
							_FAST_COMPLEX_BRACKETS+=($__start $(( __start + 1 ))) 
							-fast-highlight-math-string
							[[ $__arg[-2,-1] == '))' ]] && {
								(( __start=_end_pos-__PBUFLEN-2, __end=__start+2, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-paren]}") 
								(( __delimited = __delimited ? 2 : __delimited ))
								_FAST_COMPLEX_BRACKETS+=($__start $(( __start + 1 ))) 
							}
						elif [[ $__arg == '()' ]]
						then
							_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )) $(( _start_pos-__PBUFLEN + 1 ))) 
							__style=${FAST_THEME_NAME}reserved-word 
						elif [[ $__arg == $'\x28' ]]
						then
							__style=${FAST_THEME_NAME}reserved-word 
							braces_stack='R'$braces_stack 
						elif [[ $__arg == $'\x29' ]]
						then
							[[ $braces_stack = R* ]] && {
								braces_stack=${braces_stack#R} 
								__style=${FAST_THEME_NAME}reserved-word 
							}
						elif (( this_word & 14 ))
						then
							__style=${FAST_THEME_NAME}default 
						elif [[ $__arg = (';;'|';&'|';|') ]] && (( this_word & BIT_case_code ))
						then
							(( next_word = (next_word | BIT_case_item) & ~(BIT_case_code+3) ))
							__style=${FAST_THEME_NAME}default 
						elif [[ $__arg = \$\([^\(]* ]]
						then
							already_added=1 
						fi ;;
					(*) already_added=1  ;;
				esac
			fi
		elif (( in_redirection + this_word & 14 ))
		then
			case $__arg in
				(']]') [[ $braces_stack = A* ]] && {
						__style=${FAST_THEME_NAME}double-sq-bracket 
						(( __delimited = __delimited ? 2 : __delimited ))
						_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )) $(( _start_pos-__PBUFLEN+1 ))) 
					} || {
						[[ $braces_stack = *A* ]] && {
							__style=${FAST_THEME_NAME}unknown-token 
							_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )) $(( _start_pos-__PBUFLEN+1 ))) 
						} || __style=${FAST_THEME_NAME}default 
					}
					braces_stack=${braces_stack#A}  ;;
				(']') __style=${FAST_THEME_NAME}single-sq-bracket 
					_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )))  ;;
				($'\x28') __style=${FAST_THEME_NAME}reserved-word 
					braces_stack='R'$braces_stack  ;;
				($'\x29') if (( in_array_assignment ))
					then
						in_array_assignment=0 
						(( next_word = next_word | 1 ))
						(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}assign-array-bracket]}") 
						already_added=1 
						_FAST_COMPLEX_BRACKETS+=($__start) 
					elif [[ $braces_stack = R* ]]
					then
						braces_stack=${braces_stack#R} 
						__style=${FAST_THEME_NAME}reserved-word 
					elif [[ $braces_stack = F* ]]
					then
						__style=${FAST_THEME_NAME}builtin 
					fi ;;
				($'\x28\x29') (( FAST_HIGHLIGHT[multi_func_def] )) && (( next_word = next_word | 1 ))
					__style=${FAST_THEME_NAME}reserved-word 
					_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )) $(( _start_pos-__PBUFLEN + 1 ))) 
					reply[-1]=() 
					__fast_highlight_main__command_type_cache[$active_command]="function"  ;;
				('--'*) [[ $__arg == "--" ]] && {
						_was_double_hyphen=1 
						__style=${FAST_THEME_NAME}double-hyphen-option 
					} || {
						(( !_was_double_hyphen )) && {
							[[ "$__arg" = (#b)(--[a-zA-Z0-9_]##)=(*) ]] && {
								(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-hyphen-option]}") 
								(( __start=_start_pos-__PBUFLEN+1+mend[1], __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}optarg-${${${(M)match[2]:#<->}:+number}:-string}]}") 
								already_added=1 
							} || __style=${FAST_THEME_NAME}double-hyphen-option 
						} || __style=${FAST_THEME_NAME}default 
					} ;;
				('-'*) (( !_was_double_hyphen )) && __style=${FAST_THEME_NAME}single-hyphen-option  || __style=${FAST_THEME_NAME}default  ;;
				(\$\'*) (( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}dollar-quoted-argument]}") 
					-fast-highlight-dollar-string
					already_added=1  ;;
				([\"\']* | [^\"\\]##([\\][\\])#\"* | [^\'\\]##([\\][\\])#\'*) if (( this_word & 256 )) && [[ $__arg = [\'\"]* ]]
					then
						(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}recursive-base]}") 
						if [[ -n ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}secondary]} ]]
						then
							__idx=1 
							_mybuf=$FAST_THEME_NAME 
							FAST_THEME_NAME=${${${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}secondary]}:t:r}#(XDG|LOCAL|HOME|OPT):} 
							(( ${+FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}default]} )) || source $FAST_WORK_DIR/secondary_theme.zsh
						else
							__idx=0 
						fi
						(( _start_pos-__PBUFLEN >= 0 )) && -fast-highlight-process "$PREBUFFER" "${${__arg%[\'\"]}#[\'\"]}" $(( _start_pos + 1 ))
						(( __idx )) && FAST_THEME_NAME=$_mybuf 
						already_added=1 
					else
						[[ $__arg = *([^\\][\#][\#]|"(#b)"|"(#B)"|"(#m)"|"(#c")* && $highlight_glob -ne 0 ]] && (( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}globbing-ext]}") 
						itmp=0 __workbuf=$__arg __tmp="" cdpath_dir=$__arg 
						while [[ $__workbuf = (#b)[^\"\'\\]#(([\"\'])|[\\](*))(*) ]]
						do
							[[ -n ${match[3]} ]] && {
								itmp+=${mbegin[1]} 
								[[ $__tmp = \' ]] && __workbuf=${match[3]}  || {
									itmp+=1 
									__workbuf=${match[3]:1} 
								}
							} || {
								itmp+=${mbegin[1]} 
								__workbuf=${match[4]} 
								[[ ( ${match[1]} = \" && $__tmp != \' ) || ( ${match[1]} = \' && $__tmp != \" ) ]] && {
									[[ $__tmp = [\"\'] ]] && {
										(( __start=_start_pos-__PBUFLEN+iitmp-1, __end=_start_pos-__PBUFLEN+itmp, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}${${${__tmp#\'}:+double-quoted-argument}:-single-quoted-argument}]}") 
										already_added=1 
										[[ $__tmp = \" ]] && {
											__arg=${cdpath_dir[iitmp+1,itmp-1]} 
											(( _start_pos += iitmp - 1 + 1 ))
											-fast-highlight-string
											(( _start_pos = _start_pos - iitmp + 1 - 1 ))
										}
										__tmp= 
									} || {
										iitmp=itmp 
										__tmp=${match[1]} 
									}
								}
							}
						done
						[[ $__tmp = [\"\'] ]] && {
							(( __start=_start_pos-__PBUFLEN+iitmp-1, __end=_start_pos-__PBUFLEN+__asize, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}${${${__tmp#\'}:+double-quoted-argument}:-single-quoted-argument}]}") 
							already_added=1 
							[[ $__tmp = \" ]] && {
								__arg=${cdpath_dir[iitmp+1,__asize]} 
								(( _start_pos += iitmp - 1 + 1 ))
								-fast-highlight-string
								(( _start_pos = _start_pos - iitmp + 1 - 1 ))
							}
						}
					fi ;;
				(\$\(\(*) already_added=1 
					-fast-highlight-math-string
					(( __start=_start_pos-__PBUFLEN+1, __end=__start+2, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-paren]}") 
					_FAST_COMPLEX_BRACKETS+=($__start $(( __start + 1 ))) 
					[[ $__arg[-2,-1] == '))' ]] && (( __start=_end_pos-__PBUFLEN-2, __end=__start+2, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}double-paren]}") 
					_FAST_COMPLEX_BRACKETS+=($__start $(( __start + 1 )))  ;;
				('`'*) (( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}back-quoted-argument]}") 
					if [[ -n ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}secondary]} ]]
					then
						__idx=1 
						_mybuf=$FAST_THEME_NAME 
						FAST_THEME_NAME=${${${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}secondary]}:t:r}#(XDG|LOCAL|HOME|OPT):} 
						(( ${+FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}default]} )) || source $FAST_WORK_DIR/secondary_theme.zsh
					else
						__idx=0 
					fi
					(( _start_pos-__PBUFLEN >= 0 )) && -fast-highlight-process "$PREBUFFER" "${${__arg%[\`]}#[\`]}" $(( _start_pos + 1 ))
					(( __idx )) && FAST_THEME_NAME=$_mybuf 
					already_added=1  ;;
				('((') (( this_word & 32 )) && {
						braces_stack='F'$braces_stack 
						__style=${FAST_THEME_NAME}double-paren 
						_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )) $(( _start_pos-__PBUFLEN+1 ))) 
						__delimited=1 
					} ;;
				('))') [[ $braces_stack = F* ]] && {
						braces_stack=${braces_stack#F} 
						__style=${FAST_THEME_NAME}double-paren 
						_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN )) $(( _start_pos-__PBUFLEN+1 ))) 
						(( __delimited = __delimited ? 2 : __delimited ))
					} ;;
				('<<<') (( next_word = (next_word | 128) & ~3 ))
					[[ ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}here-string-tri]} != "none" ]] && (( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}here-string-tri]}") 
					already_added=1  ;;
				(*) if [[ $braces_stack = F* ]]
					then
						-fast-highlight-string
						_mybuf=$__arg 
						__idx=_start_pos 
						while [[ $_mybuf = (#b)[^a-zA-Z\{\$]#([a-zA-Z][a-zA-Z0-9]#)(*) ]]
						do
							(( __start=__idx-__PBUFLEN+${mbegin[1]}-1, __end=__idx-__PBUFLEN+${mend[1]}+1-1, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}for-loop-variable]}") 
							__idx+=${mend[1]} 
							_mybuf=${match[2]} 
						done
						_mybuf=$__arg 
						__idx=_start_pos 
						while [[ $_mybuf = (#b)[^+\<\>=:\*\|\&\^\~-]#([+\<\>=:\*\|\&\^\~-]##)(*) ]]
						do
							(( __start=__idx-__PBUFLEN+${mbegin[1]}-1, __end=__idx-__PBUFLEN+${mend[1]}+1-1, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}for-loop-operator]}") 
							__idx+=${mend[1]} 
							_mybuf=${match[2]} 
						done
						_mybuf=$__arg 
						__idx=_start_pos 
						while [[ $_mybuf = (#b)[^0-9]#([0-9]##)(*) ]]
						do
							(( __start=__idx-__PBUFLEN+${mbegin[1]}-1, __end=__idx-__PBUFLEN+${mend[1]}+1-1, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}for-loop-number]}") 
							__idx+=${mend[1]} 
							_mybuf=${match[2]} 
						done
						if [[ $__arg = (#b)[^\;]#(\;)[\ ]# ]]
						then
							(( __start=_start_pos-__PBUFLEN+${mbegin[1]}-1, __end=_start_pos-__PBUFLEN+${mend[1]}+1-1, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}for-loop-separator]}") 
						fi
						already_added=1 
					elif [[ $__arg = *([^\\][\#][\#]|"(#b)"|"(#B)"|"(#m)"|"(#c")* ]]
					then
						(( highlight_glob )) && __style=${FAST_THEME_NAME}globbing-ext  || __style=${FAST_THEME_NAME}default 
					elif [[ $__arg = ([*?]*|*[^\\][*?]*) ]]
					then
						(( highlight_glob )) && __style=${FAST_THEME_NAME}globbing  || __style=${FAST_THEME_NAME}default 
					elif [[ $__arg = \$* ]]
					then
						__style=${FAST_THEME_NAME}variable 
					elif [[ $__arg = $'\x7d' && $braces_stack = Y* && ${FAST_HIGHLIGHT[right_brace_is_recognised_everywhere]} = "1" ]]
					then
						braces_stack=${braces_stack#Y} 
						__style=${FAST_THEME_NAME}reserved-word 
						(( next_word = next_word | 16 ))
					elif [[ $__arg = (';;'|';&'|';|') ]] && (( this_word & BIT_case_code ))
					then
						(( next_word = (next_word | BIT_case_item) & ~(BIT_case_code+3) ))
						__style=${FAST_THEME_NAME}default 
					elif [[ $__arg = ${histchars[1]}* && -n ${__arg[2]} ]]
					then
						__style=${FAST_THEME_NAME}history-expansion 
					elif (( __arg_type == 3 ))
					then
						__style=${FAST_THEME_NAME}commandseparator 
					elif (( in_redirection == 2 ))
					then
						__style=${FAST_THEME_NAME}redirection 
					elif (( ${+galiases[(e)$__arg]} ))
					then
						__style=${FAST_THEME_NAME}global-alias 
					else
						if [[ ${FAST_HIGHLIGHT[no_check_paths]} != 1 ]]
						then
							if [[ ${FAST_HIGHLIGHT[use_async]} != 1 ]]
							then
								if -fast-highlight-check-path noasync
								then
									(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}") 
									already_added=1 
									[[ -n ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}path_pathseparator]} && ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}path]} != ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}path_pathseparator]} ]] && {
										for ((__pos = _start_pos; __pos <= _end_pos; __pos++ )) do
											[[ ${__buf[__pos]} == "/" ]] && (( __start=__pos-__PBUFLEN, __start >= 0 )) && reply+=("$(( __start - 1 )) $__start ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}path_pathseparator]}") 
										done
									}
								else
									__style=${FAST_THEME_NAME}default 
								fi
							else
								if [[ -z ${FAST_HIGHLIGHT[cache-path-${(q)__arg}-${_start_pos}]} || $(( EPOCHSECONDS - FAST_HIGHLIGHT[cache-path-${(q)__arg}-${_start_pos}-born-at] )) -gt 8 ]]
								then
									if [[ $LASTWIDGET != *-or-beginning-search ]]
									then
										exec {PCFD}< <(-fast-highlight-check-path; sleep 5)
										command sleep 0
										FAST_HIGHLIGHT[path-queue]+=";$_start_pos $_end_pos;" 
										is-at-least 5.0.6 && __pos=1  || __pos=0 
										zle -F ${${__pos:#0}:+-w} $PCFD fast-highlight-check-path-handler
										already_added=1 
									else
										__style=${FAST_THEME_NAME}default 
									fi
								elif [[ ${FAST_HIGHLIGHT[cache-path-${(q)__arg}-${_start_pos}]%D} -eq 1 ]]
								then
									(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}path${${(M)FAST_HIGHLIGHT[cache-path-${(q)__arg}-${_start_pos}]%D}:+-to-dir}]}") 
									already_added=1 
								else
									__style=${FAST_THEME_NAME}default 
								fi
							fi
						else
							__style=${FAST_THEME_NAME}default 
						fi
					fi ;;
			esac
		elif (( this_word & 128 ))
		then
			(( next_word = (next_word | 2) & ~129 ))
			[[ ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}here-string-text]} != "none" ]] && (( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}here-string-text]}") 
			-fast-highlight-string ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}here-string-var]:#none}
			already_added=1 
		elif (( this_word & (BIT_case_preamble + BIT_case_item) ))
		then
			if (( this_word & BIT_case_preamble ))
			then
				[[ $__arg = "in" ]] && {
					__style=${FAST_THEME_NAME}reserved-word 
					(( next_word = BIT_case_item ))
				} || {
					__style=${FAST_THEME_NAME}case-input 
					(( next_word = BIT_case_preamble ))
				}
			else
				if (( this_word & BIT_case_nempty_item == 0 )) && [[ $__arg = "esac" ]]
				then
					(( next_word = 1 ))
					__style=${FAST_THEME_NAME}reserved-word 
				elif [[ $__arg = (\(*\)|\)|\() ]]
				then
					[[ $__arg = *\) ]] && (( next_word = BIT_case_code | 1 )) || (( next_word = BIT_case_item | BIT_case_nempty_item ))
					_FAST_COMPLEX_BRACKETS+=($(( _start_pos-__PBUFLEN ))) 
					(( ${#__arg} > 1 )) && {
						_FAST_COMPLEX_BRACKETS+=($(( _start_pos+${#__arg}-1-__PBUFLEN ))) 
						(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}case-parentheses]}") 
						(( __start=_start_pos+1-__PBUFLEN, __end=_end_pos-1-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}case-condition]}") 
						already_added=1 
					} || {
						__style=${FAST_THEME_NAME}case-parentheses 
					}
				else
					(( next_word = BIT_case_item | BIT_case_nempty_item ))
					__style=${FAST_THEME_NAME}case-condition 
				fi
			fi
		fi
		if [[ $__arg = (#b)*'#'(([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])|([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F]))* || $__arg = (#b)*'rgb('(([0-9a-fA-F][0-9a-fA-F](#c0,1)),([0-9a-fA-F][0-9a-fA-F](#c0,1)),([0-9a-fA-F][0-9a-fA-F](#c0,1)))* ]]
		then
			if [[ -n $match[2] ]]
			then
				if [[ $match[2] = ?? || $match[3] = ?? || $match[4] = ?? ]]
				then
					(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end bg=#${(l:2::0:)match[2]}${(l:2::0:)match[3]}${(l:2::0:)match[4]}") 
				else
					(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end bg=#$match[2]$match[3]$match[4]") 
				fi
			else
				(( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end bg=#$match[5]$match[6]$match[7]") 
			fi
			already_added=1 
		fi
		(( already_added == 0 )) && [[ ${FAST_HIGHLIGHT_STYLES[$__style]} != "none" ]] && (( __start=_start_pos-__PBUFLEN, __end=_end_pos-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}") 
		if (( (__arg_type == 3) && ((this_word & (BIT_case_preamble|BIT_case_item)) == 0) ))
		then
			if [[ $__arg == ';' ]] && (( in_array_assignment ))
			then
				(( next_word = 2 | (next_word & BIT_case_code) ))
			elif [[ -n ${braces_stack[(r)A]} ]]
			then
				(( next_word = 2 | (next_word & BIT_case_code) ))
			else
				braces_stack=${braces_stack#T} 
				(( next_word = 1 | (next_word & BIT_case_code) ))
				highlight_glob=1 
				[[ $__arg != ("||"|"&&") ]] && __delimited=0  || (( __delimited = __delimited == 2 ? 1 : __delimited ))
			fi
		elif (( ( (__arg_type == 1) || (__arg_type == 2) ) && (this_word & 1) ))
		then
			__delimited=1 
			(( next_word = 1 | (next_word & (64 | BIT_case_code)) ))
		elif [[ $__arg == "repeat" ]] && (( this_word & 1 ))
		then
			__delimited=1 
			in_redirection=2 
			(( this_word = 3 ))
		fi
		_start_pos=$_end_pos 
		(( this_word = in_redirection == 0 ? next_word : this_word ))
	done
	[[ $3 != 0 ]] && return 0
	_mybuf=${__buf[1,250]} __workbuf=$_mybuf __idx=0 __pos=0 __list=() 
	while [[ $__workbuf = (#b)[^\(\)]#([\(\)])(*) ]]
	do
		if [[ ${match[1]} == \( ]]
		then
			__arg=${_mybuf[__idx+${mbegin[1]}-1,__idx+${mbegin[1]}-1+2]} 
			[[ $__arg = '$('[^\(] ]] && __list+=($__pos) 
			[[ $__arg = '$((' ]] && _mybuf[__idx+${mbegin[1]}-1]=x 
			__pos+=1 
		else
			__pos=__pos-1 
			[[ -z ${__list[(r)$__pos]} ]] && [[ $__pos -gt 0 ]] && _mybuf[__idx+${mbegin[1]}]=x 
		fi
		__idx+=${mbegin[2]}-1 
		__workbuf=${match[2]} 
	done
	if [[ "$_mybuf" = *$__nul* ]]
	then
		__nul=$'\7' 
	fi
	__inputs=(${(ps:$__nul:)${(S)_mybuf//(#b)*\$\(([^\)]#)(\)|(#e))/${mbegin[1]};${mend[1]}${__nul}}%$__nul*}) 
	if [[ "${__inputs[1]}" != "$_mybuf" && -n "${__inputs[1]}" ]]
	then
		if [[ -n ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}secondary]} ]]
		then
			__idx=1 
			__tmp=$FAST_THEME_NAME 
			FAST_THEME_NAME=${${${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}secondary]}:t:r}#(XDG|LOCAL|HOME|OPT):} 
			(( ${+FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}default]} )) || source $FAST_WORK_DIR/secondary_theme.zsh
		else
			__idx=0 
		fi
		for _mybuf in $__inputs
		do
			(( __start=${_mybuf%%;*}-__PBUFLEN-1, __end=${_mybuf##*;}-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${__tmp}recursive-base]}") 
			-fast-highlight-process "$PREBUFFER" "${__buf[${_mybuf%%;*},${_mybuf##*;}]}" $(( ${_mybuf%%;*} - 1 ))
		done
		(( __idx )) && FAST_THEME_NAME=$__tmp 
	fi
	return 0
}
-fast-highlight-string () {
	(( _start_pos-__PBUFLEN >= 0 )) || return 0
	_mybuf=$__arg 
	__idx=_start_pos 
	while [[ $_mybuf = (#b)[^\$\\]#((\$(#B)([#+^=~](#c1,2))(#c0,1)(#B)([a-zA-Z_:][a-zA-Z0-9_:]#|[0-9]##)(#b)(\[[^\]]#\])(#c0,1))|(\$[{](#B)([#+^=~](#c1,2))(#c0,1)(#b)(\([a-zA-Z0-9_:@%#]##\))(#c0,1)[a-zA-Z0-9_:#]##(\[[^\]]#\])(#c0,1)[}])|\$|[\\][\'\"\$]|[\\](*))(*) ]]
	do
		[[ -n ${match[7]} ]] && {
			__idx+=${mbegin[1]}+1 
			_mybuf=${match[7]:1} 
		} || {
			__idx+=${mbegin[1]}-1 
			_end_idx=__idx+${mend[1]}-${mbegin[1]}+1 
			_mybuf=${match[8]} 
			(( __start=__idx-__PBUFLEN, __end=_end_idx-__PBUFLEN, __start >= 0 )) && reply+=("$__start $__end ${${1:+$1}:-${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}back-or-dollar-double-quoted-argument]}}") 
			__idx=_end_idx 
		}
	done
	return 0
}
-fast-highlight-string-process () {
	emulate -LR zsh
	setopt extendedglob warncreateglobal typesetsilent
	local -A pos_to_level level_to_pos pair_map final_pairs
	local input=$1$2 _mybuf=$1$2 __style __quoting 
	integer __idx=0 __pair_idx __level=0 __start __end 
	local -a match mbegin mend
	pair_map=("(" ")" "{" "}" "[" "]") 
	while [[ $_mybuf = (#b)([^"{}()[]\\\"'"]#)((["({[]})\"'"])|[\\](*))(*) ]]
	do
		if [[ -n ${match[4]} ]]
		then
			__idx+=${mbegin[2]} 
			[[ $__quoting = \' ]] && _mybuf=${match[4]}  || {
				_mybuf=${match[4]:1} 
				(( ++ __idx ))
			}
		else
			__idx+=${mbegin[2]} 
			[[ -z $__quoting && -z ${_FAST_COMPLEX_BRACKETS[(r)$((__idx-${#PREBUFFER}-1))]} ]] && {
				if [[ ${match[2]} = ["({["] ]]
				then
					pos_to_level[$__idx]=$(( ++__level )) 
					level_to_pos[$__level]=$__idx 
				elif [[ ${match[2]} = ["]})"] ]]
				then
					if (( __level > 0 ))
					then
						__pair_idx=${level_to_pos[$__level]} 
						pos_to_level[$__idx]=$(( __level -- )) 
						[[ ${pair_map[${input[__pair_idx]}]} = ${input[__idx]} ]] && {
							final_pairs[$__idx]=$__pair_idx 
							final_pairs[$__pair_idx]=$__idx 
						}
					else
						pos_to_level[$__idx]=-1 
					fi
				fi
			}
			if [[ ${match[2]} = \" && $__quoting != \' ]]
			then
				[[ $__quoting = '"' ]] && __quoting=""  || __quoting='"' 
			fi
			if [[ ${match[2]} = \' && $__quoting != \" ]]
			then
				if [[ $__quoting = ("'"|"$'") ]]
				then
					__quoting="" 
				else
					if [[ $match[1] = *\$ ]]
					then
						__quoting="\$'" 
					else
						__quoting="'" 
					fi
				fi
			fi
			_mybuf=${match[5]} 
		fi
	done
	for __idx in ${(k)pos_to_level}
	do
		(( ${+final_pairs[$__idx]} )) && __style=${FAST_THEME_NAME}bracket-level-$(( ( (pos_to_level[$__idx]-1) % 3 ) + 1 ))  || __style=${FAST_THEME_NAME}unknown-token 
		(( __start=__idx-${#PREBUFFER}-1, __end=__idx-${#PREBUFFER}, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}") 
	done
	if [[ $WIDGET != zle-line-finish ]]
	then
		__idx=$(( CURSOR + 1 )) 
		if (( ${+pos_to_level[$__idx]} )) && (( ${+final_pairs[$__idx]} ))
		then
			(( __start=final_pairs[$__idx]-${#PREBUFFER}-1, __end=final_pairs[$__idx]-${#PREBUFFER}, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}paired-bracket]}")  && reply+=("$CURSOR $__idx ${FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}paired-bracket]}") 
		fi
	fi
	return 0
}
-fsh_sy_h_shappend () {
	FSH_LIST+=("$(( $1 - 1 ));;$(( $2 ))") 
}
-ftb-colorize () {
	# undefined
	builtin autoload -XUz
}
-ftb-compadd () {
	local -A apre hpre dscrs _oad
	local -a isfile _opts __ expl
	zparseopts -E -a _opts P:=apre p:=hpre d:=dscrs X+:=expl O:=_oad A:=_oad D:=_oad f=isfile i: S: s: I: x: r: R: W: F: M+: E: q e Q n U C J:=__ V:=__ a=__ l=__ k=__ o=__ 1=__ 2=__
	if (( $#_oad != 0 || ! IN_FZF_TAB ))
	then
		builtin compadd "$@"
		return
	fi
	local -a __hits __dscr
	if (( $#dscrs == 1 ))
	then
		__dscr=("${(@P)${(v)dscrs}}") 
	fi
	builtin compadd -A __hits -D __dscr "$@"
	local ret=$? 
	if (( $#__hits == 0 ))
	then
		return $ret
	fi
	_ftb_curcontext=${curcontext#:} 
	expl=$expl[2] 
	[[ -n $expl ]] && _ftb_groups+=$expl 
	local -a keys=(apre hpre PREFIX SUFFIX IPREFIX ISUFFIX) 
	local key expanded __tmp_value=$'<\0>' 
	for key in $keys
	do
		expanded=${(P)key} 
		if [[ -n $expanded ]]
		then
			__tmp_value+=$'\0'$key$'\0'$expanded 
		fi
	done
	if [[ -n $expl ]]
	then
		__tmp_value+=$'\0group\0'$_ftb_groups[(ie)$expl] 
	fi
	if [[ -n $isfile ]]
	then
		__tmp_value+=$'\0realdir\0'${${(Qe)~${:-$IPREFIX$hpre}}} 
	fi
	_opts+=("${(@kv)apre}" "${(@kv)hpre}" $isfile) 
	__tmp_value+=$'\0args\0'${(pj:\1:)_opts} 
	if (( $+builtins[fzf-tab-compcap-generate] ))
	then
		fzf-tab-compcap-generate __hits __dscr __tmp_value
	else
		local dscr word i
		for i in {1..$#__hits}
		do
			word=$__hits[i] dscr=$__dscr[i] 
			if [[ -n $dscr ]]
			then
				dscr=${dscr//$'\n'} 
			elif [[ -n $word ]]
			then
				dscr=$word 
			fi
			_ftb_compcap+=$dscr$'\2'$__tmp_value$'\0word\0'$word 
		done
	fi
	builtin compadd -U -qS '' -R -ftb-remove-space ''
}
-ftb-complete () {
	local -a _ftb_compcap
	local -Ua _ftb_groups
	local choice choices _ftb_curcontext continuous_trigger print_query accept_line bs=$'\2' nul=$'\0' 
	local ret=0 
	(( $+builtins[fzf-tab-compcap-generate] )) && fzf-tab-compcap-generate -i
	COLUMNS=500 _ftb__main_complete "$@" || ret=$? 
	(( $+builtins[fzf-tab-compcap-generate] )) && fzf-tab-compcap-generate -o
	emulate -L zsh -o extended_glob
	local _ftb_query _ftb_complist=() _ftb_headers=() command opts 
	-ftb-generate-complist
	case $#_ftb_complist in
		(0) return 1 ;;
		(1) choices=("EXPECT_KEY" "${_ftb_compcap[1]%$bs*}")  ;;
		(*) -ftb-generate-query
			-ftb-generate-header
			-ftb-zstyle -s continuous-trigger continuous_trigger || continuous_trigger=/ 
			-ftb-zstyle -s print-query print_query || print_query=alt-enter 
			-ftb-zstyle -s accept-line accept_line
			choices=("${(@f)"$(builtin print -rl -- $_ftb_headers $_ftb_complist | -ftb-fzf)"}") 
			ret=$? 
			if [[ $choices[2] == $print_query ]] || [[ -n $choices[1] && $#choices == 1 ]]
			then
				local -A v=("${(@0)${_ftb_compcap[1]}}") 
				local -a args=("${(@ps:\1:)v[args]}") 
				[[ -z $args[1] ]] && args=() 
				IPREFIX=$v[IPREFIX] PREFIX=$v[PREFIX] SUFFIX=$v[SUFFIX] ISUFFIX=$v[ISUFFIX] 
				builtin compadd "${args[@]:--Q}" -Q -- $choices[1]
				compstate[list]= 
				compstate[insert]= 
				if (( $#choices[1] > 0 ))
				then
					compstate[insert]='2' 
					[[ $RBUFFER == ' '* ]] || compstate[insert]+=' ' 
				fi
				return $ret
			fi
			choices[1]=() 
			choices=("${(@)${(@)choices%$nul*}#*$nul}") 
			unset CTXT ;;
	esac
	if [[ -n $choices[1] && $choices[1] == $continuous_trigger ]]
	then
		typeset -gi _ftb_continue=1 
	fi
	if [[ -n $choices[1] && $choices[1] == $accept_line ]]
	then
		typeset -gi _ftb_accept=1 
	fi
	choices[1]=() 
	for choice in "$choices[@]"
	do
		local -A v=("${(@0)${_ftb_compcap[(r)${(b)choice}$bs*]#*$bs}}") 
		local -a args=("${(@ps:\1:)v[args]}") 
		[[ -z $args[1] ]] && args=() 
		IPREFIX=$v[IPREFIX] PREFIX=$v[PREFIX] SUFFIX=$v[SUFFIX] ISUFFIX=$v[ISUFFIX] 
		builtin compadd "${args[@]:--Q}" -Q -- "$v[word]"
	done
	compstate[list]= 
	compstate[insert]= 
	if (( $#choices == 1 ))
	then
		compstate[insert]='2' 
		[[ $RBUFFER == ' '* ]] || compstate[insert]+=' ' 
	elif (( $#choices > 1 ))
	then
		compstate[insert]='all' 
	fi
	return $ret
}
-ftb-fzf () {
	# undefined
	builtin autoload -XUz
}
-ftb-generate-complist () {
	local dsuf dpre k _v filepath first_word show_group default_color prefix bs=$'\b' 
	local -a list_colors group_colors tcandidates reply match mbegin mend
	local -i same_word=1 colorful=0 
	local -Ua duplicate_groups=() 
	local -A word_map=() 
	(( $#_ftb_compcap == 0 )) && return
	-ftb-zstyle -s show-group show_group || show_group=full 
	-ftb-zstyle -s default-color default_color || default_color=$'\x1b[37m' 
	-ftb-zstyle -s prefix prefix || {
		zstyle -m ':completion:*:descriptions' format '*' && prefix='·' 
	}
	-ftb-zstyle -a group-colors group_colors || group_colors=($_ftb_group_colors) 
	zstyle -a ":completion:$_ftb_curcontext" list-colors list_colors
	if (( $+builtins[fzf-tab-candidates-generate] ))
	then
		fzf-tab-candidates-generate -i list_colors
	else
		local -A namecolors=(${(@s:=:)${(@s.:.)list_colors}:#[[:alpha:]][[:alpha:]]=*}) 
		local -A modecolors=(${(@Ms:=:)${(@s.:.)list_colors}:#[[:alpha:]][[:alpha:]]=*}) 
		(( $#namecolors == 0 && $#modecolors == 0 )) && list_colors=() 
	fi
	if (( $#_ftb_groups == 1 ))
	then
		-ftb-zstyle -m single-group prefix || prefix='' 
		-ftb-zstyle -m single-group color || group_colors=("$default_color") 
	fi
	if (( $+builtins[fzf-tab-candidates-generate] ))
	then
		fzf-tab-candidates-generate
	else
		for k _v in "${(@ps:\2:)_ftb_compcap}"
		do
			local -A v=("${(@0)_v}") 
			[[ $v[word] == ${first_word:=$v[word]} ]] || same_word=0 
			dsuf='' dpre='' 
			if (( $+v[realdir] ))
			then
				filepath=$v[realdir]${(Q)v[word]} 
				if [[ -d $filepath ]]
				then
					dsuf=/ 
				fi
				if (( $#list_colors )) && [[ -a $filepath || -L $filepath ]]
				then
					-ftb-colorize $filepath
					colorful=1 
				elif [[ -L $filepath ]]
				then
					dsuf=@ 
				fi
				if [[ $options[list_types] == off ]]
				then
					dsuf='' 
				fi
			fi
			if (( $+v[group] ))
			then
				local color=$group_colors[$v[group]] 
				tcandidates+=$v[group]$'\b'$color$prefix$dpre$'\0'$v[group]$'\b'$k$'\0'$dsuf 
			else
				tcandidates+=$default_color$dpre$'\0'$k$'\0'$dsuf 
			fi
			if [[ $show_group == brief ]]
			then
				if (( $+word_map[$v[word]] && $+v[group] ))
				then
					duplicate_groups+=$v[group] 
					duplicate_groups+=$word_map[$v[word]] 
				fi
				word_map[$v[word]]=$v[group] 
			fi
		done
	fi
	(( same_word )) && tcandidates[2,-1]=() 
	zstyle -T ":completion:$_ftb_curcontext" sort
	if (( $? != 1 ))
	then
		if (( colorful ))
		then
			if [[ ${commands[sort]:A:t} != (|busybox*) ]]
			then
				tcandidates=(${(f)"$(command sort -u -t '\0' -k 2 <<< ${(pj:\n:)tcandidates})"}) 
			else
				tcandidates=(${(@o)${(@)tcandidates:/(#b)([^$'\0']#)$'\0'(*)/$match[2]$'\0'$match[1]}}) 
				tcandidates=(${(@)tcandidates/(#b)(*)$'\0'([^$'\0']#)/$match[2]$'\0'$match[1]}) 
			fi
		else
			tcandidates=("${(@o)tcandidates}") 
		fi
	fi
	typeset -gUa _ftb_complist=("${(@)tcandidates//[0-9]#$bs}") 
	if (( $#_ftb_groups ))
	then
		local i to_hide indexs=({1..$#_ftb_groups}) 
		case $show_group in
			(brief) to_hide=(${indexs:|duplicate_groups})  ;;
			(none) to_hide=($indexs)  ;;
		esac
		for i in $to_hide
		do
			_ftb_groups[i]="__hide__$i" 
		done
	fi
}
-ftb-generate-header () {
	# undefined
	builtin autoload -XUz
}
-ftb-generate-query () {
	# undefined
	builtin autoload -XUz
}
-ftb-remove-space () {
	[[ $LBUFFER[-1] == ' ' ]] && LBUFFER[-1]='' 
}
-ftb-zstyle () {
	zstyle $1 ":fzf-tab:$_ftb_curcontext" ${@:2}
}
.fast-make-targets () {
	# undefined
	builtin autoload -XUz
}
.fast-read-ini-file () {
	# undefined
	builtin autoload -XUz
}
.fast-run-command () {
	# undefined
	builtin autoload -XUz
}
.fast-run-git-command () {
	# undefined
	builtin autoload -XUz
}
.fast-zts-read-all () {
	# undefined
	builtin autoload -XUz
}
.hist.fcparams () {
	local -a err=() 
	[[ -z $HISTFILE ]] && err+=('hist: error: $HISTFILE has not been set') 
	(( SAVEHIST == 0 )) && err+=('hist: error: $SAVEHIST is equal to 0') 
	(( HISTSIZE < 1.2 * SAVEHIST )) && print -l -u2 - 'hist: warning: $HISTSIZE should be at least 20% larger than $SAVEHIST'
	(( $#err[@] > 0 )) && print -l -u2 - $err[@]
	return $#err[@]
}
.hist.format () {
	emulate -L zsh
	setopt extendedglob warncreateglobal
	if zstyle -t :hist: expand-aliases
	then
		setopt aliases
	else
		setopt NO_aliases
	fi
	REPLY="$1" 
	{
		eval ".hist.tmp.() { $1 }" 2> /dev/null || return
		[[ ${${(Z+C+)1}:#\;} == ${${(Z+C+)functions[.hist.tmp.]}:#\;} ]] || return
		REPLY='' 
		local body=$'\n'"$functions[.hist.tmp.]" 
		local word chunk indent prefix
		for word in ${(Z+n+)body}
		do
			chunk=${(M)body#*$word} 
			body=${body#$chunk} 
			prefix=${${chunk%$word}%%$'\n'$'\t'##( |)} 
			indent=${${chunk#$prefix}%$word} 
			REPLY+=$prefix${indent%$'\t'( |)}$word 
		done
		REPLY=${REPLY#$'\n'} 
	} always {
		[[ -v functions[.hist.tmp.] ]] && unfunction .hist.tmp.
	}
}
.hist.format.hook () {
	[[ -o histignorespace && $BUFFER == ' '* ]] && return 0
	emulate -L zsh
	setopt extendedglob warncreateglobal
	local REPLY
	if .hist.format $PREBUFFER$BUFFER
	then
		if [[ -n $PREBUFFER ]]
		then
			zle .beep
			zle .push-line-or-edit
		fi
		LBUFFER="$REPLY" 
		RBUFFER= 
		unset PREDISPLAY POSTDISPLAY
		[[ -v functions[_zsh_highlight] ]] && _zsh_highlight
		zle -R
	fi
	return 0
}
.hist.get-line.widget () {
	# undefined
	builtin autoload -XUz /data/data/com.termux/files/home/.zsh/plugins/zsh-hist/functions
}
.hist.help () {
	# undefined
	builtin autoload -XUz /data/data/com.termux/files/home/.zsh/plugins/zsh-hist/functions
}
.hist.push-line.widget () {
	# undefined
	builtin autoload -XUz /data/data/com.termux/files/home/.zsh/plugins/zsh-hist/functions
}
.hist.undo.widget () {
	emulate -L zsh
	setopt extendedglob warncreateglobal
	if ! zle .undo && [[ -z $BUFFER && ZLE_RECURSIVE -eq 0 ]]
	then
		case $CONTEXT in
			(start) local -a reply=() 
				hist -fs d -1
				LBUFFER+=$reply[2] 
				UNDO_LIMIT_NO=$UNDO_CHANGE_NO  ;;
			(cont) zle .push-line-or-edit ;;
		esac
	fi
}
.hist.vared () {
	unset 'compstate[vared]'
}
.hist.yes () {
	[[ -v opts[-f] ]] && return 0
	print -nPr - "%B$1%b"
	read -q '? [y/n] '
	local ret=$? 
	print -l
	return ret
}
/fshdbg () {
	print -r -- "$@" >>| /tmp/reply
}
_SUSEconfig () {
	# undefined
	builtin autoload -XUz
}
__fsel () {
	local cmd="${FZF_CTRL_T_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune     -o -type f -print     -o -type d -print     -o -type l -print 2> /dev/null | cut -b3-"}" 
	setopt localoptions pipefail no_aliases 2> /dev/null
	local item
	eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" $(__fzfcmd) -m "$@" | while read item
	do
		echo -n "${(q)item} "
	done
	local ret=$? 
	echo
	return $ret
}
__fzf_comprun () {
	if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]
	then
		_fzf_comprun "$@"
	elif [ -n "$TMUX_PANE" ] && {
			[ "${FZF_TMUX:-0}" != 0 ] || [ -n "$FZF_TMUX_OPTS" ]
		}
	then
		shift
		if [ -n "$FZF_TMUX_OPTS" ]
		then
			fzf-tmux ${(Q)${(Z+n+)FZF_TMUX_OPTS}} -- "$@"
		else
			fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%} -- "$@"
		fi
	else
		shift
		fzf "$@"
	fi
}
__fzf_extract_command () {
	local token tokens
	tokens=(${(z)1}) 
	for token in $tokens
	do
		token=${(Q)token} 
		if [[ "$token" =~ [[:alnum:]] && ! "$token" =~ "=" ]]
		then
			echo "$token"
			return
		fi
	done
	echo "${tokens[1]}"
}
__fzf_generic_path_completion () {
	local base lbuf cmd compgen fzf_opts suffix tail dir leftover matches
	base=$1 
	lbuf=$2 
	cmd=$(__fzf_extract_command "$lbuf") 
	compgen=$3 
	fzf_opts=$4 
	suffix=$5 
	tail=$6 
	setopt localoptions nonomatch
	eval "base=$base"
	[[ $base = *"/"* ]] && dir="$base" 
	while [ 1 ]
	do
		if [[ -z "$dir" || -d ${dir} ]]
		then
			leftover=${base/#"$dir"} 
			leftover=${leftover/#\/} 
			[ -z "$dir" ] && dir='.' 
			[ "$dir" != "/" ] && dir="${dir/%\//}" 
			matches=$(eval "$compgen $(printf %q "$dir")" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_COMPLETION_OPTS" __fzf_comprun "$cmd" ${(Q)${(Z+n+)fzf_opts}} -q "$leftover" | while read item; do
        echo -n "${(q)item}$suffix "
      done) 
			matches=${matches% } 
			if [ -n "$matches" ]
			then
				LBUFFER="$lbuf$matches$tail" 
			fi
			zle reset-prompt
			break
		fi
		dir=$(dirname "$dir") 
		dir=${dir%/}/ 
	done
}
__fzfcmd () {
	[ -n "$TMUX_PANE" ] && {
		[ "${FZF_TMUX:-0}" != 0 ] || [ -n "$FZF_TMUX_OPTS" ]
	} && echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}
__git_eread () {
	test -r "$1" && IFS=$'\r\n' read "$2" < "$1"
}
__git_prompt_git () {
	GIT_OPTIONAL_LOCKS=0 command git "$@"
}
__git_ps1 () {
	local exit=$? 
	local pcmode=no 
	local detached=no 
	local ps1pc_start='\u@\h:\w ' 
	local ps1pc_end='\$ ' 
	local printf_format=' (%s)' 
	case "$#" in
		(2 | 3) pcmode=yes 
			ps1pc_start="$1" 
			ps1pc_end="$2" 
			printf_format="${3:-$printf_format}" 
			PS1="$ps1pc_start$ps1pc_end"  ;;
		(0 | 1) printf_format="${1:-$printf_format}"  ;;
		(*) return $exit ;;
	esac
	local ps1_expanded=yes 
	[ -z "${ZSH_VERSION-}" ] || [[ -o PROMPT_SUBST ]] || ps1_expanded=no 
	[ -z "${BASH_VERSION-}" ] || shopt -q promptvars || ps1_expanded=no 
	local repo_info rev_parse_exit_code
	repo_info="$(git rev-parse --git-dir --is-inside-git-dir \
		--is-bare-repository --is-inside-work-tree \
		--short HEAD 2>/dev/null)" 
	rev_parse_exit_code="$?" 
	if [ -z "$repo_info" ]
	then
		return $exit
	fi
	local short_sha="" 
	if [ "$rev_parse_exit_code" = "0" ]
	then
		short_sha="${repo_info##*$'\n'}" 
		repo_info="${repo_info%$'\n'*}" 
	fi
	local inside_worktree="${repo_info##*$'\n'}" 
	repo_info="${repo_info%$'\n'*}" 
	local bare_repo="${repo_info##*$'\n'}" 
	repo_info="${repo_info%$'\n'*}" 
	local inside_gitdir="${repo_info##*$'\n'}" 
	local g="${repo_info%$'\n'*}" 
	if [ "true" = "$inside_worktree" ] && [ -n "${GIT_PS1_HIDE_IF_PWD_IGNORED-}" ] && [ "$(git config --bool bash.hideIfPwdIgnored)" != "false" ] && git check-ignore -q .
	then
		return $exit
	fi
	local sparse="" 
	if [ -z "${GIT_PS1_COMPRESSSPARSESTATE}" ] && [ -z "${GIT_PS1_OMITSPARSESTATE}" ] && [ "$(git config --bool core.sparseCheckout)" = "true" ]
	then
		sparse="|SPARSE" 
	fi
	local r="" 
	local b="" 
	local step="" 
	local total="" 
	if [ -d "$g/rebase-merge" ]
	then
		__git_eread "$g/rebase-merge/head-name" b
		__git_eread "$g/rebase-merge/msgnum" step
		__git_eread "$g/rebase-merge/end" total
		r="|REBASE" 
	else
		if [ -d "$g/rebase-apply" ]
		then
			__git_eread "$g/rebase-apply/next" step
			__git_eread "$g/rebase-apply/last" total
			if [ -f "$g/rebase-apply/rebasing" ]
			then
				__git_eread "$g/rebase-apply/head-name" b
				r="|REBASE" 
			elif [ -f "$g/rebase-apply/applying" ]
			then
				r="|AM" 
			else
				r="|AM/REBASE" 
			fi
		elif [ -f "$g/MERGE_HEAD" ]
		then
			r="|MERGING" 
		elif __git_sequencer_status
		then
			:
		elif [ -f "$g/BISECT_LOG" ]
		then
			r="|BISECTING" 
		fi
		if [ -n "$b" ]
		then
			:
		elif [ -h "$g/HEAD" ]
		then
			b="$(git symbolic-ref HEAD 2>/dev/null)" 
		else
			local head="" 
			if ! __git_eread "$g/HEAD" head
			then
				return $exit
			fi
			b="${head#ref: }" 
			if [ "$head" = "$b" ]
			then
				detached=yes 
				b="$(
				case "${GIT_PS1_DESCRIBE_STYLE-}" in
				(contains)
					git describe --contains HEAD ;;
				(branch)
					git describe --contains --all HEAD ;;
				(tag)
					git describe --tags HEAD ;;
				(describe)
					git describe HEAD ;;
				(* | default)
					git describe --tags --exact-match HEAD ;;
				esac 2>/dev/null)"  || b="$short_sha..." 
				b="($b)" 
			fi
		fi
	fi
	if [ -n "$step" ] && [ -n "$total" ]
	then
		r="$r $step/$total" 
	fi
	local w="" 
	local i="" 
	local s="" 
	local u="" 
	local h="" 
	local c="" 
	local p="" 
	if [ "true" = "$inside_gitdir" ]
	then
		if [ "true" = "$bare_repo" ]
		then
			c="BARE:" 
		else
			b="GIT_DIR!" 
		fi
	elif [ "true" = "$inside_worktree" ]
	then
		if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] && [ "$(git config --bool bash.showDirtyState)" != "false" ]
		then
			git diff --no-ext-diff --quiet || w="*" 
			git diff --no-ext-diff --cached --quiet || i="+" 
			if [ -z "$short_sha" ] && [ -z "$i" ]
			then
				i="#" 
			fi
		fi
		if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] && git rev-parse --verify --quiet refs/stash > /dev/null
		then
			s="$" 
		fi
		if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] && [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] && git ls-files --others --exclude-standard --directory --no-empty-directory --error-unmatch -- ':/*' > /dev/null 2> /dev/null
		then
			u="%${ZSH_VERSION+%}" 
		fi
		if [ -n "${GIT_PS1_COMPRESSSPARSESTATE}" ] && [ "$(git config --bool core.sparseCheckout)" = "true" ]
		then
			h="?" 
		fi
		if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]
		then
			__git_ps1_show_upstream
		fi
	fi
	local z="${GIT_PS1_STATESEPARATOR-" "}" 
	if [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]
	then
		if [ $pcmode = yes ] || [ -n "${ZSH_VERSION-}" ]
		then
			__git_ps1_colorize_gitstring
		fi
	fi
	b=${b##refs/heads/} 
	if [ $pcmode = yes ] && [ $ps1_expanded = yes ]
	then
		__git_ps1_branch_name=$b 
		b="\${__git_ps1_branch_name}" 
	fi
	local f="$h$w$i$s$u" 
	local gitstring="$c$b${f:+$z$f}${sparse}$r$p" 
	if [ $pcmode = yes ]
	then
		if [ "${__git_printf_supports_v-}" != yes ]
		then
			gitstring=$(printf -- "$printf_format" "$gitstring") 
		else
			printf -v gitstring -- "$printf_format" "$gitstring"
		fi
		PS1="$ps1pc_start$gitstring$ps1pc_end" 
	else
		printf -- "$printf_format" "$gitstring"
	fi
	return $exit
}
__git_ps1_colorize_gitstring () {
	if [[ -n ${ZSH_VERSION-} ]]
	then
		local c_red='%F{red}' 
		local c_green='%F{green}' 
		local c_lblue='%F{blue}' 
		local c_clear='%f' 
	else
		local c_red='\[\e[31m\]' 
		local c_green='\[\e[32m\]' 
		local c_lblue='\[\e[1;34m\]' 
		local c_clear='\[\e[0m\]' 
	fi
	local bad_color=$c_red 
	local ok_color=$c_green 
	local flags_color="$c_lblue" 
	local branch_color="" 
	if [ $detached = no ]
	then
		branch_color="$ok_color" 
	else
		branch_color="$bad_color" 
	fi
	c="$branch_color$c" 
	z="$c_clear$z" 
	if [ "$w" = "*" ]
	then
		w="$bad_color$w" 
	fi
	if [ -n "$i" ]
	then
		i="$ok_color$i" 
	fi
	if [ -n "$s" ]
	then
		s="$flags_color$s" 
	fi
	if [ -n "$u" ]
	then
		u="$bad_color$u" 
	fi
	r="$c_clear$r" 
}
__git_ps1_show_upstream () {
	local key value
	local svn_remote svn_url_pattern count n
	local upstream=git legacy="" verbose="" name="" 
	svn_remote=() 
	local output="$(git config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2>/dev/null | tr '\0\n' '\n ')" 
	while read -r key value
	do
		case "$key" in
			(bash.showupstream) GIT_PS1_SHOWUPSTREAM="$value" 
				if [[ -z "${GIT_PS1_SHOWUPSTREAM}" ]]
				then
					p="" 
					return
				fi ;;
			(svn-remote.*.url) svn_remote[$((${#svn_remote[@]} + 1))]="$value" 
				svn_url_pattern="$svn_url_pattern\\|$value" 
				upstream=svn+git  ;;
		esac
	done <<< "$output"
	for option in ${GIT_PS1_SHOWUPSTREAM}
	do
		case "$option" in
			(git | svn) upstream="$option"  ;;
			(verbose) verbose=1  ;;
			(legacy) legacy=1  ;;
			(name) name=1  ;;
		esac
	done
	case "$upstream" in
		(git) upstream="@{upstream}"  ;;
		(svn*) local -a svn_upstream
			svn_upstream=($(git log --first-parent -1 \
					--grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2>/dev/null)) 
			if [[ 0 -ne ${#svn_upstream[@]} ]]
			then
				svn_upstream=${svn_upstream[${#svn_upstream[@]} - 2]} 
				svn_upstream=${svn_upstream%@*} 
				local n_stop="${#svn_remote[@]}" 
				for ((n=1; n <= n_stop; n++)) do
					svn_upstream=${svn_upstream#${svn_remote[$n]}} 
				done
				if [[ -z "$svn_upstream" ]]
				then
					upstream=${GIT_SVN_ID:-git-svn} 
				else
					upstream=${svn_upstream#/} 
				fi
			elif [[ "svn+git" = "$upstream" ]]
			then
				upstream="@{upstream}" 
			fi ;;
	esac
	if [[ -z "$legacy" ]]
	then
		count="$(git rev-list --count --left-right \
				"$upstream"...HEAD 2>/dev/null)" 
	else
		local commits
		if commits="$(git rev-list --left-right "$upstream"...HEAD 2>/dev/null)" 
		then
			local commit behind=0 ahead=0 
			for commit in $commits
			do
				case "$commit" in
					("<"*) ((behind++)) ;;
					(*) ((ahead++)) ;;
				esac
			done
			count="$behind	$ahead" 
		else
			count="" 
		fi
	fi
	if [[ -z "$verbose" ]]
	then
		case "$count" in
			("") p=""  ;;
			("0	0") p="="  ;;
			("0	"*) p=">"  ;;
			(*"	0") p="<"  ;;
			(*) p="<>"  ;;
		esac
	else
		case "$count" in
			("") p=""  ;;
			("0	0") p=" u="  ;;
			("0	"*) p=" u+${count#0	}"  ;;
			(*"	0") p=" u-${count%	0}"  ;;
			(*) p=" u+${count#*	}-${count%	*}"  ;;
		esac
		if [[ -n "$count" && -n "$name" ]]
		then
			__git_ps1_upstream_name=$(git rev-parse \
				--abbrev-ref "$upstream" 2>/dev/null) 
			if [ $pcmode = yes ] && [ $ps1_expanded = yes ]
			then
				p="$p \${__git_ps1_upstream_name}" 
			else
				p="$p ${__git_ps1_upstream_name}" 
				unset __git_ps1_upstream_name
			fi
		fi
	fi
}
__git_sequencer_status () {
	local todo
	if test -f "$g/CHERRY_PICK_HEAD"
	then
		r="|CHERRY-PICKING" 
		return 0
	elif test -f "$g/REVERT_HEAD"
	then
		r="|REVERTING" 
		return 0
	elif __git_eread "$g/sequencer/todo" todo
	then
		case "$todo" in
			(p[\ \	] | pick[\ \	]*) r="|CHERRY-PICKING" 
				return 0 ;;
			(revert[\ \	]*) r="|REVERTING" 
				return 0 ;;
		esac
	fi
	return 1
}
__trash_all () {
	if [ $# -lt 1 ]
	then
		for file in $(find $tdir -mindepth 1 -maxdepth 1 | grep --color=never -v "\.trashinfo_" | xargs -d'\n' -I str bash -c "i=\"str\"; echo \${i#${tdir}/}" | sort -n)
		do
			[ -d $tdir/$file ] && find $tdir -mindepth 2 | grep --color --color=never -v "\.trashinfo_" | grep --color --color=never $file | xargs -d'\n' -I str bash -c "i=\"str\"; echo \${i#${tdir}/}"
		done
	else
		for file in $*
		do
			[ -d $tdir/$file ] && find $tdir -mindepth 2 | grep --color --color=never -v "\.trashinfo_" | grep --color --color=never $file | xargs -d'\n' -I str bash -c "i=\"str\"; echo \${i#${tdir}/}"
		done
	fi
}
__trash_clear () {
	if [ $# -lt 1 ]
	then
		echo -ne "clear all trashes that is not deleted today, are you sure? [y/n] "
		read ans
		if [ "$ans" = "y" ]
		then
			cur=$(date +'%F') 
			for dir in $(ls $tdir)
			do
				if [ ${dir%%.*} != $cur ]
				then
					command rm -rfv $tdir/$dir
				fi
			done
			echo "cleared."
		else
			echo "terminated."
		fi
	else
		echo -ne "remove ${fg[yellow]}$argv${reset_color}, are you sure? [y/n] "
		read ans
		if [ "$ans" = "y" ]
		then
			for file in $argv
			do
				if ! [ -d $tdir/$file ]
				then
					echo "no such file: ${fg[yellow]}$file${reset_color}\ntry \`trash list\` to find trashname."
				fi
				command rm -rfv $tdir/$file
			done
		else
			echo "terminated."
		fi
	fi
}
__trash_content () {
	if [ $# -lt 1 ]
	then
		find $tdir -mindepth 2 -maxdepth 2 | grep --color --color=never -v "\.trashinfo_" | xargs -d'\n' -I str bash -c "i=\"str\"; echo \${i#${tdir}/}" | sort -n
	else
		for file in $*
		do
			[ -d $tdir/$file ] && find $tdir -mindepth 2 -maxdepth 2 | grep --color --color=never -v "\.trashinfo_" | grep --color --color=never $file | xargs -d'\n' -I str bash -c "i=\"str\"; echo \${i#${tdir}/}"
		done
	fi
}
__trash_delete () {
	slient="false" 
	while getopts "sRrdfIiPWxv" arg
	do
		case $arg in
			(s) slient="true"  ;;
			(v) slient="false"  ;;
			(*)  ;;
		esac
	done
	shift $(( $OPTIND-1 ))
	if [ $# -lt 1 ]
	then
		echo -e "$0: missing operand" && return 1
	fi
	tim=$(date +'%F_%T') 
	token=$(echo "$tim" | md5sum | cut -c 1-6) 
	! [ -d $tdir ] && mkdir $tdir
	dir=$tdir/$tim/ 
	! [ "$slient" = "true" ] && echo -e "remove ${fg[yellow]}$@${reset_color} to $trash_dir${reset_color} ..."
	! [ -d $dir ] && mkdir $dir && command mv $@ $dir && echo -e "$(pwd)/" >> $dir/.trashinfo_$token
}
__trash_help () {
	cat <<EOF
usage: trash <command> [options]

available commands:
  trash delete [filename]    # put file to recycle bin         
  trash recover              # recover latest trash        
  trash recover [trashname]  # recover [trashname]        
  trash list                 # display trashname in recycle bin
  trash clear                # real remove trash which is not created today
  trash clear [trashname]    # real remove trash [trashname]
  trash content              # display details of files in recyble bin
  trash content [trashname]  # display details of [trashname] 
  trash all [trashname]      # display all files in recyble bin
  trash all [trashname]      # display all files in [trashname] 
  trash version              # display version

# also can use del as trash delete, rec as trash recover
# also can use -d as delete, -r as recover,
#              -l as list, -c as clear, -t as content, -a as all
#              -h as help, -v as version

EOF
}
__trash_list () {
	ls $tdir --color=none
}
__trash_recover () {
	! [ -d $tdir ] && mkdir $tdir
	if [ $# -lt 1 ]
	then
		if [ $(ls $tdir | wc -w) -lt 1 ]
		then
			return 0
		fi
		date=$(ls -lt $tdir | grep - | head -n 1 | awk '{print $9}') 
	else
		date=$1 
	fi
	if ! [ -d $tdir/$date ]
	then
		echo -e ${fg[red]}"no such directory!"${reset_color} && return 1
	fi
	date=${date%%/*}  && token=$(echo "$date" | md5sum | cut -c 1-6)  && dest=$(cat $tdir/$date/.trashinfo_${token})  && readable_dest=${dest/"${HOME}"/"~"} 
	ls $tdir/$date && echo -ne "-----\nrecover to ${fg[yellow]}$readable_dest${reset_color} ? [y/n] " && read key
	if [ "$key" = "y" ]
	then
		command mv $tdir/$date/* $dest/ && command mv $tdir/$date/.[^.]* $dest/ && command rmdir $tdir/$date/ && command rm $dest/.trashinfo_${token} && echo "${fg[green]}recovered.${reset_color}"
	else
		echo "${fg[red]}terminated.${reset_color}"
	fi
}
__trash_version () {
	echo "$version"
}
_a2ps () {
	# undefined
	builtin autoload -XUz
}
_a2utils () {
	# undefined
	builtin autoload -XUz
}
_aap () {
	# undefined
	builtin autoload -XUz
}
_abcde () {
	# undefined
	builtin autoload -XUz
}
_absolute_command_paths () {
	# undefined
	builtin autoload -XUz
}
_ack () {
	# undefined
	builtin autoload -XUz
}
_acpi () {
	# undefined
	builtin autoload -XUz
}
_acpitool () {
	# undefined
	builtin autoload -XUz
}
_acroread () {
	# undefined
	builtin autoload -XUz
}
_add-zle-hook-widget () {
	# undefined
	builtin autoload -XUz
}
_add-zsh-hook () {
	# undefined
	builtin autoload -XUz
}
_alias () {
	# undefined
	builtin autoload -XUz
}
_aliases () {
	# undefined
	builtin autoload -XUz
}
_all_labels () {
	# undefined
	builtin autoload -XUz
}
_all_matches () {
	# undefined
	builtin autoload -XUz
}
_alsa-utils () {
	# undefined
	builtin autoload -XUz
}
_alternative () {
	# undefined
	builtin autoload -XUz
}
_analyseplugin () {
	# undefined
	builtin autoload -XUz
}
_ansible () {
	# undefined
	builtin autoload -XUz
}
_ant () {
	# undefined
	builtin autoload -XUz
}
_antiword () {
	# undefined
	builtin autoload -XUz
}
_apachectl () {
	# undefined
	builtin autoload -XUz
}
_apm () {
	# undefined
	builtin autoload -XUz
}
_approximate () {
	(( ! IN_FZF_TAB )) || unfunction compadd
	_ftb__approximate
	(( ! IN_FZF_TAB )) || functions[compadd]=$functions[-ftb-compadd] 
}
_apt () {
	# undefined
	builtin autoload -XUz
}
_apt-file () {
	# undefined
	builtin autoload -XUz
}
_apt-move () {
	# undefined
	builtin autoload -XUz
}
_apt-show-versions () {
	# undefined
	builtin autoload -XUz
}
_aptitude () {
	# undefined
	builtin autoload -XUz
}
_arch_archives () {
	# undefined
	builtin autoload -XUz
}
_arch_namespace () {
	# undefined
	builtin autoload -XUz
}
_arg_compile () {
	# undefined
	builtin autoload -XUz
}
_arguments () {
	# undefined
	builtin autoload -XUz
}
_arp () {
	# undefined
	builtin autoload -XUz
}
_arping () {
	# undefined
	builtin autoload -XUz
}
_arrays () {
	# undefined
	builtin autoload -XUz
}
_asciidoctor () {
	# undefined
	builtin autoload -XUz
}
_asciinema () {
	# undefined
	builtin autoload -XUz
}
_assign () {
	# undefined
	builtin autoload -XUz
}
_at () {
	# undefined
	builtin autoload -XUz
}
_attr () {
	# undefined
	builtin autoload -XUz
}
_augeas () {
	# undefined
	builtin autoload -XUz
}
_auto-apt () {
	# undefined
	builtin autoload -XUz
}
_autocd () {
	# undefined
	builtin autoload -XUz
}
_avahi () {
	# undefined
	builtin autoload -XUz
}
_awk () {
	# undefined
	builtin autoload -XUz
}
_axi-cache () {
	# undefined
	builtin autoload -XUz
}
_base64 () {
	# undefined
	builtin autoload -XUz
}
_basename () {
	# undefined
	builtin autoload -XUz
}
_bash () {
	# undefined
	builtin autoload -XUz
}
_bash_complete () {
	local ret=1 
	local -a suf matches
	local -x COMP_POINT COMP_CWORD
	local -a COMP_WORDS COMPREPLY BASH_VERSINFO
	local -x COMP_LINE="$words" 
	local -A savejobstates savejobtexts
	(( COMP_POINT = 1 + ${#${(j. .)words[1,CURRENT-1]}} + $#QIPREFIX + $#IPREFIX + $#PREFIX ))
	(( COMP_CWORD = CURRENT - 1))
	COMP_WORDS=($words) 
	BASH_VERSINFO=(2 05b 0 1 release) 
	savejobstates=(${(kv)jobstates}) 
	savejobtexts=(${(kv)jobtexts}) 
	[[ ${argv[${argv[(I)nospace]:-0}-1]} = -o ]] && suf=(-S '') 
	matches=(${(f)"$(compgen $@ -- ${words[CURRENT]})"}) 
	if [[ -n $matches ]]
	then
		if [[ ${argv[${argv[(I)filenames]:-0}-1]} = -o ]]
		then
			compset -P '*/' && matches=(${matches##*/}) 
			compset -S '/*' && matches=(${matches%%/*}) 
			compadd -Q -f "${suf[@]}" -a matches && ret=0 
		else
			compadd -Q "${suf[@]}" -a matches && ret=0 
		fi
	fi
	if (( ret ))
	then
		if [[ ${argv[${argv[(I)default]:-0}-1]} = -o ]]
		then
			_default "${suf[@]}" && ret=0 
		elif [[ ${argv[${argv[(I)dirnames]:-0}-1]} = -o ]]
		then
			_directories "${suf[@]}" && ret=0 
		fi
	fi
	return ret
}
_bash_completions () {
	# undefined
	builtin autoload -XUz
}
_baudrates () {
	# undefined
	builtin autoload -XUz
}
_baz () {
	# undefined
	builtin autoload -XUz
}
_be_name () {
	# undefined
	builtin autoload -XUz
}
_beadm () {
	# undefined
	builtin autoload -XUz
}
_beep () {
	# undefined
	builtin autoload -XUz
}
_bibtex () {
	# undefined
	builtin autoload -XUz
}
_bind_addresses () {
	# undefined
	builtin autoload -XUz
}
_bindkey () {
	# undefined
	builtin autoload -XUz
}
_bison () {
	# undefined
	builtin autoload -XUz
}
_bittorrent () {
	# undefined
	builtin autoload -XUz
}
_bogofilter () {
	# undefined
	builtin autoload -XUz
}
_bpf_filters () {
	# undefined
	builtin autoload -XUz
}
_bpython () {
	# undefined
	builtin autoload -XUz
}
_brace_parameter () {
	# undefined
	builtin autoload -XUz
}
_brctl () {
	# undefined
	builtin autoload -XUz
}
_bsd_disks () {
	# undefined
	builtin autoload -XUz
}
_bsd_pkg () {
	# undefined
	builtin autoload -XUz
}
_bsdconfig () {
	# undefined
	builtin autoload -XUz
}
_bsdinstall () {
	# undefined
	builtin autoload -XUz
}
_btrfs () {
	# undefined
	builtin autoload -XUz
}
_bts () {
	# undefined
	builtin autoload -XUz
}
_bug () {
	# undefined
	builtin autoload -XUz
}
_builtin () {
	# undefined
	builtin autoload -XUz
}
_bzip2 () {
	# undefined
	builtin autoload -XUz
}
_bzr () {
	# undefined
	builtin autoload -XUz
}
_cabal () {
	# undefined
	builtin autoload -XUz
}
_cache_invalid () {
	# undefined
	builtin autoload -XUz
}
_caffeinate () {
	# undefined
	builtin autoload -XUz
}
_cal () {
	# undefined
	builtin autoload -XUz
}
_calendar () {
	# undefined
	builtin autoload -XUz
}
_call_function () {
	# undefined
	builtin autoload -XUz
}
_call_program () {
	local curcontext="${curcontext}" tmp err_fd=-1 clocale='_comp_locale;' 
	local -a prefix
	if [[ "$1" = -p ]]
	then
		shift
		if (( $#_comp_priv_prefix ))
		then
			curcontext="${curcontext%:*}/${${(@M)_comp_priv_prefix:#^*[^\\]=*}[1]}:" 
			zstyle -t ":completion:${curcontext}:${1}" gain-privileges && prefix=($_comp_priv_prefix) 
		fi
	elif [[ "$1" = -l ]]
	then
		shift
		clocale='' 
	fi
	if (( ${debug_fd:--1} > 2 )) || [[ ! -t 2 ]]
	then
		exec {err_fd}>&2
	else
		exec {err_fd}> /dev/null
	fi
	{
		if zstyle -s ":completion:${curcontext}:${1}" command tmp
		then
			if [[ "$tmp" = -* ]]
			then
				eval $clocale "$tmp[2,-1]" "$argv[2,-1]"
			else
				eval $clocale $prefix "$tmp"
			fi
		else
			eval $clocale $prefix "$argv[2,-1]"
		fi 2>&$err_fd
	} always {
		exec {err_fd}>&-
	}
}
_canonical_paths () {
	# undefined
	builtin autoload -XUz
}
_cat () {
	# undefined
	builtin autoload -XUz
}
_ccal () {
	# undefined
	builtin autoload -XUz
}
_cd () {
	# undefined
	builtin autoload -XUz
}
_cdbs-edit-patch () {
	# undefined
	builtin autoload -XUz
}
_cdcd () {
	# undefined
	builtin autoload -XUz
}
_cdr () {
	# undefined
	builtin autoload -XUz
}
_cdrdao () {
	# undefined
	builtin autoload -XUz
}
_cdrecord () {
	# undefined
	builtin autoload -XUz
}
_chattr () {
	# undefined
	builtin autoload -XUz
}
_chcon () {
	# undefined
	builtin autoload -XUz
}
_check_aliases () {
	local typed="$1" 
	local expanded="$2" 
	local found_aliases
	found_aliases=() 
	local best_match="" 
	local best_match_value="" 
	local key
	local value
	if [[ "$typed" = "sudo "* ]]
	then
		return
	fi
	for key in "${(@k)aliases}"
	do
		value="${aliases[$key]}" 
		if [[ ${YSU_IGNORED_ALIASES[(r)$key]} == "$key" ]]
		then
			continue
		fi
		if [[ "$typed" = "$value" || "$typed" = "$value "* ]]
		then
			if [[ "${#value}" -gt "${#key}" ]]
			then
				found_aliases+="$key" 
				if [[ "${#value}" -gt "${#best_match_value}" ]]
				then
					best_match="$key" 
					best_match_value="$value" 
				elif [[ "${#value}" -eq "${#best_match}" && ${#key} -lt "${#best_match}" ]]
				then
					best_match="$key" 
					best_match_value="$value" 
				fi
			fi
		fi
	done
	if [[ "$YSU_MODE" = "ALL" ]]
	then
		for key in ${(@ok)found_aliases}
		do
			value="${aliases[$key]}" 
			ysu_message "alias" "$value" "$key"
		done
	elif [[ ( -z "$YSU_MODE" || "$YSU_MODE" = "BESTMATCH" ) && -n "$best_match" ]]
	then
		value="${aliases[$best_match]}" 
		if [[ "$typed" = "$best_match" || "$typed" = "$best_match "* ]]
		then
			return
		fi
		ysu_message "alias" "$value" "$best_match"
	fi
	if [[ -n "$found_aliases" ]]
	then
		_check_ysu_hardcore
	fi
}
_check_git_aliases () {
	local typed="$1" 
	local expanded="$2" 
	if [[ "$typed" = "sudo "* ]]
	then
		return
	fi
	if [[ "$typed" = "git "* ]]
	then
		local found=false 
		git config --get-regexp "^alias\..+$" | sort | while read key value
		do
			key="${key#alias.}" 
			if [[ "$expanded" = "git $value" || "$expanded" = "git $value "* ]]
			then
				ysu_message "git alias" "$value" "git $key"
				found=true 
			fi
		done
		if $found
		then
			_check_ysu_hardcore
		fi
	fi
}
_check_global_aliases () {
	local typed="$1" 
	local expanded="$2" 
	local found=false 
	local tokens
	local key
	local value
	local entry
	if [[ "$typed" = "sudo "* ]]
	then
		return
	fi
	alias -g | sort | while read entry
	do
		tokens=("${(@s/=/)entry}") 
		key="${tokens[1]}" 
		value="${(Q)tokens[2]}" 
		if [[ ${YSU_IGNORED_GLOBAL_ALIASES[(r)$key]} == "$key" ]]
		then
			continue
		fi
		if [[ "$typed" = *" $value "* || "$typed" = *" $value" || "$typed" = "$value "* || "$typed" = "$value" ]]
		then
			ysu_message "global alias" "$value" "$key"
			found=true 
		fi
	done
	if $found
	then
		_check_ysu_hardcore
	fi
}
_check_ysu_hardcore () {
	if [[ "$YSU_HARDCORE" = 1 ]]
	then
		_write_ysu_buffer "${BOLD}${RED}You Should Use hardcore mode enabled. Use your aliases!${NONE}\n"
		kill -s INT $$
	fi
}
_chflags () {
	# undefined
	builtin autoload -XUz
}
_chkconfig () {
	# undefined
	builtin autoload -XUz
}
_chmod () {
	# undefined
	builtin autoload -XUz
}
_chown () {
	# undefined
	builtin autoload -XUz
}
_chroot () {
	# undefined
	builtin autoload -XUz
}
_chrt () {
	# undefined
	builtin autoload -XUz
}
_chsh () {
	# undefined
	builtin autoload -XUz
}
_cksum () {
	# undefined
	builtin autoload -XUz
}
_clay () {
	# undefined
	builtin autoload -XUz
}
_cmdambivalent () {
	# undefined
	builtin autoload -XUz
}
_cmdstring () {
	# undefined
	builtin autoload -XUz
}
_cmp () {
	# undefined
	builtin autoload -XUz
}
_code () {
	# undefined
	builtin autoload -XUz
}
_column () {
	# undefined
	builtin autoload -XUz
}
_combination () {
	# undefined
	builtin autoload -XUz
}
_comm () {
	# undefined
	builtin autoload -XUz
}
_command () {
	# undefined
	builtin autoload -XUz
}
_command_names () {
	# undefined
	builtin autoload -XUz
}
_comp_locale () {
	# undefined
	builtin autoload -XUz
}
_compadd () {
	# undefined
	builtin autoload -XUz
}
_compdef () {
	# undefined
	builtin autoload -XUz
}
_complete () {
	local comp name oldcontext ret=1 service 
	typeset -T curcontext="$curcontext" ccarray 
	oldcontext="$curcontext" 
	if [[ -n "$compcontext" ]]
	then
		if [[ "${(t)compcontext}" = *array* ]]
		then
			local expl
			_wanted values expl value compadd -a - compcontext
		elif [[ "${(t)compcontext}" = *assoc* ]]
		then
			local expl tmp i
			tmp=() 
			for i in "${(@k)compcontext[(R)*[^[:blank:]]]}"
			do
				tmp=("$tmp[@]" "${i}:${compcontext[$i]}") 
			done
			tmp=("$tmp[@]" "${(k@)compcontext[(R)[[:blank:]]#]}") 
			_describe -t values value tmp
		elif [[ "$compcontext" = *:*:* ]]
		then
			local tag="${${compcontext%%:*}:-values}" 
			local descr="${${${compcontext#${tag}:}%%:*}:-value}" 
			local action="${compcontext#${tag}:${descr}:}" expl ws ret=1 
			case "$action" in
				(\ #) _message -e "$tag" "$descr" ;;
				(\(\(*\)\)) eval ws\=\( "${action[3,-3]}" \)
					_describe -t "$tag" "$descr" ws ;;
				(\(*\)) eval ws\=\( "${action[2,-2]}" \)
					_wanted "$tag" expl "$descr" compadd -a - ws ;;
				(\{*\}) _tags "$tag"
					while _tags
					do
						while _next_label "$tag" expl "$descr"
						do
							eval "$action[2,-2]" && ret=0 
						done
						(( ret )) || break
					done ;;
				(\ *) eval ws\=\( "$action" \)
					_tags "$tag"
					while _tags
					do
						while _next_label "$tag" expl "$descr"
						do
							"$ws[@]"
						done
						(( ret )) || break
					done ;;
				(*) eval ws\=\( "$action" \)
					_tags "$tag"
					while _tags
					do
						while _next_label "$tag" expl "$descr"
						do
							"$ws[1]" "$expl[@]" "${(@)ws[2,-1]}"
						done
						(( ret )) || break
					done ;;
			esac
		else
			ccarray[3]="$compcontext" 
			comp="$_comps[$compcontext]" 
			[[ -n "$comp" ]] && eval "$comp"
		fi
		return
	fi
	comp="$_comps[-first-]" 
	if [[ -n "$comp" ]]
	then
		service="${_services[-first-]:--first-}" 
		ccarray[3]=-first- 
		eval "$comp" && ret=0 
		if [[ "$_compskip" = all ]]
		then
			_compskip= 
			return ret
		fi
	fi
	[[ -n $compstate[vared] ]] && compstate[context]=vared 
	ret=1 
	if [[ "$compstate[context]" = command ]]
	then
		curcontext="$oldcontext" 
		_normal -s && ret=0 
	else
		local cname="-${compstate[context]:s/_/-/}-" 
		ccarray[3]="$cname" 
		comp="$_comps[$cname]" 
		service="${_services[$cname]:-$cname}" 
		if [[ -z "$comp" ]]
		then
			if [[ "$_compskip" = *default* ]]
			then
				_compskip= 
				return 1
			fi
			comp="$_comps[-default-]" 
			service="${_services[-default-]:--default-}" 
		fi
		[[ -n "$comp" ]] && eval "$comp" && ret=0 
	fi
	_compskip= 
	return ret
}
_complete_debug () {
	# undefined
	builtin autoload -XUz
}
_complete_help () {
	# undefined
	builtin autoload -XUz
}
_complete_help_generic () {
	# undefined
	builtin autoload -XUz
}
_complete_tag () {
	# undefined
	builtin autoload -XUz
}
_completers () {
	# undefined
	builtin autoload -XUz
}
_composer () {
	# undefined
	builtin autoload -XUz
}
_compress () {
	# undefined
	builtin autoload -XUz
}
_condition () {
	# undefined
	builtin autoload -XUz
}
_configure () {
	# undefined
	builtin autoload -XUz
}
_coreadm () {
	# undefined
	builtin autoload -XUz
}
_correct () {
	# undefined
	builtin autoload -XUz
}
_correct_filename () {
	# undefined
	builtin autoload -XUz
}
_correct_word () {
	# undefined
	builtin autoload -XUz
}
_cowsay () {
	# undefined
	builtin autoload -XUz
}
_cp () {
	# undefined
	builtin autoload -XUz
}
_cpio () {
	# undefined
	builtin autoload -XUz
}
_cplay () {
	# undefined
	builtin autoload -XUz
}
_cpupower () {
	# undefined
	builtin autoload -XUz
}
_crontab () {
	# undefined
	builtin autoload -XUz
}
_cryptsetup () {
	# undefined
	builtin autoload -XUz
}
_cscope () {
	# undefined
	builtin autoload -XUz
}
_cssh () {
	# undefined
	builtin autoload -XUz
}
_csup () {
	# undefined
	builtin autoload -XUz
}
_ctags_tags () {
	# undefined
	builtin autoload -XUz
}
_cu () {
	# undefined
	builtin autoload -XUz
}
_curl () {
	# undefined
	builtin autoload -XUz
}
_cut () {
	# undefined
	builtin autoload -XUz
}
_cvs () {
	# undefined
	builtin autoload -XUz
}
_cvsup () {
	# undefined
	builtin autoload -XUz
}
_cygcheck () {
	# undefined
	builtin autoload -XUz
}
_cygpath () {
	# undefined
	builtin autoload -XUz
}
_cygrunsrv () {
	# undefined
	builtin autoload -XUz
}
_cygserver () {
	# undefined
	builtin autoload -XUz
}
_cygstart () {
	# undefined
	builtin autoload -XUz
}
_dak () {
	# undefined
	builtin autoload -XUz
}
_darcs () {
	# undefined
	builtin autoload -XUz
}
_date () {
	# undefined
	builtin autoload -XUz
}
_date_formats () {
	# undefined
	builtin autoload -XUz
}
_dates () {
	# undefined
	builtin autoload -XUz
}
_dbus () {
	# undefined
	builtin autoload -XUz
}
_dchroot () {
	# undefined
	builtin autoload -XUz
}
_dchroot-dsa () {
	# undefined
	builtin autoload -XUz
}
_dconf () {
	# undefined
	builtin autoload -XUz
}
_dcop () {
	# undefined
	builtin autoload -XUz
}
_dcut () {
	# undefined
	builtin autoload -XUz
}
_dd () {
	# undefined
	builtin autoload -XUz
}
_deb_architectures () {
	# undefined
	builtin autoload -XUz
}
_deb_codenames () {
	# undefined
	builtin autoload -XUz
}
_deb_files () {
	# undefined
	builtin autoload -XUz
}
_deb_packages () {
	# undefined
	builtin autoload -XUz
}
_debbugs_bugnumber () {
	# undefined
	builtin autoload -XUz
}
_debchange () {
	# undefined
	builtin autoload -XUz
}
_debcheckout () {
	# undefined
	builtin autoload -XUz
}
_debdiff () {
	# undefined
	builtin autoload -XUz
}
_debfoster () {
	# undefined
	builtin autoload -XUz
}
_deborphan () {
	# undefined
	builtin autoload -XUz
}
_debsign () {
	# undefined
	builtin autoload -XUz
}
_debuild () {
	# undefined
	builtin autoload -XUz
}
_default () {
	# undefined
	builtin autoload -XUz
}
_defaults () {
	# undefined
	builtin autoload -XUz
}
_delimiters () {
	# undefined
	builtin autoload -XUz
}
_describe () {
	# undefined
	builtin autoload -XUz
}
_description () {
	local name nopt xopt format gname hidden hide match opts tag
	local -a ign gropt sort
	opts=() 
	xopt=(-X) 
	nopt=() 
	zparseopts -K -D -a nopt 1 2 V=gropt J=ign x=xopt
	3="${${3##[[:blank:]]#}%%[[:blank:]]#}" 
	[[ -n "$3" ]] && _lastdescr=("$_lastdescr[@]" "$3") 
	zstyle -s ":completion:${curcontext}:$1" group-name gname && [[ -z "$gname" ]] && gname="$1" 
	_setup "$1" "${gname:--default-}"
	name="$2" 
	zstyle -s ":completion:${curcontext}:$1" format format || zstyle -s ":completion:${curcontext}:descriptions" format format
	if zstyle -s ":completion:${curcontext}:$1" hidden hidden && [[ "$hidden" = (all|yes|true|1|on) ]]
	then
		[[ "$hidden" = all ]] && format='' 
		opts=(-n) 
	fi
	zstyle -s ":completion:${curcontext}:$1" matcher match && opts=($opts -M "$match") 
	[[ -n "$_matcher" ]] && opts=($opts -M "$_matcher") 
	if [[ -z "$gropt" ]]
	then
		if zstyle -a ":completion:${curcontext}:$1" sort sort || zstyle -a ":completion:${curcontext}:" sort sort
		then
			if [[ -z "${(@)sort:#(match|numeric|reverse)}" ]]
			then
				gropt=(-o ${(j.,.)sort}) 
			elif [[ "$sort" != (yes|true|1|on|menu) ]]
			then
				gropt=(-o nosort) 
			fi
		fi
	else
		gropt=(-o nosort) 
	fi
	if [[ -z "$_comp_no_ignore" ]]
	then
		zstyle -a ":completion:${curcontext}:$1" ignored-patterns _comp_ignore || _comp_ignore=() 
		if zstyle -s ":completion:${curcontext}:$1" ignore-line hidden
		then
			local -a qwords
			qwords=(${words//(#m)[\[\]()\\*?#<>~\^\|]/\\$MATCH}) 
			case "$hidden" in
				(true | yes | on | 1) _comp_ignore+=($qwords)  ;;
				(current) _comp_ignore+=($qwords[CURRENT])  ;;
				(current-shown) [[ "$compstate[old_list]" = *shown* ]] && _comp_ignore+=($qwords[CURRENT])  ;;
				(other) _comp_ignore+=($qwords[1,CURRENT-1] $qwords[CURRENT+1,-1])  ;;
			esac
		fi
		(( $#_comp_ignore )) && opts=(-F _comp_ignore $opts) 
	else
		_comp_ignore=() 
	fi
	tag="$1" 
	shift 2
	if [[ -z "$1" && $# -eq 1 ]]
	then
		format= 
	elif [[ -n "$format" ]]
	then
		zformat -f format "$format" "d:$1" "${(@)argv[2,-1]}"
	fi
	if [[ -n "$gname" ]]
	then
		if [[ -n "$format" ]]
		then
			set -A "$name" "$opts[@]" "$nopt[@]" "$gropt[@]" -J "$gname" "$xopt" "$format"
		else
			set -A "$name" "$opts[@]" "$nopt[@]" "$gropt[@]" -J "$gname"
		fi
	else
		if [[ -n "$format" ]]
		then
			set -A "$name" "$opts[@]" "$nopt[@]" "$gropt[@]" -J -default- "$xopt" "$format"
		else
			set -A "$name" "$opts[@]" "$nopt[@]" "$gropt[@]" -J -default-
		fi
	fi
	if ! (( ${funcstack[2,-1][(I)_description]} ))
	then
		local fakestyle descr
		for fakestyle in fake fake-always
		do
			zstyle -a ":completion:${curcontext}:$tag" $fakestyle match || continue
			descr=("${(@M)match:#*[^\\]:*}") 
			opts=("${(@P)name}") 
			if [[ $fakestyle = fake-always && $opts[1,2] = "-F _comp_ignore" ]]
			then
				shift 2 opts
			fi
			compadd "${(@)opts}" - "${(@)${(@)match:#*[^\\]:*}:s/\\:/:/}"
			(( $#descr )) && _describe -t "$tag" '' descr "${(@)opts}"
		done
	fi
	return 0
}
_devtodo () {
	# undefined
	builtin autoload -XUz
}
_df () {
	# undefined
	builtin autoload -XUz
}
_dhclient () {
	# undefined
	builtin autoload -XUz
}
_dhcpinfo () {
	# undefined
	builtin autoload -XUz
}
_dict () {
	# undefined
	builtin autoload -XUz
}
_dict_words () {
	# undefined
	builtin autoload -XUz
}
_diff () {
	# undefined
	builtin autoload -XUz
}
_diff3 () {
	# undefined
	builtin autoload -XUz
}
_diff_options () {
	# undefined
	builtin autoload -XUz
}
_diffstat () {
	# undefined
	builtin autoload -XUz
}
_dig () {
	# undefined
	builtin autoload -XUz
}
_dir_list () {
	# undefined
	builtin autoload -XUz
}
_directories () {
	# undefined
	builtin autoload -XUz
}
_directory_stack () {
	# undefined
	builtin autoload -XUz
}
_dirs () {
	# undefined
	builtin autoload -XUz
}
_disable () {
	# undefined
	builtin autoload -XUz
}
_dispatch () {
	local comp pat val name i ret=1 _compskip="$_compskip" 
	local curcontext="$curcontext" service str noskip 
	local -a match mbegin mend
	if [[ "$1" = -s ]]
	then
		noskip=yes 
		shift
	fi
	[[ -z "$noskip" ]] && _compskip= 
	curcontext="${curcontext%:*:*}:${1}:" 
	shift
	if [[ "$_compskip" != (all|*patterns*) ]]
	then
		for str in "$@"
		do
			[[ -n "$str" ]] || continue
			service="${_services[$str]:-$str}" 
			for i in "${(@)_patcomps[(K)$str]}"
			do
				if [[ $i = (#b)"="([^=]#)"="(*) ]]
				then
					service=$match[1] 
					i=$match[2] 
				fi
				eval "$i" && ret=0 
				if [[ "$_compskip" = *patterns* ]]
				then
					break
				elif [[ "$_compskip" = all ]]
				then
					_compskip='' 
					return ret
				fi
			done
		done
	fi
	ret=1 
	for str in "$@"
	do
		[[ -n "$str" ]] || continue
		str=${(Q)str} 
		name="$str" 
		comp="${_comps[$str]}" 
		service="${_services[$str]:-$str}" 
		[[ -z "$comp" ]] || break
	done
	if [[ -n "$comp" && "$name" != "${argv[-1]}" ]]
	then
		_compskip=patterns 
		eval "$comp" && ret=0 
		[[ "$_compskip" = (all|*patterns*) ]] && return ret
	fi
	if [[ "$_compskip" != (all|*patterns*) ]]
	then
		for str
		do
			[[ -n "$str" ]] || continue
			service="${_services[$str]:-$str}" 
			for i in "${(@)_postpatcomps[(K)$str]}"
			do
				_compskip=default 
				eval "$i" && ret=0 
				if [[ "$_compskip" = *patterns* ]]
				then
					break
				elif [[ "$_compskip" = all ]]
				then
					_compskip='' 
					return ret
				fi
			done
		done
	fi
	[[ "$name" = "${argv[-1]}" && -n "$comp" && "$_compskip" != (all|*default*) ]] && service="${_services[$name]:-$name}"  && eval "$comp" && ret=0 
	_compskip='' 
	return ret
}
_django () {
	# undefined
	builtin autoload -XUz
}
_dkms () {
	# undefined
	builtin autoload -XUz
}
_dladm () {
	# undefined
	builtin autoload -XUz
}
_dlocate () {
	# undefined
	builtin autoload -XUz
}
_dmesg () {
	# undefined
	builtin autoload -XUz
}
_dmidecode () {
	# undefined
	builtin autoload -XUz
}
_dnf () {
	# undefined
	builtin autoload -XUz
}
_dns_types () {
	# undefined
	builtin autoload -XUz
}
_doas () {
	# undefined
	builtin autoload -XUz
}
_domains () {
	# undefined
	builtin autoload -XUz
}
_dos2unix () {
	# undefined
	builtin autoload -XUz
}
_dpatch-edit-patch () {
	# undefined
	builtin autoload -XUz
}
_dpkg () {
	# undefined
	builtin autoload -XUz
}
_dpkg-buildpackage () {
	# undefined
	builtin autoload -XUz
}
_dpkg-cross () {
	# undefined
	builtin autoload -XUz
}
_dpkg-repack () {
	# undefined
	builtin autoload -XUz
}
_dpkg_source () {
	# undefined
	builtin autoload -XUz
}
_dput () {
	# undefined
	builtin autoload -XUz
}
_drill () {
	# undefined
	builtin autoload -XUz
}
_dsh () {
	# undefined
	builtin autoload -XUz
}
_dtrace () {
	# undefined
	builtin autoload -XUz
}
_dtruss () {
	# undefined
	builtin autoload -XUz
}
_du () {
	# undefined
	builtin autoload -XUz
}
_dumpadm () {
	# undefined
	builtin autoload -XUz
}
_dumper () {
	# undefined
	builtin autoload -XUz
}
_dupload () {
	# undefined
	builtin autoload -XUz
}
_dvi () {
	# undefined
	builtin autoload -XUz
}
_dynamic_directory_name () {
	# undefined
	builtin autoload -XUz
}
_e2label () {
	# undefined
	builtin autoload -XUz
}
_ecasound () {
	# undefined
	builtin autoload -XUz
}
_echotc () {
	# undefined
	builtin autoload -XUz
}
_echoti () {
	# undefined
	builtin autoload -XUz
}
_ed () {
	# undefined
	builtin autoload -XUz
}
_elfdump () {
	# undefined
	builtin autoload -XUz
}
_elinks () {
	# undefined
	builtin autoload -XUz
}
_email_addresses () {
	# undefined
	builtin autoload -XUz
}
_emulate () {
	# undefined
	builtin autoload -XUz
}
_enable () {
	# undefined
	builtin autoload -XUz
}
_enscript () {
	# undefined
	builtin autoload -XUz
}
_entr () {
	# undefined
	builtin autoload -XUz
}
_env () {
	# undefined
	builtin autoload -XUz
}
_eog () {
	# undefined
	builtin autoload -XUz
}
_equal () {
	# undefined
	builtin autoload -XUz
}
_espeak () {
	# undefined
	builtin autoload -XUz
}
_etags () {
	# undefined
	builtin autoload -XUz
}
_ethtool () {
	# undefined
	builtin autoload -XUz
}
_evince () {
	# undefined
	builtin autoload -XUz
}
_exec () {
	# undefined
	builtin autoload -XUz
}
_expand () {
	setopt localoptions nonomatch
	[[ _matcher_num -gt 1 ]] && return 1
	local exp word sort expr expl subd suf=" " force opt asp tmp opre pre epre 
	local continue=0 
	(( $# )) && while getopts gsco opt
	do
		force="$force$opt" 
	done
	if [[ "$funcstack[2]" = _prefix ]]
	then
		word="$IPREFIX$PREFIX$SUFFIX" 
	else
		word="$IPREFIX$PREFIX$SUFFIX$ISUFFIX" 
	fi
	[[ "$word" = *\$(|\{[^\}]#) || ( "$word" = *\$[a-zA-Z0-9_]## && $+parameters[${word##*\$}] -eq 0 ) ]] && return 1
	zstyle -T ":completion:${curcontext}:" suffix && [[ "$word" = (\~*/*|*\$(|[=~#^+])[a-zA-Z0-9_\[\]]##[^a-zA-Z0-9_\[\]]|*\$\{*\}?) && "${(e)word}" != (#s)(*[^\\]|)[][^*?\(\)\<\>\{\}\|]* ]] && return 1
	zstyle -s ":completion:${curcontext}:" accept-exact tmp || [[ ! -o recexact ]] || tmp=1 
	if [[ "$tmp" != (yes|true|on|1) ]]
	then
		{
			[[ "$word" = \~(|[-+]) || ( "$word" = \~[-+][1-9]## && $word[3,-1] -le $#dirstack ) || $word = \~\[*\]/* ]] && return 1
		}
		{
			[[ ( "$word" = \~* && ${#userdirs[(I)${word[2,-1]}*]}+${#nameddirs[(I)${word[2,-1]}*]} -gt 1 ) || ( "$word" = *\$[a-zA-Z0-9_]## && ${#parameters[(I)${word##*\$}*]} -ne 1 ) ]] && continue=1 
		}
		[[ continue -eq 1 && "$tmp" != continue ]] && return 1
	fi
	exp=("$word") 
	if [[ "$force" = *s* ]] || zstyle -T ":completion:${curcontext}:" substitute
	then
		if [[ ! $_comp_caller_options[ignorebraces] == on && "${#${exp}//[^\{]}" = "${#${exp}//[^\}]}" ]]
		then
			local otmp
			tmp=${(q)word} 
			while [[ $#tmp != $#otmp ]]
			do
				otmp=$tmp 
				tmp=${tmp//(#b)\\\$\\\{(([^\{\}]|\\\\{|\\\\})#)([^\\])\\\}/\\$\\\\{${match[1]}${match[3]}\\\\}} 
			done
			eval exp\=\( ${tmp:gs/\\{/\{/:gs/\\}/\}/} \) 2> /dev/null
		fi
		setopt aliases
		eval 'exp=( ${${(e)exp//\\[ 	
]/ }//(#b)([ 	
])/\\$match[1]} )' 2> /dev/null
		setopt NO_aliases
	else
		exp=(${exp:s/\\\$/\$}) 
	fi
	[[ -z "$exp" ]] && exp=("$word") 
	subd=("$exp[@]") 
	integer done_quote
	local orig_exp=$exp 
	if [[ "$force" = *g* ]] || zstyle -T ":completion:${curcontext}:" glob
	then
		eval 'exp=( ${~exp//(#b)\\([ 	\"'"\'"'
])/$match[1]} ); exp=( ${(q)exp} )' 2> /dev/null && (( $#exp )) && done_quote=1 
	fi
	if (( ! done_quote ))
	then
		eval 'exp=( ${orig_exp//(#b)\\([ 	\"'"\'"'
])/$match[1]} ); exp=( ${(q)exp} )' 2> /dev/null
	fi
	(( $#exp )) || exp=("$subd[@]") 
	[[ $#exp -eq 1 && "${exp[1]//\\}" = "${word//\\}"(|\(N\)) ]] && return 1
	{
		[[ "$force" = *o* ]] || zstyle -t ":completion:${curcontext}:" subst-globs-only
	} && [[ "$subd" = "$exp"(|\(N\)) ]] && return 1
	zstyle -s ":completion:${curcontext}:" keep-prefix tmp || tmp=changed 
	if [[ "$word" = (\~*/*|*\$*/*) && "$tmp" = (yes|true|on|1|changed) ]]
	then
		if [[ "$word" = *\$* ]]
		then
			opre="${(M)word##*\$[^/]##/}" 
		else
			opre="${word%%/*}" 
		fi
		eval 'epre=( ${(e)~opre} )' 2> /dev/null
		if [[ -n "$epre" && $#epre -eq 1 ]]
		then
			pre="${(q)epre[1]}" 
			[[ ( "$tmp" != changed || $#exp -gt 1 || "${opre}${exp[1]#${pre}}" != "$word" ) && "${exp[1]}" = $pre* ]] && exp=(${opre}${^exp#${pre}}) 
		fi
		[[ $#exp -eq 1 && "$exp[1]" = "$word" ]] && return 1
	fi
	zstyle -s ":completion:${curcontext}:" sort sort
	[[ "$sort" = (yes|true|1|on) ]] && exp=("${(@o)exp}") 
	if zstyle -s ":completion:${curcontext}:" add-space tmp
	then
		if [[ "$tmp" != *subst* || "$word" != *\$* || "$exp[1]" = *\$* ]]
		then
			[[ "$tmp" = *file* ]] && asp=file 
			[[ "$tmp" = *(yes|true|1|on|subst)* ]] && asp="yes$asp" 
		fi
	else
		asp=file 
	fi
	if (( $#exp == 1 ))
	then
		if [[ -d ${exp[1]/${opre}/${pre}} && "$exp[1]" != */ ]]
		then
			suf=/ 
		elif [[ "$asp" = yes* || ( "$asp" = *file && -f "${exp[1]/${opre}/${pre}}" ) ]]
		then
			suf=' ' 
		else
			suf= 
		fi
	fi
	if [[ -z "$compstate[insert]" ]]
	then
		if [[ "$sort" = menu ]]
		then
			_description expansions expl expansions "o:$word"
		else
			_description -V expansions expl expansions "o:$word"
		fi
		compadd "$expl[@]" -UQ -qS "$suf" -a exp
	else
		_tags all-expansions expansions original
		if [[ $#exp -ge 1 ]] && _requested expansions
		then
			local i j normal space dir
			if [[ "$sort" = menu ]]
			then
				_description expansions expl expansions "o:$word"
			else
				_description -V expansions expl expansions "o:$word"
			fi
			normal=() 
			space=() 
			dir=() 
			for i in "$exp[@]"
			do
				j="${i/${opre}/${pre}}" 
				if [[ -d "$j" && "$i" != */ ]]
				then
					dir=("$dir[@]" "$i") 
				elif [[ "$asp" = yes* || ( "$asp" = *file && -f "$j" ) ]]
				then
					space=("$space[@]" "$i") 
				else
					normal=("$normal[@]" "$i") 
				fi
			done
			(( $#dir )) && compadd "$expl[@]" -UQ -qS/ -a dir
			(( $#space )) && compadd "$expl[@]" -UQ -qS " " -a space
			(( $#normal )) && compadd "$expl[@]" -UQ -qS "" -a normal
		fi
		if _requested all-expansions
		then
			local disp dstr
			if [[ "$sort" = menu ]]
			then
				_description all-expansions expl 'all expansions' "o:$word"
			else
				_description -V all-expansions expl 'all expansions' "o:$word"
			fi
			if [[ "${#${exp}}" -ge COLUMNS ]]
			then
				disp=(-ld dstr) 
				dstr=("${(r:COLUMNS-5:)exp} ...") 
			else
				disp=() 
			fi
			[[ -o multios ]] && exp=($exp[1] $compstate[redirect]${^exp[2,-1]}) 
			compadd "$disp[@]" "$expl[@]" -UQ -qS "$suf" - "$exp"
		fi
		_requested original expl original && compadd "$expl[@]" -UQ - "$word"
		compstate[insert]=menu 
	fi
	return continue
}
_expand_alias () {
	# undefined
	builtin autoload -XUz
}
_expand_word () {
	# undefined
	builtin autoload -XUz
}
_extensions () {
	# undefined
	builtin autoload -XUz
}
_external_pwds () {
	# undefined
	builtin autoload -XUz
}
_extract () {
	# undefined
	builtin autoload -XUz
}
_fakeroot () {
	# undefined
	builtin autoload -XUz
}
_fast-theme () {
	# undefined
	builtin autoload -XUz
}
_fbsd_architectures () {
	# undefined
	builtin autoload -XUz
}
_fbsd_device_types () {
	# undefined
	builtin autoload -XUz
}
_fc () {
	# undefined
	builtin autoload -XUz
}
_fd () {
	# undefined
	builtin autoload -XUz
}
_feh () {
	# undefined
	builtin autoload -XUz
}
_fetch () {
	# undefined
	builtin autoload -XUz
}
_fetchmail () {
	# undefined
	builtin autoload -XUz
}
_ffmpeg () {
	# undefined
	builtin autoload -XUz
}
_figlet () {
	# undefined
	builtin autoload -XUz
}
_file_descriptors () {
	# undefined
	builtin autoload -XUz
}
_file_flags () {
	# undefined
	builtin autoload -XUz
}
_file_modes () {
	# undefined
	builtin autoload -XUz
}
_file_systems () {
	# undefined
	builtin autoload -XUz
}
_files () {
	local -a match mbegin mend
	local ret=1 
	if _have_glob_qual $PREFIX
	then
		compset -p ${#match[1]}
		compset -S '[^\)\|\~]#(|\))'
		if [[ $_comp_caller_options[extendedglob] == on ]] && compset -P '\#'
		then
			_globflags && ret=0 
		else
			if [[ $_comp_caller_options[extendedglob] == on ]]
			then
				_describe -t globflags "glob flag" '(\#:introduce\ glob\ flag)' -Q -S '' && ret=0 
			fi
			_globquals && ret=0 
		fi
		return ret
	elif [[ $_comp_caller_options[extendedglob] == on && $PREFIX = \(\#[^\)]# ]] && compset -P '\(\#'
	then
		_globflags && return
	fi
	local opts tmp glob pat pats expl tag i def descr end ign tried
	local type sdef ignvars ignvar prepath oprefix rfiles rfile
	zparseopts -a opts '/=tmp' 'f=tmp' 'g+:-=tmp' q n 1 2 P: S: r: R: W: x+: X+: M+: F: J+: V+: o+:
	type="${(@j::M)${(@)tmp#-}#?}" 
	if (( $tmp[(I)-g*] ))
	then
		glob="${${${(@)${(@M)tmp:#-g*}#-g}##[[:blank:]]#}%%[[:blank:]]#}" 
		[[ "$glob" = *[^\\][[:blank:]]* ]] && glob="{${glob//(#b)([^\\])[[:blank:]]##/${match[1]},}}" 
		[[ "$glob" = (#b)(*\()([^\|\~]##\)) && $match[2] != \#q* ]] && glob="${match[1]}#q${match[2]}" 
	elif [[ $type = */* ]]
	then
		glob="*(#q-/)" 
	fi
	tmp=$opts[(I)-F] 
	if (( tmp ))
	then
		ignvars=($=opts[tmp+1]) 
		if [[ $ignvars = _comp_ignore ]]
		then
			ign=($_comp_ignore) 
		elif [[ $ignvars = \(* ]]
		then
			ign=(${=ignvars[2,-2]}) 
		else
			ign=() 
			for ignvar in $ignvars
			do
				ign+=(${(P)ignvar}) 
			done
			opts[tmp+1]=_comp_ignore 
		fi
	else
		ign=() 
	fi
	if zstyle -a ":completion:${curcontext}:" file-patterns tmp
	then
		pats=() 
		for i in ${tmp//\%p/${${glob:-\*}//:/\\:}}
		do
			if [[ $i = *[^\\]:* ]]
			then
				pats+=(" $i ") 
			else
				pats+=(" ${i}:files ") 
			fi
		done
	elif zstyle -t ":completion:${curcontext}:" list-dirs-first
	then
		pats=(" *(-/):directories:directory ${${glob:-*}//:/\\:}(#q^-/):globbed-files" '*:all-files') 
	else
		pats=("${${glob:-*}//:/\\:}:globbed-files *(-/):directories" '*:all-files ') 
	fi
	tried=() 
	for def in "$pats[@]"
	do
		eval "def=( ${${def//\\:/\\\\\\:}//(#b)([][()|*?^#~<>])/\\${match[1]}} )"
		tmp="${(@M)def#*[^\\]:}" 
		(( $tried[(I)${(q)tmp}] )) && continue
		tried=("$tried[@]" "$tmp") 
		for sdef in "$def[@]"
		do
			tag="${${sdef#*[^\\]:}%%:*}" 
			pat="${${sdef%%:${tag}*}//\\:/:}" 
			if [[ "$sdef" = *:${tag}:* ]]
			then
				descr="${(Q)sdef#*:${tag}:}" 
			else
				if (( $opts[(I)-X] ))
				then
					descr= 
				else
					descr=file 
				fi
				end=yes 
			fi
			_tags "$tag"
			while _tags
			do
				_comp_ignore=() 
				while _next_label "$tag" expl "$descr"
				do
					_comp_ignore=($_comp_ignore $ign) 
					if [[ -n "$end" ]]
					then
						if _path_files -g "$pat" "$opts[@]" "$expl[@]"
						then
							ret=0 
						elif [[ $PREFIX$SUFFIX != */* ]] && zstyle -a ":completion:${curcontext}:$tag" recursive-files rfiles
						then
							local subtree
							for rfile in $rfiles
							do
								if [[ $PWD/ = ${~rfile} ]]
								then
									if [[ -z $subtree ]]
									then
										subtree=(**/*(/)) 
									fi
									for prepath in $subtree
									do
										oprefix=$PREFIX 
										PREFIX=$prepath/$PREFIX 
										_path_files -g "$pat" "$opts[@]" "$expl[@]" && ret=0 
										PREFIX=$oprefix 
									done
									break
								fi
							done
						fi
					else
						_path_files "$expl[@]" -g "$pat" "$opts[@]" && ret=0 
					fi
				done
				(( ret )) || break
			done
			[[ "$pat" = '*' ]] && return ret
		done
		(( ret )) || return 0
	done
	return 1
}
_find () {
	# undefined
	builtin autoload -XUz
}
_find_net_interfaces () {
	# undefined
	builtin autoload -XUz
}
_findmnt () {
	# undefined
	builtin autoload -XUz
}
_finger () {
	# undefined
	builtin autoload -XUz
}
_fink () {
	# undefined
	builtin autoload -XUz
}
_first () {
	
}
_flac () {
	# undefined
	builtin autoload -XUz
}
_flex () {
	# undefined
	builtin autoload -XUz
}
_floppy () {
	# undefined
	builtin autoload -XUz
}
_flowadm () {
	# undefined
	builtin autoload -XUz
}
_flush_ysu_buffer () {
	(
		printf "$_YSU_BUFFER" >&2
	)
	_YSU_BUFFER="" 
}
_fmadm () {
	# undefined
	builtin autoload -XUz
}
_fmt () {
	# undefined
	builtin autoload -XUz
}
_fold () {
	# undefined
	builtin autoload -XUz
}
_fortune () {
	# undefined
	builtin autoload -XUz
}
_free () {
	# undefined
	builtin autoload -XUz
}
_freebsd-update () {
	# undefined
	builtin autoload -XUz
}
_fs_usage () {
	# undefined
	builtin autoload -XUz
}
_fsh () {
	# undefined
	builtin autoload -XUz
}
_fstat () {
	# undefined
	builtin autoload -XUz
}
_ftb__approximate () {
	[[ _matcher_num -gt 1 || "${#:-$PREFIX$SUFFIX}" -le 1 ]] && return 1
	local _comp_correct _correct_expl _correct_group comax cfgacc match
	local oldcontext="${curcontext}" opm="$compstate[pattern_match]" 
	local dounfunction
	integer ret=1 
	if [[ "$1" = -a* ]]
	then
		cfgacc="${1[3,-1]}" 
	elif [[ "$1" = -a ]]
	then
		cfgacc="$2" 
	else
		zstyle -s ":completion:${curcontext}:" max-errors cfgacc || cfgacc='2 numeric' 
	fi
	if [[ "$cfgacc" = *numeric* && ${NUMERIC:-1} -ne 1 ]]
	then
		[[ "$cfgacc" = *not-numeric* ]] && return 1
		comax="${NUMERIC:-1}" 
	else
		comax="${cfgacc//[^0-9]}" 
	fi
	[[ "$comax" -lt 1 ]] && return 1
	_tags corrections original
	{
		if (( ! $+functions[compadd] ))
		then
			dounfunction=1 
			compadd () {
				local ppre="$argv[(I)-p]" 
				[[ ${argv[(I)-[a-zA-Z]#U[a-zA-Z]#]} -eq 0 && "${#:-$PREFIX$SUFFIX}" -le _comp_correct ]] && return
				if [[ "$PREFIX" = \~* && ( ppre -eq 0 || "$argv[ppre+1]" != \~* ) ]]
				then
					PREFIX="~(#a${_comp_correct})${PREFIX[2,-1]}" 
				else
					PREFIX="(#a${_comp_correct})$PREFIX" 
				fi
				(( $_correct_group && ${${argv[1,(r)-(|-)]}[(I)-*[JV]]} )) && _correct_expl[_correct_group]=${argv[1,(r)-(-|)][(R)-*[JV]]} 
				builtin compadd "$_correct_expl[@]" "$@"
			}
		fi
		_comp_correct=1 
		[[ -z "$compstate[pattern_match]" ]] && compstate[pattern_match]='*' 
		while [[ _comp_correct -le comax ]]
		do
			curcontext="${oldcontext/(#b)([^:]#:[^:]#:)/${match[1][1,-2]}-${_comp_correct}:}" 
			_description corrections _correct_expl corrections "e:$_comp_correct" "o:$PREFIX$SUFFIX"
			_correct_group="$_correct_expl[(I)-*[JV]]" 
			if _complete
			then
				if zstyle -t ":completion:${curcontext}:" insert-unambiguous && [[ "${#compstate[unambiguous]}" -ge "${#:-$PREFIX$SUFFIX}" ]]
				then
					compstate[pattern_insert]=unambiguous 
				elif _requested original && {
						[[ compstate[nmatches] -gt 1 ]] || zstyle -t ":completion:${curcontext}:" original
					}
				then
					local expl
					_description -V original expl original
					builtin compadd "$expl[@]" -U -Q - "$PREFIX$SUFFIX"
					[[ "$compstate[list]" != list* ]] && compstate[list]="$compstate[list] force" 
				fi
				compstate[pattern_match]="$opm" 
				ret=0 
				break
			fi
			[[ "${#:-$PREFIX$SUFFIX}" -le _comp_correct+1 ]] && break
			(( _comp_correct++ ))
		done
	} always {
		[[ -n $dounfunction ]] && (( $+functions[compadd] )) && unfunction compadd
	}
	(( ret == 0 )) && return 0
	compstate[pattern_match]="$opm" 
	return 1
}
_ftb__main_complete () {
	local IFS=$' \t\n\0' 
	eval "$_comp_setup"
	local func funcs ret=1 tmp _compskip format nm call match min max i num _completers _completer _completer_num curtag _comp_force_list _matchers _matcher _c_matcher _matcher_num _comp_tags _comp_mesg mesg str context state state_descr line opt_args val_args curcontext="$curcontext" _last_nmatches=-1 _last_menu_style _def_menu_style _menu_style sel _tags_level=0 _saved_exact="${compstate[exact]}" _saved_lastprompt="${compstate[last_prompt]}" _saved_list="${compstate[list]}" _saved_insert="${compstate[insert]}" _saved_colors="$ZLS_COLORS" _saved_colors_set=${+ZLS_COLORS} _ambiguous_color='' 
	local _comp_priv_prefix
	unset _comp_priv_prefix
	local -a precommands
	local -ar builtin_precommands=(- builtin eval exec nocorrect noglob time) 
	typeset -U _lastdescr _comp_ignore _comp_colors
	{
		[[ -z "$curcontext" ]] && curcontext=::: 
		zstyle -s ":completion:${curcontext}:" insert-tab tmp || tmp=yes 
		if [[ ( "$tmp" = *pending(|[[:blank:]]*) && PENDING -gt 0 ) || ( "$tmp" = *pending=(#b)([0-9]##)(|[[:blank:]]*) && PENDING -ge $match[1] ) ]]
		then
			compstate[insert]=tab 
			return 0
		fi
		if [[ "$compstate[insert]" = tab* ]]
		then
			if [[ "$tmp" = (|*[[:blank:]])(yes|true|on|1)(|[[:blank:]]*) ]]
			then
				if [[ "$curcontext" != :* || -z "$compstate[vared]" ]] || zstyle -t ":completion:vared${curcontext}:" insert-tab
				then
					return 0
				fi
			fi
			compstate[insert]="${compstate[insert]//tab /}" 
		fi
		if [[ "$compstate[pattern_match]" = "*" && "$_lastcomp[unambiguous]" = "$PREFIX" && -n "$_lastcomp[unambiguous_cursor]" ]]
		then
			integer upos="$_lastcomp[unambiguous_cursor]" 
			SUFFIX="$PREFIX[upos,-1]$SUFFIX" 
			PREFIX="$PREFIX[1,upos-1]" 
		fi
		if [[ -z "$compstate[quote]" ]]
		then
			if [[ -o equals ]] && compset -P 1 '='
			then
				compstate[context]=equal 
			elif [[ "$PREFIX" != */* && "$PREFIX[1]" = '~' ]]
			then
				compset -p 1
				compstate[context]=tilde 
			fi
		fi
		_setup default
		_def_menu_style=("$_last_menu_style[@]") 
		_last_menu_style=() 
		if zstyle -s ":completion:${curcontext}:default" list-prompt tmp
		then
			LISTPROMPT="$tmp" 
			zmodload -i zsh/complist
		fi
		if zstyle -s ":completion:${curcontext}:default" select-prompt tmp
		then
			MENUPROMPT="$tmp" 
			zmodload -i zsh/complist
		fi
		if zstyle -s ":completion:${curcontext}:default" select-scroll tmp
		then
			MENUSCROLL="$tmp" 
			zmodload -i zsh/complist
		fi
		if (( $# ))
		then
			if [[ "$1" = - ]]
			then
				if [[ $# -lt 3 ]]
				then
					_completers=() 
				else
					_completers=("$2") 
					call=yes 
				fi
			else
				_completers=("$@") 
			fi
		else
			zstyle -a ":completion:${curcontext}:" completer _completers || _completers=(_complete _ignored) 
		fi
		_completer_num=1 
		integer SECONDS=0 
		TRAPINT () {
			zle -M "Killed by signal in ${funcstack[2]} after ${SECONDS}s"
			zle -R
			return 130
		}
		TRAPQUIT () {
			zle -M "Killed by signal in ${funcstack[2]} after ${SECONDS}s"
			zle -R
			return 131
		}
		funcs=("$compprefuncs[@]") 
		compprefuncs=() 
		for func in "$funcs[@]"
		do
			"$func"
		done
		for tmp in "$_completers[@]"
		do
			if [[ -n "$call" ]]
			then
				_completer="${tmp}" 
			elif [[ "$tmp" = *:-* ]]
			then
				_completer="${${tmp%:*}[2,-1]//_/-}${tmp#*:}" 
				tmp="${tmp%:*}" 
			elif [[ $tmp = *:* ]]
			then
				_completer="${tmp#*:}" 
				tmp="${tmp%:*}" 
			else
				_completer="${tmp[2,-1]//_/-}" 
			fi
			curcontext="${curcontext/:[^:]#:/:${_completer}:}" 
			zstyle -t ":completion:${curcontext}:" show-completer && zle -R "Trying completion for :completion:${curcontext}"
			zstyle -a ":completion:${curcontext}:" matcher-list _matchers || _matchers=('') 
			_matcher_num=1 
			_matcher='' 
			for _c_matcher in "$_matchers[@]"
			do
				if [[ "$_c_matcher" == +* ]]
				then
					_matcher="$_matcher $_c_matcher[2,-1]" 
				else
					_matcher="$_c_matcher" 
				fi
				_comp_mesg= 
				if [[ -n "$call" ]]
				then
					if "${(@)argv[3,-1]}"
					then
						ret=0 
						break 2
					fi
				elif "$tmp"
				then
					ret=0 
					break 2
				fi
				(( _matcher_num++ ))
			done
			[[ -n "$_comp_mesg" ]] && break
			(( _completer_num++ ))
		done
		curcontext="${curcontext/:[^:]#:/::}" 
		if [[ $compstate[old_list] = keep ]]
		then
			nm=$_lastcomp[nmatches] 
		else
			nm=$compstate[nmatches] 
		fi
		if [[ $compstate[old_list] = keep || nm -gt 1 ]]
		then
			[[ _last_nmatches -ge 0 && _last_nmatches -ne nm ]] && _menu_style=("$_last_menu_style[@]" "$_menu_style[@]") 
			tmp=$(( compstate[list_lines] + BUFFERLINES + 1 )) 
			_menu_style=("$_menu_style[@]" "$_def_menu_style[@]") 
			if [[ "$compstate[list]" = *list && tmp -gt LINES && ( -n "$_menu_style[(r)select=long-list]" || -n "$_menu_style[(r)(yes|true|on|1)=long-list]" ) ]]
			then
				compstate[insert]=menu 
			elif [[ "$compstate[insert]" = "$_saved_insert" ]]
			then
				if [[ -n "$compstate[insert]" && -n "$_menu_style[(r)(yes|true|1|on)=long]" && tmp -gt LINES ]]
				then
					compstate[insert]=menu 
				else
					sel=("${(@M)_menu_style:#(yes|true|1|on)*}") 
					if (( $#sel ))
					then
						min=9999999 
						for i in "$sel[@]"
						do
							if [[ "$i" = *\=[0-9]* ]]
							then
								num="${i#*\=}" 
								[[ num -lt 0 ]] && num=0 
							elif [[ "$i" != *\=* ]]
							then
								num=0 
							else
								num=9999999 
							fi
							[[ num -lt min ]] && min="$num" 
							(( min )) || break
						done
					fi
					sel=("${(@M)_menu_style:#(no|false|0|off)*}") 
					if (( $#sel ))
					then
						max=9999999 
						for i in "$sel[@]"
						do
							if [[ "$i" = *\=[0-9]* ]]
							then
								num="${i#*\=}" 
								[[ num -lt 0 ]] && num=0 
							elif [[ "$i" != *\=* ]]
							then
								num=0 
							else
								num=9999999 
							fi
							[[ num -lt max ]] && max="$num" 
							(( max )) || break
						done
					fi
					if [[ ( -n "$min" && nm -ge min && ( -z "$max" || nm -lt max ) ) || ( -n "$_menu_style[(r)auto*]" && "$compstate[insert]" = automenu ) ]]
					then
						compstate[insert]=menu 
					elif [[ -n "$max" && nm -ge max ]]
					then
						compstate[insert]=unambiguous 
					elif [[ -n "$_menu_style[(r)auto*]" && "$compstate[insert]" != automenu ]]
					then
						compstate[insert]=automenu-unambiguous 
					fi
				fi
			fi
			if [[ "$compstate[insert]" = *menu* ]]
			then
				[[ "$MENUSELECT" = 00 ]] && MENUSELECT=0 
				if [[ -n "$_menu_style[(r)no-select*]" ]]
				then
					unset MENUSELECT
				elif [[ -n "$_menu_style[(r)select=long*]" ]]
				then
					if [[ tmp -gt LINES ]]
					then
						zmodload -i zsh/complist
						MENUSELECT=00 
					fi
				fi
				if [[ "$MENUSELECT" != 00 ]]
				then
					sel=("${(@M)_menu_style:#select*}") 
					if (( $#sel ))
					then
						min=9999999 
						for i in "$sel[@]"
						do
							if [[ "$i" = *\=[0-9]* ]]
							then
								num="${i#*\=}" 
								[[ num -lt 0 ]] && num=0 
							elif [[ "$i" != *\=* ]]
							then
								num=0 
							else
								num=9999999 
							fi
							[[ num -lt min ]] && min="$num" 
							(( min )) || break
						done
						zmodload -i zsh/complist
						MENUSELECT="$min" 
					else
						unset MENUSELECT
					fi
				fi
				if [[ -n "$MENUSELECT" ]]
				then
					if [[ -n "$_menu_style[(r)interactive*]" ]]
					then
						MENUMODE=interactive 
					elif [[ -n "$_menu_style[(r)search*]" ]]
					then
						if [[ -n "$_menu_style[(r)*backward*]" ]]
						then
							MENUMODE=search-backward 
						else
							MENUMODE=search-forward 
						fi
					else
						unset MENUMODE
					fi
				fi
			fi
		elif [[ nm -lt 1 && -n "$_comp_mesg" ]]
		then
			compstate[insert]='' 
			compstate[list]='list force' 
		elif [[ nm -eq 0 && -z "$_comp_mesg" && $#_lastdescr -ne 0 && $compstate[old_list] != keep ]] && zstyle -s ":completion:${curcontext}:warnings" format format
		then
			compstate[list]='list force' 
			compstate[insert]='' 
			tmp=("\`${(@)^_lastdescr:#}'") 
			case $#tmp in
				(1) str="$tmp[1]"  ;;
				(2) str="$tmp[1] or $tmp[2]"  ;;
				(*) str="${(j:, :)tmp[1,-2]}, or $tmp[-1]"  ;;
			esac
			_setup warnings
			zformat -f mesg "$format" "d:$str" "D:${(F)${(@)_lastdescr:#}}"
			compadd -x "$mesg"
		fi
		if [[ -n "$_ambiguous_color" ]]
		then
			local toquote='[=\(\)\|~^?*[\]#<>]' 
			local prefix=${${compstate[unambiguous]}[1,${compstate[unambiguous_cursor]}-1]} 
			[[ -n $prefix ]] && _comp_colors+=("=(#i)${prefix[1,-2]//?/(}${prefix[1,-2]//(#m)?/${MATCH/$~toquote/\\$MATCH}|)}${prefix[-1]//(#m)$~toquote/\\$MATCH}(#b)(?|)*==$_ambiguous_color") 
		fi
		[[ "$_comp_force_list" = always || ( "$_comp_force_list" = ?* && nm -ge _comp_force_list ) ]] && compstate[list]="${compstate[list]//messages} force" 
	} always {
		if [[ "$compstate[old_list]" = keep ]]
		then
			if [[ $_saved_colors_set = 1 ]]
			then
				ZLS_COLORS="$_saved_colors" 
			else
				unset ZLS_COLORS
			fi
		elif (( $#_comp_colors ))
		then
			ZLS_COLORS="${(j.:.)_comp_colors}" 
		else
			unset ZLS_COLORS
		fi
	}
	funcs=("$comppostfuncs[@]") 
	comppostfuncs=() 
	for func in "$funcs[@]"
	do
		"$func"
	done
	_lastcomp=("${(@kv)compstate}") 
	_lastcomp[nmatches]=$nm 
	_lastcomp[completer]="$_completer" 
	_lastcomp[prefix]="$PREFIX" 
	_lastcomp[suffix]="$SUFFIX" 
	_lastcomp[iprefix]="$IPREFIX" 
	_lastcomp[isuffix]="$ISUFFIX" 
	_lastcomp[qiprefix]="$QIPREFIX" 
	_lastcomp[qisuffix]="$QISUFFIX" 
	_lastcomp[tags]="$_comp_tags" 
	return ret
}
_functions () {
	# undefined
	builtin autoload -XUz
}
_fuse_arguments () {
	# undefined
	builtin autoload -XUz
}
_fuse_values () {
	# undefined
	builtin autoload -XUz
}
_fuser () {
	# undefined
	builtin autoload -XUz
}
_fusermount () {
	# undefined
	builtin autoload -XUz
}
_fw_update () {
	# undefined
	builtin autoload -XUz
}
_fzf_compgen_dir () {
	command find -L "$1" -name .git -prune -o -name .hg -prune -o -name .svn -prune -o -type d -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
}
_fzf_compgen_path () {
	echo "$1"
	command find -L "$1" -name .git -prune -o -name .hg -prune -o -name .svn -prune -o \( -type d -o -type f -o -type l \) -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
}
_fzf_complete () {
	setopt localoptions ksh_arrays
	local args rest str_arg i sep
	args=("$@") 
	sep= 
	for i in {0..${#args[@]}}
	do
		if [[ "${args[$i]}" = -- ]]
		then
			sep=$i 
			break
		fi
	done
	if [[ -n "$sep" ]]
	then
		str_arg= 
		rest=("${args[@]:$((sep + 1)):${#args[@]}}") 
		args=("${args[@]:0:$sep}") 
	else
		str_arg=$1 
		args=() 
		shift
		rest=("$@") 
	fi
	local fifo lbuf cmd matches post
	fifo="${TMPDIR:-/tmp}/fzf-complete-fifo-$$" 
	lbuf=${rest[0]} 
	cmd=$(__fzf_extract_command "$lbuf") 
	post="${funcstack[1]}_post" 
	type $post > /dev/null 2>&1 || post=cat 
	_fzf_feed_fifo "$fifo"
	matches=$(FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_COMPLETION_OPTS $str_arg" __fzf_comprun "$cmd" "${args[@]}" -q "${(Q)prefix}" < "$fifo" | $post | tr '\n' ' ') 
	if [ -n "$matches" ]
	then
		LBUFFER="$lbuf$matches" 
	fi
	command rm -f "$fifo"
}
_fzf_complete_export () {
	_fzf_complete -m -- "$@" < <(
    declare -xp | sed 's/=.*//' | sed 's/.* //'
  )
}
_fzf_complete_kill () {
	_fzf_complete -m --preview 'echo {}' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    command ps -ef | sed 1d
  )
}
_fzf_complete_kill_post () {
	awk '{print $2}'
}
_fzf_complete_ssh () {
	_fzf_complete +m -- "$@" < <(
    setopt localoptions nonomatch
    command cat <(command tail -n +1 ~/.ssh/config ~/.ssh/config.d/* /etc/ssh/ssh_config 2> /dev/null | command grep -i '^\s*host\(name\)\? ' | awk '{for (i = 2; i <= NF; i++) print $1 " " $i}' | command grep -v '[*?]') \
        <(command grep -oE '^[[a-z0-9.,:-]+' ~/.ssh/known_hosts | tr ',' '\n' | tr -d '[' | awk '{ print $1 " " $1 }') \
        <(command grep -v '^\s*\(#\|$\)' /etc/hosts | command grep -Fv '0.0.0.0') |
        awk '{if (length($2) > 0) {print $2}}' | sort -u
  )
}
_fzf_complete_telnet () {
	_fzf_complete +m -- "$@" < <(
    command grep -v '^\s*\(#\|$\)' /etc/hosts | command grep -Fv '0.0.0.0' |
        awk '{if (length($2) > 0) {print $2}}' | sort -u
  )
}
_fzf_complete_unalias () {
	_fzf_complete +m -- "$@" < <(
    alias | sed 's/=.*//'
  )
}
_fzf_complete_unset () {
	_fzf_complete -m -- "$@" < <(
    declare -xp | sed 's/=.*//' | sed 's/.* //'
  )
}
_fzf_dir_completion () {
	__fzf_generic_path_completion "$1" "$2" _fzf_compgen_dir "" "/" ""
}
_fzf_feed_fifo () {
	(
		command rm -f "$1"
		mkfifo "$1"
		cat <&0 > "$1" &
	)
}
_fzf_path_completion () {
	__fzf_generic_path_completion "$1" "$2" _fzf_compgen_path "-m" "" " "
}
_gcc () {
	# undefined
	builtin autoload -XUz
}
_gcore () {
	# undefined
	builtin autoload -XUz
}
_gdb () {
	# undefined
	builtin autoload -XUz
}
_geany () {
	# undefined
	builtin autoload -XUz
}
_gem () {
	# undefined
	builtin autoload -XUz
}
_generic () {
	# undefined
	builtin autoload -XUz
}
_genisoimage () {
	# undefined
	builtin autoload -XUz
}
_getclip () {
	# undefined
	builtin autoload -XUz
}
_getconf () {
	# undefined
	builtin autoload -XUz
}
_getent () {
	# undefined
	builtin autoload -XUz
}
_getfacl () {
	# undefined
	builtin autoload -XUz
}
_getmail () {
	# undefined
	builtin autoload -XUz
}
_getopt () {
	# undefined
	builtin autoload -XUz
}
_ghostscript () {
	# undefined
	builtin autoload -XUz
}
_git () {
	# undefined
	builtin autoload -XUz
}
_git-buildpackage () {
	# undefined
	builtin autoload -XUz
}
_global () {
	# undefined
	builtin autoload -XUz
}
_global_tags () {
	# undefined
	builtin autoload -XUz
}
_globflags () {
	# undefined
	builtin autoload -XUz
}
_globqual_delims () {
	# undefined
	builtin autoload -XUz
}
_globquals () {
	# undefined
	builtin autoload -XUz
}
_gnome-gv () {
	# undefined
	builtin autoload -XUz
}
_gnu_generic () {
	# undefined
	builtin autoload -XUz
}
_gnupod () {
	# undefined
	builtin autoload -XUz
}
_gnutls () {
	# undefined
	builtin autoload -XUz
}
_go () {
	# undefined
	builtin autoload -XUz
}
_gpasswd () {
	# undefined
	builtin autoload -XUz
}
_gpg () {
	# undefined
	builtin autoload -XUz
}
_gphoto2 () {
	# undefined
	builtin autoload -XUz
}
_gprof () {
	# undefined
	builtin autoload -XUz
}
_gqview () {
	# undefined
	builtin autoload -XUz
}
_gradle () {
	# undefined
	builtin autoload -XUz
}
_graphicsmagick () {
	# undefined
	builtin autoload -XUz
}
_grep () {
	# undefined
	builtin autoload -XUz
}
_grep-excuses () {
	# undefined
	builtin autoload -XUz
}
_groff () {
	# undefined
	builtin autoload -XUz
}
_groups () {
	# undefined
	builtin autoload -XUz
}
_growisofs () {
	# undefined
	builtin autoload -XUz
}
_gsettings () {
	# undefined
	builtin autoload -XUz
}
_gstat () {
	# undefined
	builtin autoload -XUz
}
_guard () {
	# undefined
	builtin autoload -XUz
}
_guilt () {
	# undefined
	builtin autoload -XUz
}
_gv () {
	# undefined
	builtin autoload -XUz
}
_gzip () {
	# undefined
	builtin autoload -XUz
}
_hash () {
	# undefined
	builtin autoload -XUz
}
_have_glob_qual () {
	local complete
	[[ $2 = complete ]] && complete=")" 
	[[ -z $compstate[quote] && ( ( $_comp_caller_options[bareglobqual] == on && $1 = (#b)(((*[^\\\$]|)(\\\\)#)\()([^\)\|\~]#)$complete && ${#match[1]} -gt 1 ) || ( $_comp_caller_options[extendedglob] == on && $1 = (#b)(((*[^\\\$]|)(\\\\)#)"(#q")([^\)]#)$complete ) ) ]]
}
_hdiutil () {
	# undefined
	builtin autoload -XUz
}
_head () {
	# undefined
	builtin autoload -XUz
}
_hexdump () {
	# undefined
	builtin autoload -XUz
}
_hist () {
	# undefined
	builtin autoload -XUz
}
_history () {
	# undefined
	builtin autoload -XUz
}
_history-substring-search-begin () {
	setopt localoptions extendedglob
	_history_substring_search_refresh_display= 
	_history_substring_search_query_highlight= 
	if [[ -n $BUFFER && $BUFFER == ${_history_substring_search_result:-} ]]
	then
		return
	fi
	_history_substring_search_result='' 
	if [[ -z $BUFFER ]]
	then
		_history_substring_search_query= 
		_history_substring_search_query_parts=() 
		_history_substring_search_raw_matches=() 
	else
		_history_substring_search_query=$BUFFER 
		if [[ -n $HISTORY_SUBSTRING_SEARCH_FUZZY ]]
		then
			_history_substring_search_query_parts=(${=_history_substring_search_query}) 
		else
			_history_substring_search_query_parts=(${==_history_substring_search_query}) 
		fi
		local search_pattern="*${(j:*:)_history_substring_search_query_parts[@]//(#m)[\][()|\\*?#<>~^]/\\$MATCH}*" 
		_history_substring_search_raw_matches=(${(k)history[(R)(#$HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS)${search_pattern}]}) 
	fi
	_history_substring_search_raw_match_index=0 
	_history_substring_search_matches=() 
	_history_substring_search_unique_filter=() 
	if [[ $WIDGET == history-substring-search-down ]]
	then
		_history_substring_search_match_index=1 
	else
		_history_substring_search_match_index=0 
	fi
}
_history-substring-search-down-buffer () {
	local buflines XRBUFFER xrbuflines
	buflines=(${(f)BUFFER}) 
	XRBUFFER="x"$RBUFFER 
	xrbuflines=(${(f)XRBUFFER}) 
	if [[ $#buflines -gt 1 && $CURSOR -ne $#BUFFER && $#xrbuflines -ne 1 ]]
	then
		zle down-line-or-history
		return 0
	fi
	return 1
}
_history-substring-search-down-history () {
	if [[ -z $_history_substring_search_query ]]
	then
		if [[ $HISTNO -eq 1 && -z $BUFFER ]]
		then
			BUFFER=${history[1]} 
			_history_substring_search_refresh_display=1 
		else
			zle down-line-or-history
		fi
		return 0
	fi
	return 1
}
_history-substring-search-down-search () {
	_history_substring_search_refresh_display=1 
	if [[ $_history_substring_search_match_index -lt 1 ]]
	then
		_history-substring-search-not-found
		return
	fi
	if _history-substring-search-has-prev
	then
		_history_substring_search_match_index+=-1 
		_history-substring-search-found
	else
		_history_substring_search_match_index+=-1 
		_history-substring-search-not-found
	fi
	if [[ -o HIST_IGNORE_ALL_DUPS || -n $HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE ]]
	then
		return
	fi
	if [[ -o HIST_FIND_NO_DUPS && $BUFFER == $_history_substring_search_result ]]
	then
		_history-substring-search-down-search
	fi
}
_history-substring-search-end () {
	setopt localoptions extendedglob
	_history_substring_search_result=$BUFFER 
	if [[ $_history_substring_search_refresh_display -eq 1 ]]
	then
		region_highlight=() 
		CURSOR=${#BUFFER} 
	fi
	_zsh_highlight
	if [[ -n $_history_substring_search_query_highlight ]]
	then
		local highlight_start_index=0 
		local highlight_end_index=0 
		local query_part
		for query_part in $_history_substring_search_query_parts
		do
			local escaped_query_part=${query_part//(#m)[\][()|\\*?#<>~^]/\\$MATCH} 
			local query_part_match_index="${${BUFFER:$highlight_start_index}[(i)(#$HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS)${escaped_query_part}]}" 
			if [[ $query_part_match_index -le ${#BUFFER:$highlight_start_index} ]]
			then
				highlight_start_index=$(( $highlight_start_index + $query_part_match_index )) 
				highlight_end_index=$(( $highlight_start_index + ${#query_part} )) 
				region_highlight+=("$(($highlight_start_index - 1)) $(($highlight_end_index - 1)) $_history_substring_search_query_highlight") 
			fi
		done
	fi
	return 0
}
_history-substring-search-found () {
	BUFFER=$history[$_history_substring_search_matches[$_history_substring_search_match_index]] 
	_history_substring_search_query_highlight=$HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND 
}
_history-substring-search-has-next () {
	if [[ $_history_substring_search_match_index -lt $#_history_substring_search_matches ]]
	then
		return 0
	else
		_history_substring_search_process_raw_matches
		return $?
	fi
}
_history-substring-search-has-prev () {
	if [[ $_history_substring_search_match_index -gt 1 ]]
	then
		return 0
	else
		return 1
	fi
}
_history-substring-search-not-found () {
	BUFFER=$_history_substring_search_query 
	_history_substring_search_query_highlight=$HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND 
}
_history-substring-search-up-buffer () {
	local buflines XLBUFFER xlbuflines
	buflines=(${(f)BUFFER}) 
	XLBUFFER=$LBUFFER"x" 
	xlbuflines=(${(f)XLBUFFER}) 
	if [[ $#buflines -gt 1 && $CURSOR -ne $#BUFFER && $#xlbuflines -ne 1 ]]
	then
		zle up-line-or-history
		return 0
	fi
	return 1
}
_history-substring-search-up-history () {
	if [[ -z $_history_substring_search_query ]]
	then
		if [[ $HISTNO -eq 1 ]]
		then
			BUFFER= 
		else
			zle up-line-or-history
		fi
		return 0
	fi
	return 1
}
_history-substring-search-up-search () {
	_history_substring_search_refresh_display=1 
	if [[ $_history_substring_search_match_index -gt $#_history_substring_search_matches ]]
	then
		_history-substring-search-not-found
		return
	fi
	if _history-substring-search-has-next
	then
		_history_substring_search_match_index+=1 
		_history-substring-search-found
	else
		_history_substring_search_match_index+=1 
		_history-substring-search-not-found
	fi
	if [[ -o HIST_IGNORE_ALL_DUPS || -n $HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE ]]
	then
		return
	fi
	if [[ -o HIST_FIND_NO_DUPS && $BUFFER == $_history_substring_search_result ]]
	then
		_history-substring-search-up-search
	fi
}
_history_complete_word () {
	# undefined
	builtin autoload -XUz
}
_history_modifiers () {
	# undefined
	builtin autoload -XUz
}
_history_substring_search_process_raw_matches () {
	while [[ $_history_substring_search_raw_match_index -lt $#_history_substring_search_raw_matches ]]
	do
		_history_substring_search_raw_match_index+=1 
		local index=${_history_substring_search_raw_matches[$_history_substring_search_raw_match_index]} 
		if [[ ! -o HIST_IGNORE_ALL_DUPS && -n $HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE ]]
		then
			local entry=${history[$index]} 
			if [[ -z ${_history_substring_search_unique_filter[$entry]} ]]
			then
				_history_substring_search_unique_filter[$entry]=1 
				_history_substring_search_matches+=($index) 
				return 0
			fi
		else
			_history_substring_search_matches+=($index) 
			return 0
		fi
	done
	return 1
}
_host () {
	# undefined
	builtin autoload -XUz
}
_hostname () {
	# undefined
	builtin autoload -XUz
}
_hosts () {
	# undefined
	builtin autoload -XUz
}
_htop () {
	# undefined
	builtin autoload -XUz
}
_hwinfo () {
	# undefined
	builtin autoload -XUz
}
_iconv () {
	# undefined
	builtin autoload -XUz
}
_iconvconfig () {
	# undefined
	builtin autoload -XUz
}
_id () {
	# undefined
	builtin autoload -XUz
}
_ifconfig () {
	# undefined
	builtin autoload -XUz
}
_iftop () {
	# undefined
	builtin autoload -XUz
}
_ignored () {
	# undefined
	builtin autoload -XUz
}
_imagemagick () {
	# undefined
	builtin autoload -XUz
}
_in_vared () {
	# undefined
	builtin autoload -XUz
}
_inetadm () {
	# undefined
	builtin autoload -XUz
}
_init_d () {
	# undefined
	builtin autoload -XUz
}
_initctl () {
	# undefined
	builtin autoload -XUz
}
_install () {
	# undefined
	builtin autoload -XUz
}
_invoke-rc.d () {
	# undefined
	builtin autoload -XUz
}
_ionice () {
	# undefined
	builtin autoload -XUz
}
_iostat () {
	# undefined
	builtin autoload -XUz
}
_ip () {
	# undefined
	builtin autoload -XUz
}
_ipadm () {
	# undefined
	builtin autoload -XUz
}
_ipsec () {
	# undefined
	builtin autoload -XUz
}
_ipset () {
	# undefined
	builtin autoload -XUz
}
_iptables () {
	# undefined
	builtin autoload -XUz
}
_irssi () {
	# undefined
	builtin autoload -XUz
}
_ispell () {
	# undefined
	builtin autoload -XUz
}
_iwconfig () {
	# undefined
	builtin autoload -XUz
}
_jail () {
	# undefined
	builtin autoload -XUz
}
_jails () {
	# undefined
	builtin autoload -XUz
}
_java () {
	# undefined
	builtin autoload -XUz
}
_java_class () {
	# undefined
	builtin autoload -XUz
}
_jexec () {
	# undefined
	builtin autoload -XUz
}
_jls () {
	# undefined
	builtin autoload -XUz
}
_jobs () {
	# undefined
	builtin autoload -XUz
}
_jobs_bg () {
	# undefined
	builtin autoload -XUz
}
_jobs_builtin () {
	# undefined
	builtin autoload -XUz
}
_jobs_fg () {
	# undefined
	builtin autoload -XUz
}
_joe () {
	# undefined
	builtin autoload -XUz
}
_join () {
	# undefined
	builtin autoload -XUz
}
_jot () {
	# undefined
	builtin autoload -XUz
}
_jq () {
	# undefined
	builtin autoload -XUz
}
_kdeconnect () {
	# undefined
	builtin autoload -XUz
}
_kfmclient () {
	# undefined
	builtin autoload -XUz
}
_kill () {
	# undefined
	builtin autoload -XUz
}
_killall () {
	# undefined
	builtin autoload -XUz
}
_kld () {
	# undefined
	builtin autoload -XUz
}
_knock () {
	# undefined
	builtin autoload -XUz
}
_kpartx () {
	# undefined
	builtin autoload -XUz
}
_kvno () {
	# undefined
	builtin autoload -XUz
}
_last () {
	# undefined
	builtin autoload -XUz
}
_ld_debug () {
	# undefined
	builtin autoload -XUz
}
_ldap () {
	# undefined
	builtin autoload -XUz
}
_ldconfig () {
	# undefined
	builtin autoload -XUz
}
_ldd () {
	# undefined
	builtin autoload -XUz
}
_less () {
	# undefined
	builtin autoload -XUz
}
_lha () {
	# undefined
	builtin autoload -XUz
}
_libvirt () {
	# undefined
	builtin autoload -XUz
}
_lighttpd () {
	# undefined
	builtin autoload -XUz
}
_limit () {
	# undefined
	builtin autoload -XUz
}
_limits () {
	# undefined
	builtin autoload -XUz
}
_links () {
	# undefined
	builtin autoload -XUz
}
_lintian () {
	# undefined
	builtin autoload -XUz
}
_list () {
	# undefined
	builtin autoload -XUz
}
_list_files () {
	local stat f elt what dir
	local -a stylevals
	integer ok
	listfiles=() 
	listopts=() 
	zstyle -a ":completion:${curcontext}:" file-list stylevals || return 1
	case $WIDGETSTYLE in
		(*complete*) what=insert  ;;
		(*) what=list  ;;
	esac
	for elt in $stylevals
	do
		case $elt in
			(*($what|all|true|1|yes)*=<->) (( ${(P)#1} <= ${elt##*=} )) && (( ok = 1 ))
				break ;;
			([^=]#($what|all|true|1|yes)[^=]#) (( ok = 1 ))
				break ;;
		esac
	done
	(( ok )) || return 1
	zmodload -F zsh/stat b:zstat 2> /dev/null || return 1
	dir=${2:+$2/} 
	dir=${(Q)dir} 
	for f in ${(PQ)1}
	do
		if [[ ! -e "$dir$f" ]]
		then
			listfiles+=("$dir$f") 
			continue
		fi
		zstat -s -H stat -F "%b %e %H:%M" - "$dir$f" > /dev/null 2>&1
		listfiles+=("$stat[mode] ${(l:3:)stat[nlink]} ${(r:8:)stat[uid]}  ${(r:8:)stat[gid]} ${(l:8:)stat[size]} $stat[mtime] $f") 
	done
	(( ${#listfiles} )) && listopts=(-d listfiles -l -o match) 
	return 0
}
_lldb () {
	# undefined
	builtin autoload -XUz
}
_ln () {
	# undefined
	builtin autoload -XUz
}
_loadkeys () {
	# undefined
	builtin autoload -XUz
}
_locale () {
	# undefined
	builtin autoload -XUz
}
_localedef () {
	# undefined
	builtin autoload -XUz
}
_locales () {
	# undefined
	builtin autoload -XUz
}
_locate () {
	# undefined
	builtin autoload -XUz
}
_logical_volumes () {
	# undefined
	builtin autoload -XUz
}
_look () {
	# undefined
	builtin autoload -XUz
}
_losetup () {
	# undefined
	builtin autoload -XUz
}
_lp () {
	# undefined
	builtin autoload -XUz
}
_ls () {
	# undefined
	builtin autoload -XUz
}
_lsattr () {
	# undefined
	builtin autoload -XUz
}
_lsblk () {
	# undefined
	builtin autoload -XUz
}
_lscfg () {
	# undefined
	builtin autoload -XUz
}
_lsdev () {
	# undefined
	builtin autoload -XUz
}
_lslv () {
	# undefined
	builtin autoload -XUz
}
_lsof () {
	# undefined
	builtin autoload -XUz
}
_lspv () {
	# undefined
	builtin autoload -XUz
}
_lsusb () {
	# undefined
	builtin autoload -XUz
}
_lsvg () {
	# undefined
	builtin autoload -XUz
}
_ltrace () {
	# undefined
	builtin autoload -XUz
}
_lua () {
	# undefined
	builtin autoload -XUz
}
_luarocks () {
	# undefined
	builtin autoload -XUz
}
_lynx () {
	# undefined
	builtin autoload -XUz
}
_lz4 () {
	# undefined
	builtin autoload -XUz
}
_lzop () {
	# undefined
	builtin autoload -XUz
}
_mac_applications () {
	# undefined
	builtin autoload -XUz
}
_mac_files_for_application () {
	# undefined
	builtin autoload -XUz
}
_madison () {
	# undefined
	builtin autoload -XUz
}
_mail () {
	# undefined
	builtin autoload -XUz
}
_mailboxes () {
	# undefined
	builtin autoload -XUz
}
_main_complete () {
	-ftb-complete "$@"
}
_make () {
	# undefined
	builtin autoload -XUz
}
_make-kpkg () {
	# undefined
	builtin autoload -XUz
}
_man () {
	# undefined
	builtin autoload -XUz
}
_match () {
	# undefined
	builtin autoload -XUz
}
_math () {
	# undefined
	builtin autoload -XUz
}
_math_params () {
	# undefined
	builtin autoload -XUz
}
_matlab () {
	# undefined
	builtin autoload -XUz
}
_md5sum () {
	# undefined
	builtin autoload -XUz
}
_mdadm () {
	# undefined
	builtin autoload -XUz
}
_mdfind () {
	# undefined
	builtin autoload -XUz
}
_mdls () {
	# undefined
	builtin autoload -XUz
}
_mdutil () {
	# undefined
	builtin autoload -XUz
}
_members () {
	# undefined
	builtin autoload -XUz
}
_mencal () {
	# undefined
	builtin autoload -XUz
}
_menu () {
	# undefined
	builtin autoload -XUz
}
_mere () {
	# undefined
	builtin autoload -XUz
}
_mergechanges () {
	# undefined
	builtin autoload -XUz
}
_message () {
	# undefined
	builtin autoload -XUz
}
_mh () {
	# undefined
	builtin autoload -XUz
}
_mii-tool () {
	# undefined
	builtin autoload -XUz
}
_mime_types () {
	# undefined
	builtin autoload -XUz
}
_mixerctl () {
	# undefined
	builtin autoload -XUz
}
_mkdir () {
	# undefined
	builtin autoload -XUz
}
_mkfifo () {
	# undefined
	builtin autoload -XUz
}
_mknod () {
	# undefined
	builtin autoload -XUz
}
_mkshortcut () {
	# undefined
	builtin autoload -XUz
}
_mktemp () {
	# undefined
	builtin autoload -XUz
}
_mkzsh () {
	# undefined
	builtin autoload -XUz
}
_module () {
	# undefined
	builtin autoload -XUz
}
_module-assistant () {
	# undefined
	builtin autoload -XUz
}
_module_math_func () {
	# undefined
	builtin autoload -XUz
}
_modutils () {
	# undefined
	builtin autoload -XUz
}
_mondo () {
	# undefined
	builtin autoload -XUz
}
_monotone () {
	# undefined
	builtin autoload -XUz
}
_moosic () {
	# undefined
	builtin autoload -XUz
}
_mosh () {
	# undefined
	builtin autoload -XUz
}
_most_recent_file () {
	# undefined
	builtin autoload -XUz
}
_mount () {
	# undefined
	builtin autoload -XUz
}
_mozilla () {
	# undefined
	builtin autoload -XUz
}
_mpc () {
	# undefined
	builtin autoload -XUz
}
_mplayer () {
	# undefined
	builtin autoload -XUz
}
_mpv () {
	# undefined
	builtin autoload -XUz
}
_mt () {
	# undefined
	builtin autoload -XUz
}
_mtools () {
	# undefined
	builtin autoload -XUz
}
_mtr () {
	# undefined
	builtin autoload -XUz
}
_multi_parts () {
	# undefined
	builtin autoload -XUz
}
_mupdf () {
	# undefined
	builtin autoload -XUz
}
_mutt () {
	# undefined
	builtin autoload -XUz
}
_mv () {
	# undefined
	builtin autoload -XUz
}
_my_accounts () {
	# undefined
	builtin autoload -XUz
}
_myrepos () {
	# undefined
	builtin autoload -XUz
}
_mysql_utils () {
	# undefined
	builtin autoload -XUz
}
_mysqldiff () {
	# undefined
	builtin autoload -XUz
}
_nautilus () {
	# undefined
	builtin autoload -XUz
}
_nbsd_architectures () {
	# undefined
	builtin autoload -XUz
}
_ncftp () {
	# undefined
	builtin autoload -XUz
}
_nedit () {
	# undefined
	builtin autoload -XUz
}
_net_interfaces () {
	# undefined
	builtin autoload -XUz
}
_netcat () {
	# undefined
	builtin autoload -XUz
}
_netscape () {
	# undefined
	builtin autoload -XUz
}
_netstat () {
	# undefined
	builtin autoload -XUz
}
_networkmanager () {
	# undefined
	builtin autoload -XUz
}
_networksetup () {
	# undefined
	builtin autoload -XUz
}
_newsgroups () {
	# undefined
	builtin autoload -XUz
}
_next_label () {
	local __gopt __descr __spec
	__gopt=() 
	zparseopts -D -a __gopt 1 2 V J x
	if comptags -A "$1" curtag __spec
	then
		(( $#funcstack > _tags_level )) && _comp_tags="${_comp_tags% * }" 
		_tags_level=$#funcstack 
		_comp_tags="$_comp_tags $__spec " 
		if [[ "$curtag" = *[^\\]:* ]]
		then
			zformat -f __descr "${curtag#*:}" "d:$3"
			_description "$__gopt[@]" "${curtag%:*}" "$2" "$__descr"
			curtag="${curtag%:*}" 
			set -A $2 "${(P@)2}" "${(@)argv[4,-1]}"
		else
			_description "$__gopt[@]" "$curtag" "$2" "$3"
			set -A $2 "${(@)argv[4,-1]}" "${(P@)2}"
		fi
		return 0
	fi
	return 1
}
_next_tags () {
	# undefined
	builtin autoload -XUz
}
_nginx () {
	# undefined
	builtin autoload -XUz
}
_ngrep () {
	# undefined
	builtin autoload -XUz
}
_nice () {
	# undefined
	builtin autoload -XUz
}
_nkf () {
	# undefined
	builtin autoload -XUz
}
_nl () {
	# undefined
	builtin autoload -XUz
}
_nm () {
	# undefined
	builtin autoload -XUz
}
_nmap () {
	# undefined
	builtin autoload -XUz
}
_normal () {
	local _comp_command1 _comp_command2 _comp_command precommand
	local -A opts
	zparseopts -A opts -D - P p+:-=precommand s
	(( $+opts[-s] )) || _compskip= 
	(( $+opts[-P] )) && precommands=() 
	(( $#precommand )) && precommands+=(${precommand#-p}) 
	if [[ -o BANG_HIST && ( ( $words[CURRENT] = \!*: && -z $compstate[quote] ) || ( $words[CURRENT] = \"\!*: && $compstate[all_quotes] = \" ) ) ]]
	then
		PREFIX=${PREFIX//\\!/!} 
		compset -P '*:'
		_history_modifiers h
		return
	fi
	if [[ CURRENT -eq 1 ]]
	then
		curcontext="${curcontext%:*:*}:-command-:" 
		comp="$_comps[-command-]" 
		[[ -n "$comp" ]] && eval "$comp" && return
		return 1
	fi
	_set_command
	_dispatch ${(k)opts[-s]} "$_comp_command" "$_comp_command1" "$_comp_command2" -default-
}
_nothing () {
	# undefined
	builtin autoload -XUz
}
_npm () {
	# undefined
	builtin autoload -XUz
}
_nslookup () {
	# undefined
	builtin autoload -XUz
}
_numfmt () {
	# undefined
	builtin autoload -XUz
}
_nvram () {
	# undefined
	builtin autoload -XUz
}
_objdump () {
	# undefined
	builtin autoload -XUz
}
_object_classes () {
	# undefined
	builtin autoload -XUz
}
_object_files () {
	# undefined
	builtin autoload -XUz
}
_obsd_architectures () {
	# undefined
	builtin autoload -XUz
}
_od () {
	# undefined
	builtin autoload -XUz
}
_okular () {
	# undefined
	builtin autoload -XUz
}
_oldlist () {
	[[ _matcher_num -gt 1 || $_lastcomp[nmatches] -eq 0 ]] && return 1
	local list
	zstyle -s ":completion:${curcontext}:" old-list list
	if [[ -n $compstate[old_list] && $list != never && $LASTWIDGET != _complete_help && $WIDGET != _complete_help ]]
	then
		if [[ $WIDGETSTYLE = *list* && ( $list = always || $list != shown ) ]]
		then
			compstate[old_list]=keep 
			return 0
		elif [[ $list = *${_lastcomp[completer]}* ]]
		then
			[[ "$_lastcomp[insert]" = unambig* ]] && compstate[to_end]=single 
			compstate[old_list]=keep 
			if [[ -o automenu ]]
			then
				compstate[insert]=menu 
			else
				compadd -Qs "$SUFFIX" - "$PREFIX"
			fi
			return 0
		fi
	fi
	if [[ -z $compstate[old_insert] && -n $compstate[old_list] && ( $_lastcomp[nmatches] -ne 0 || $WIDGET != $LASTWIDGET ) && $LASTWIDGET != _complete_help && $WIDGET != _complete_help ]]
	then
		compstate[old_list]=keep 
		return 0
	elif [[ $WIDGETSTYLE = *complete(|-prefix|-word) ]] && zstyle -T ":completion:${curcontext}:" old-menu
	then
		if [[ -n $compstate[old_insert] ]]
		then
			compstate[old_list]=keep 
			if [[ $WIDGETSTYLE = *reverse* ]]
			then
				compstate[insert]=$(( compstate[old_insert] - 1 )) 
			else
				compstate[insert]=$(( compstate[old_insert] + 1 )) 
			fi
		else
			return 1
		fi
		return 0
	fi
	return 1
}
_open () {
	# undefined
	builtin autoload -XUz
}
_openstack () {
	# undefined
	builtin autoload -XUz
}
_opkg () {
	# undefined
	builtin autoload -XUz
}
_options () {
	# undefined
	builtin autoload -XUz
}
_options_set () {
	# undefined
	builtin autoload -XUz
}
_options_unset () {
	# undefined
	builtin autoload -XUz
}
_osascript () {
	# undefined
	builtin autoload -XUz
}
_osc () {
	# undefined
	builtin autoload -XUz
}
_other_accounts () {
	# undefined
	builtin autoload -XUz
}
_otool () {
	# undefined
	builtin autoload -XUz
}
_pack () {
	# undefined
	builtin autoload -XUz
}
_pandoc () {
	# undefined
	builtin autoload -XUz
}
_parameter () {
	# undefined
	builtin autoload -XUz
}
_parameters () {
	# undefined
	builtin autoload -XUz
}
_pass () {
	# undefined
	builtin autoload -XUz
}
_paste () {
	# undefined
	builtin autoload -XUz
}
_patch () {
	# undefined
	builtin autoload -XUz
}
_patchutils () {
	# undefined
	builtin autoload -XUz
}
_path_commands () {
	# undefined
	builtin autoload -XUz
}
_path_files () {
	local -a match mbegin mend
	local splitchars
	if zstyle -s ":completion:${curcontext}:" file-split-chars splitchars
	then
		compset -P "*[${(q)splitchars}]"
	fi
	if _have_glob_qual $PREFIX
	then
		local ret=1 
		compset -p ${#match[1]}
		compset -S '[^\)\|\~]#(|\))'
		if [[ $_comp_caller_options[extendedglob] == on ]] && compset -P '\#'
		then
			_globflags && ret=0 
		else
			if [[ $_comp_caller_options[extendedglob] == on ]]
			then
				local -a flags
				flags=('#:introduce glob flag') 
				_describe -t globflags "glob flag" flags -Q -S '' && ret=0 
			fi
			_globquals && ret=0 
		fi
		return ret
	fi
	local linepath realpath donepath prepath testpath exppath skips skipped
	local tmp1 tmp2 tmp3 tmp4 i orig eorig pre suf tpre tsuf opre osuf cpre
	local pats haspats ignore pfx pfxsfx sopt gopt opt sdirs ignpar cfopt listsfx
	local nm=$compstate[nmatches] menu matcher mopts sort mid accex fake 
	local listfiles listopts tmpdisp origtmp1 Uopt
	local accept_exact_dirs path_completion
	integer npathcheck
	local -a Mopts
	typeset -U prepaths exppaths
	exppaths=() 
	zparseopts -a mopts 'P:=pfx' 'S:=pfxsfx' 'q=pfxsfx' 'r:=pfxsfx' 'R:=pfxsfx' 'W:=prepaths' 'F:=ignore' 'M+:=matcher' J+: V+: x+: X+: 1 2 o+: n 'f=tmp1' '/=tmp1' 'g+:-=tmp1'
	sopt="-${(@j::M)${(@)tmp1#-}#?}" 
	(( $tmp1[(I)-[/g]*] )) && haspats=yes 
	(( $tmp1[(I)-g*] )) && gopt=yes 
	if (( $tmp1[(I)-/] ))
	then
		pats="${(@)${(@M)tmp1:#-g*}#-g}" 
		pats=('*(-/)' ${${(z):-x $pats}[2,-1]}) 
	else
		pats="${(@)${(@M)tmp1:#-g*}#-g}" 
		pats=(${${(z):-x $pats}[2,-1]}) 
	fi
	pats=("${(@)pats:# #}") 
	if (( $#pfx ))
	then
		compset -P "${(b)pfx[2]}" || pfxsfx=("$pfx[@]" "$pfxsfx[@]") 
	fi
	if (( $#prepaths ))
	then
		tmp1="${prepaths[2]}" 
		if [[ "$tmp1[1]" = '(' ]]
		then
			prepaths=(${^=tmp1[2,-2]%/}/) 
		elif [[ "$tmp1[1]" = '/' ]]
		then
			prepaths=("${tmp1%/}/") 
		else
			prepaths=(${(P)^tmp1%/}/) 
			(( ! $#prepaths )) && prepaths=(${tmp1%/}/) 
		fi
		(( ! $#prepaths )) && prepaths=('') 
	else
		prepaths=('') 
	fi
	if (( $#ignore ))
	then
		if [[ "${ignore[2]}" = \(* ]]
		then
			ignore=(${=ignore[2][2,-2]}) 
		else
			ignore=(${(P)ignore[2]}) 
		fi
	fi
	if [[ "$sopt" = -(f|) ]]
	then
		if [[ -z "$gopt" ]]
		then
			sopt='-f' 
			pats=('*') 
		else
			unset sopt
		fi
	fi
	if (( ! $mopts[(I)-[JVX]] ))
	then
		local expl
		if [[ -z "$gopt" && "$sopt" = -/ ]]
		then
			_description directories expl directory
		else
			_description files expl file
		fi
		tmp1=$expl[(I)-M*] 
		if (( tmp1 ))
		then
			if (( $#matcher ))
			then
				matcher[2]="$matcher[2] $expl[1+tmp1]" 
			else
				matcher=(-M "$expl[1+tmp1]") 
			fi
		fi
		mopts=("$mopts[@]" "$expl[@]") 
	fi
	[[ -z "$_comp_no_ignore" && $#ignore -eq 0 && ( -z $gopt || "$pats" = \ #\*\ # ) && -n $FIGNORE ]] && ignore=("?*${^fignore[@]}") 
	if (( $#ignore ))
	then
		_comp_ignore=("$_comp_ignore[@]" "$ignore[@]") 
		(( $mopts[(I)-F] )) || mopts=("$mopts[@]" -F _comp_ignore) 
	fi
	if [[ $#matcher -eq 0 && -o nocaseglob ]]
	then
		matcher=(-M 'm:{a-zA-Z}={A-Za-z}') 
	fi
	if (( $#matcher ))
	then
		mopts=("$mopts[@]" "$matcher[@]") 
	fi
	if zstyle -s ":completion:${curcontext}:" file-sort tmp1
	then
		case "$tmp1" in
			(*size*) sort=oL  ;;
			(*links*) sort=ol  ;;
			(*(time|date|modi)*) sort=om  ;;
			(*access*) sort=oa  ;;
			(*(inode|change)*) sort=oc  ;;
			(*) sort=on  ;;
		esac
		[[ "$tmp1" = *rev* ]] && sort[1]=O 
		[[ "$tmp1" = *follow* ]] && sort="-${sort}-" 
		if [[ "$sort" = on ]]
		then
			sort= 
		else
			mopts=(-o nosort "${mopts[@]}") 
			tmp2=() 
			for tmp1 in "$pats[@]"
			do
				if _have_glob_qual "$tmp1" complete
				then
					tmp2+=("${match[1]}#q${sort})(${match[5]})") 
				else
					tmp2+=("${tmp1}(${sort})") 
				fi
			done
			pats=("$tmp2[@]") 
		fi
	fi
	if zstyle -t ":completion:${curcontext}:paths" squeeze-slashes
	then
		skips='((.|..|)/)##' 
	else
		skips='((.|..)/)##' 
	fi
	zstyle -s ":completion:${curcontext}:paths" special-dirs sdirs
	zstyle -t ":completion:${curcontext}:paths" list-suffixes && listsfx=yes 
	[[ "$pats" = ((|*[[:blank:]])\*(|[[:blank:]]*|\([^[:blank:]]##\))|*\([^[:blank:]]#/[^[:blank:]]#\)*) ]] && sopt=$sopt/ 
	zstyle -a ":completion:${curcontext}:paths" accept-exact accex
	zstyle -a ":completion:${curcontext}:" fake-files fake
	zstyle -s ":completion:${curcontext}:" ignore-parents ignpar
	zstyle -t ":completion:${curcontext}:paths" accept-exact-dirs && accept_exact_dirs=1 
	zstyle -T ":completion:${curcontext}:paths" path-completion && path_completion=1 
	if [[ -n "$compstate[pattern_match]" ]]
	then
		if {
				[[ -z "$SUFFIX" ]] && _have_glob_qual "$PREFIX" complete
			} || _have_glob_qual "$SUFFIX" complete
		then
			tmp3=${match[5]} 
			if [[ -n "$SUFFIX" ]]
			then
				SUFFIX=${match[2]} 
			else
				PREFIX=${match[2]} 
			fi
			tmp2=() 
			for tmp1 in "$pats[@]"
			do
				if _have_glob_qual "$tmp1" complete
				then
					tmp2+=("${match[1]}${tmp3}${match[5]})") 
				else
					tmp2+=("${tmp1}(${tmp3})") 
				fi
			done
			pats=("$tmp2[@]") 
		fi
	fi
	pre="$PREFIX" 
	suf="$SUFFIX" 
	opre="$PREFIX" 
	osuf="$SUFFIX" 
	orig="${PREFIX}${SUFFIX}" 
	eorig="$orig" 
	[[ $compstate[insert] = (*menu|[0-9]*) || -n "$_comp_correct" || ( -n "$compstate[pattern_match]" && "${orig#\~}" != (|*[^\\])[][*?#~^\|\<\>]* ) ]] && menu=yes 
	if [[ -n "$_comp_correct" ]]
	then
		cfopt=- 
		Uopt=-U 
	else
		Mopts=(-M "r:|/=* r:|=*") 
	fi
	if [[ "$pre" = [^][*?#^\|\<\>\\]#(\`[^\`]#\`|\$)*/* && "$compstate[quote]" != \' ]]
	then
		linepath="${(M)pre##*\$[^/]##/}" 
		() {
			setopt localoptions nounset
			eval 'realpath=${(e)~linepath}' 2> /dev/null
		}
		[[ -z "$realpath" || "$realpath" = "$linepath" ]] && return 1
		pre="${pre#${linepath}}" 
		i='[^/]' 
		i="${#linepath//$i}" 
		orig="${orig[1,(in:i:)/][1,-2]}" 
		donepath= 
		prepaths=('') 
	elif [[ "$pre[1]" = \~ && "$compstate[quote]" = (|\`) ]]
	then
		linepath="${pre[2,-1]%%/*}" 
		if [[ -z "$linepath" ]]
		then
			realpath="${HOME%/}/" 
		elif [[ "$linepath" = ([-+]|)[0-9]## ]]
		then
			if [[ "$linepath" != [-+]* ]]
			then
				tmp1="$linepath" 
			else
				if [[ "$linepath" = -* ]]
				then
					tmp1=$(( $#dirstack $linepath )) 
				else
					tmp1=$linepath[2,-1] 
				fi
				[[ -o pushdminus ]] && tmp1=$(( $#dirstack - $tmp1 )) 
			fi
			if (( ! tmp1 ))
			then
				realpath=$PWD/ 
			elif [[ tmp1 -le $#dirstack ]]
			then
				realpath=$dirstack[tmp1]/ 
			else
				_message 'not enough directory stack entries'
				return 1
			fi
		elif [[ "$linepath" = [-+] ]]
		then
			realpath=${~:-\~$linepath}/ 
		else
			eval "realpath=~${linepath}/" 2> /dev/null
			if [[ -z "$realpath" ]]
			then
				_message "unknown user \`$linepath'"
				return 1
			fi
		fi
		linepath="~${linepath}/" 
		[[ "$realpath" = "$linepath" ]] && return 1
		pre="${pre#*/}" 
		orig="${orig#*/}" 
		donepath= 
		prepaths=('') 
	else
		linepath= 
		realpath= 
		if zstyle -s ":completion:${curcontext}:" preserve-prefix tmp1 && [[ -n "$tmp1" && "$pre" = (#b)(${~tmp1})* ]]
		then
			pre="$pre[${#match[1]}+1,-1]" 
			orig="$orig[${#match[1]}+1,-1]" 
			donepath="$match[1]" 
			prepaths=('') 
		elif [[ "$pre[1]" = / ]]
		then
			pre="$pre[2,-1]" 
			orig="$orig[2,-1]" 
			donepath='/' 
			prepaths=('') 
		else
			[[ "$pre" = (.|..)/* ]] && prepaths=('') 
			donepath= 
		fi
	fi
	for prepath in "$prepaths[@]"
	do
		skipped= 
		cpre= 
		if [[ ( -n $accept_exact_dirs || -z $path_completion ) && ${pre} = (#b)(*)/([^/]#) ]]
		then
			tmp1=${match[1]} 
			tpre=${match[2]} 
			tmp2=$tmp1 
			tmp1=${tmp1//(#b)\\(?)/$match[1]} 
			tpre=${tpre//(#b)\\([^\\\]\[\^\~\(\)\#\*\?])/$match[1]} 
			tmp3=${donepath//(#b)\\(?)/$match[1]} 
			while true
			do
				if [[ -z $path_completion || -d $prepath$realpath$tmp3$tmp2 ]]
				then
					tmp3=$tmp3$tmp1/ 
					donepath=${tmp3//(#b)([\\\]\[\^\~\(\)\#\*\?])/\\$match[1]} 
					pre=$tpre 
					break
				elif [[ $tmp1 = (#b)(*)/([^/]#) ]]
				then
					tmp1=$match[1] 
					tpre=$match[2]/$tpre 
				else
					break
				fi
			done
		fi
		tpre="$pre" 
		tsuf="$suf" 
		testpath="${donepath//(#b)\\([\\\]\[\^\~\(\)\#\*\?])/$match[1]}" 
		tmp2="${(M)tpre##${~skips}}" 
		tpre="${tpre#$tmp2}" 
		tmp1=("$prepath$realpath$donepath$tmp2") 
		(( npathcheck = 0 ))
		while true
		do
			origtmp1=("${tmp1[@]}") 
			if [[ "$tpre" = */* ]]
			then
				PREFIX="${tpre%%/*}" 
				SUFFIX= 
			else
				PREFIX="${tpre}" 
				SUFFIX="${tsuf%%/*}" 
			fi
			tmp2=("$tmp1[@]") 
			if [[ "$tpre$tsuf" = (#b)*/(*) ]]
			then
				if [[ -n "$fake${match[1]}" ]]
				then
					compfiles -P$cfopt tmp1 accex "$skipped" "$_matcher $matcher[2]" "$sdirs" fake
				else
					compfiles -P$cfopt tmp1 accex "$skipped" "$_matcher $matcher[2]" '' fake
				fi
			elif [[ "$sopt" = *[/f]* ]]
			then
				compfiles -p$cfopt tmp1 accex "$skipped" "$_matcher $matcher[2]" "$sdirs" fake "$pats[@]"
			else
				compfiles -p$cfopt tmp1 accex "$skipped" "$_matcher $matcher[2]" '' fake "$pats[@]"
			fi
			tmp1=($~tmp1)  2> /dev/null
			if [[ -n "$PREFIX$SUFFIX" ]]
			then
				if (( ! $#tmp1 && npathcheck == 0 ))
				then
					(( npathcheck = 1 ))
					for tmp3 in "$tmp2[@]"
					do
						if [[ -n $tmp3 && $tmp3 != */ ]]
						then
							tmp3+=/ 
						fi
						if [[ -e "$tmp3${(Q)PREFIX}${(Q)SUFFIX}" ]]
						then
							(( npathcheck = 2 ))
						fi
					done
					if (( npathcheck == 2 ))
					then
						tmp1=("$origtmp1[@]") 
						continue
					fi
				fi
				if (( ! $#tmp1 ))
				then
					tmp2=(${^${tmp2:#/}}/$PREFIX$SUFFIX) 
				elif [[ "$tmp1[1]" = */* ]]
				then
					if [[ -n "$_comp_correct" ]]
					then
						tmp2=("$tmp1[@]") 
						builtin compadd -D tmp1 "$matcher[@]" - "${(@)tmp1:t}"
						if [[ $#tmp1 -eq 0 ]]
						then
							tmp1=("$tmp2[@]") 
							compadd -D tmp1 "$matcher[@]" - "${(@)tmp2:t}"
						fi
					else
						tmp2=("$tmp1[@]") 
						compadd -D tmp1 "$matcher[@]" - "${(@)tmp1:t}"
					fi
				else
					tmp2=('') 
					compadd -D tmp1 "$matcher[@]" -a tmp1
				fi
				if (( ! $#tmp1 ))
				then
					if [[ "$tmp2[1]" = */* ]]
					then
						tmp2=("${(@)tmp2#${prepath}${realpath}}") 
						if [[ "$tmp2[1]" = */* ]]
						then
							tmp2=("${(@)tmp2:h}") 
							compquote tmp2
							if [[ "$tmp2" = */ ]]
							then
								exppaths=("$exppaths[@]" ${^tmp2}${tpre}${tsuf}) 
							else
								exppaths=("$exppaths[@]" ${^tmp2}/${tpre}${tsuf}) 
							fi
						elif [[ ${tpre}${tsuf} = */* ]]
						then
							exppaths=("$exppaths[@]" ${tpre}${tsuf}) 
						fi
					fi
					continue 2
				fi
			elif (( ! $#tmp1 ))
			then
				if [[ -z "$tpre$tsuf" && -n "$pre$suf" ]]
				then
					pfxsfx=(-S '' "$pfxsfx[@]") 
				elif [[ -n "$haspats" && -z "$tpre$tsuf$suf" && "$pre" = */ ]]
				then
					PREFIX="${opre}" 
					SUFFIX="${osuf}" 
					compadd -nQS '' - "$linepath$donepath$orig"
					tmp4=- 
				fi
				continue 2
			fi
			if [[ -n "$ignpar" && -z "$_comp_no_ignore" && "$tpre$tsuf" != */* && $#tmp1 -ne 0 && ( "$ignpar" != *dir* || "$pats" = '*(-/)' ) && ( "$ignpar" != *..* || "$tmp1[1]" = *../* ) ]]
			then
				compfiles -i tmp1 ignore "$ignpar" "$prepath$realpath$donepath"
				_comp_ignore+=(${(@)ignore#$prepath$realpath$donepath}) 
				(( $#_comp_ignore && ! $mopts[(I)-F] )) && mopts=("$mopts[@]" -F _comp_ignore) 
			fi
			if [[ "$tpre" = */* ]]
			then
				tpre="${tpre#*/}" 
			elif [[ "$tsuf" = */* ]]
			then
				tpre="${tsuf#*/}" 
				tsuf= 
			else
				break
			fi
			tmp2="${(M)tpre##${~skips}}" 
			if [[ -n "$tmp2" ]]
			then
				skipped="/$tmp2" 
				tpre="${tpre#$tmp2}" 
			else
				skipped=/ 
			fi
			(( npathcheck = 0 ))
		done
		tmp3="$pre$suf" 
		tpre="$pre" 
		tsuf="$suf" 
		if [[ -n "${prepath}${realpath}${testpath}" ]]
		then
			if [[ -o nocaseglob ]]
			then
				tmp1=("${(@)tmp1#(#i)${prepath}${realpath}${testpath}}") 
			else
				tmp1=("${(@)tmp1#${prepath}${realpath}${testpath}}") 
			fi
		fi
		while true
		do
			compfiles -r tmp1 "${(Q)tmp3}"
			tmp4=$? 
			if [[ "$tpre" = */* ]]
			then
				tmp2="${cpre}${tpre%%/*}" 
				PREFIX="${linepath}${donepath}${tmp2}" 
				SUFFIX="/${tpre#*/}${tsuf#*/}" 
			else
				tmp2="${cpre}${tpre}" 
				PREFIX="${linepath}${donepath}${tmp2}" 
				SUFFIX="${tsuf}" 
			fi
			if (( tmp4 ))
			then
				tmp2="$testpath" 
				if [[ -n "$linepath" ]]
				then
					compquote -p tmp2 tmp1
				elif [[ -n "$tmp2" ]]
				then
					compquote -p tmp1
					compquote tmp2
				else
					compquote tmp1 tmp2
				fi
				if [[ -z "$_comp_correct" && "$compstate[pattern_match]" = \* && -n "$listsfx" && "$tmp2" = (|*[^\\])[][*?#~^\|\<\>]* ]]
				then
					PREFIX="$opre" 
					SUFFIX="$osuf" 
				fi
				if [[ -z "$compstate[insert]" ]] || {
						! zstyle -t ":completion:${curcontext}:paths" expand suffix && [[ -z "$listsfx" && ( -n "$_comp_correct" || -z "$compstate[pattern_match]" || "$SUFFIX" != */* || "${SUFFIX#*/}" = (|*[^\\])[][*?#~^\|\<\>]* ) ]]
					}
				then
					(( tmp4 )) && zstyle -t ":completion:${curcontext}:paths" ambiguous && compstate[to_end]= 
					if [[ "$tmp3" = */* ]]
					then
						if [[ -z "$listsfx" || "$tmp3" != */?* ]]
						then
							tmp1=("${(@)tmp1%%/*}") 
							_list_files tmp1 "$prepath$realpath$testpath"
							compadd $Uopt -Qf "$mopts[@]" -p "${Uopt:+$IPREFIX}$linepath$tmp2" -s "/${tmp3#*/}${Uopt:+$ISUFFIX}" -W "$prepath$realpath$testpath" "$pfxsfx[@]" $Mopts $listopts -a tmp1
						else
							tmp1=("${(@)^tmp1%%/*}/${tmp3#*/}") 
							_list_files tmp1 "$prepath$realpath$testpath"
							compadd $Uopt -Qf "$mopts[@]" -p "${Uopt:+$IPREFIX}$linepath$tmp2" -s "${Uopt:+$ISUFFIX}" -W "$prepath$realpath$testpath" "$pfxsfx[@]" $Mopts $listopts -a tmp1
						fi
					else
						_list_files tmp1 "$prepath$realpath$testpath"
						compadd $Uopt -Qf "$mopts[@]" -p "${Uopt:+$IPREFIX}$linepath$tmp2" -s "${Uopt:+$ISUFFIX}" -W "$prepath$realpath$testpath" "$pfxsfx[@]" $Mopts $listopts -a tmp1
					fi
				else
					if [[ "$tmp3" = */* ]]
					then
						tmp4=($Uopt -Qf "$mopts[@]" -p "${Uopt:+$IPREFIX}$linepath$tmp2" -W "$prepath$realpath$testpath" "$pfxsfx[@]" $Mopts) 
						if [[ -z "$listsfx" ]]
						then
							for i in "$tmp1[@]"
							do
								tmpdisp=("$i") 
								_list_files tmpdisp "$prepath$realpath$testpath"
								compadd "$tmp4[@]" -s "${Uopt:+$ISUFFIX}" $listopts - "$tmpdisp"
							done
						else
							[[ -n "$compstate[pattern_match]" ]] && SUFFIX="${SUFFIX:s./.*/}*" 
							for i in "$tmp1[@]"
							do
								_list_files i "$prepath$realpath$testpath"
								compadd "$tmp4[@]" $listopts - "$i"
							done
						fi
					else
						_list_files tmp1 "$prepath$realpath$testpath"
						compadd $Uopt -Qf "$mopts[@]" -p "${Uopt:+$IPREFIX}$linepath$tmp2" -s "${Uopt:+$ISUFFIX}" -W "$prepath$realpath$testpath" "$pfxsfx[@]" $Mopts $listopts -a tmp1
					fi
				fi
				tmp4=- 
				break
			fi
			if [[ "$tmp3" != */* ]]
			then
				tmp4= 
				break
			fi
			testpath="${testpath}${tmp1[1]%%/*}/" 
			tmp3="${tmp3#*/}" 
			if [[ "$tpre" = */* ]]
			then
				if [[ -z "$_comp_correct" && -n "$compstate[pattern_match]" && "$tmp2" = (|*[^\\])[][*?#~^\|\<\>]* ]]
				then
					cpre="${cpre}${tmp1[1]%%/*}/" 
				else
					cpre="${cpre}${tpre%%/*}/" 
				fi
				tpre="${tpre#*/}" 
			elif [[ "$tsuf" = */* ]]
			then
				[[ "$tsuf" != /* ]] && mid="$testpath" 
				if [[ -z "$_comp_correct" && -n "$compstate[pattern_match]" && "$tmp2" = (|*[^\\])[][*?#~^\|\<\>]* ]]
				then
					cpre="${cpre}${tmp1[1]%%/*}/" 
				else
					cpre="${cpre}${tpre}/" 
				fi
				tpre="${tsuf#*/}" 
				tsuf= 
			else
				tpre= 
				tsuf= 
			fi
			tmp1=("${(@)tmp1#*/}") 
		done
		if [[ -z "$tmp4" ]]
		then
			if [[ "$mid" = */ ]]
			then
				PREFIX="${opre}" 
				SUFFIX="${osuf}" 
				tmp4="${testpath#${mid}}" 
				if [[ $mid = */*/* ]]
				then
					tmp3="${mid%/*/}" 
					tmp2="${${mid%/}##*/}" 
					if [[ -n "$linepath" ]]
					then
						compquote -p tmp3
					else
						compquote tmp3
					fi
					compquote tmp4 tmp2 tmp1
					for i in "$tmp1[@]"
					do
						_list_files tmp2 "$prepath$realpath${mid%/*/}"
						compadd $Uopt -Qf "$mopts[@]" -p "${Uopt:+$IPREFIX}$linepath$tmp3/" -s "/$tmp4$i${Uopt:+$ISUFFIX}" -W "$prepath$realpath${mid%/*/}/" "$pfxsfx[@]" $Mopts $listopts - "$tmp2"
					done
				else
					tmp2="${${mid%/}##*/}" 
					compquote tmp4 tmp2 tmp1
					for i in "$tmp1[@]"
					do
						_list_files tmp2 "$prepath$realpath${mid%/*/}"
						compadd $Uopt -Qf "$mopts[@]" -p "${Uopt:+$IPREFIX}$linepath" -s "/$tmp4$i${Uopt:+$ISUFFIX}" -W "$prepath$realpath" "$pfxsfx[@]" $Mopts $listopts - "$tmp2"
					done
				fi
			else
				if [[ "$osuf" = */* ]]
				then
					PREFIX="${opre}${osuf}" 
					SUFFIX= 
				else
					PREFIX="${opre}" 
					SUFFIX="${osuf}" 
				fi
				tmp4="$testpath" 
				if [[ -n "$linepath" ]]
				then
					compquote -p tmp4 tmp1
				elif [[ -n "$tmp4" ]]
				then
					compquote -p tmp1
					compquote tmp4
				else
					compquote tmp4 tmp1
				fi
				if [[ -z "$_comp_correct" && -n "$compstate[pattern_match]" && "${PREFIX#\~}$SUFFIX" = (|*[^\\])[][*?#~^\|\<\>]* ]]
				then
					tmp1=("$linepath$tmp4${(@)^tmp1}") 
					_list_files tmp1 "$prepath$realpath"
					compadd -Qf -W "$prepath$realpath" "$pfxsfx[@]" "$mopts[@]" -M "r:|/=* r:|=*" $listopts -a tmp1
				else
					_list_files tmp1 "$prepath$realpath$testpath"
					compadd $Uopt -Qf -p "${Uopt:+$IPREFIX}$linepath$tmp4" -s "${Uopt:+$ISUFFIX}" -W "$prepath$realpath$testpath" "$pfxsfx[@]" "$mopts[@]" $Mopts $listopts -a tmp1
				fi
			fi
		fi
	done
	if [[ _matcher_num -eq ${#_matchers} ]] && zstyle -t ":completion:${curcontext}:paths" expand prefix && [[ nm -eq compstate[nmatches] && $#exppaths -ne 0 && "$linepath$exppaths" != "$eorig" ]]
	then
		PREFIX="${opre}" 
		SUFFIX="${osuf}" 
		compadd -Q "$mopts[@]" -S '' -M "r:|/=* r:|=*" -p "$linepath" -a exppaths
	fi
	[[ nm -ne compstate[nmatches] ]]
}
_pax () {
	# undefined
	builtin autoload -XUz
}
_pbcopy () {
	# undefined
	builtin autoload -XUz
}
_pbm () {
	# undefined
	builtin autoload -XUz
}
_pbuilder () {
	# undefined
	builtin autoload -XUz
}
_pdf () {
	# undefined
	builtin autoload -XUz
}
_pdftk () {
	# undefined
	builtin autoload -XUz
}
_perforce () {
	# undefined
	builtin autoload -XUz
}
_perl () {
	# undefined
	builtin autoload -XUz
}
_perl_basepods () {
	# undefined
	builtin autoload -XUz
}
_perl_modules () {
	# undefined
	builtin autoload -XUz
}
_perldoc () {
	# undefined
	builtin autoload -XUz
}
_pfctl () {
	# undefined
	builtin autoload -XUz
}
_pfexec () {
	# undefined
	builtin autoload -XUz
}
_pgrep () {
	# undefined
	builtin autoload -XUz
}
_php () {
	# undefined
	builtin autoload -XUz
}
_physical_volumes () {
	# undefined
	builtin autoload -XUz
}
_pick_variant () {
	# undefined
	builtin autoload -XUz
}
_picocom () {
	# undefined
	builtin autoload -XUz
}
_pidof () {
	# undefined
	builtin autoload -XUz
}
_pids () {
	# undefined
	builtin autoload -XUz
}
_pine () {
	# undefined
	builtin autoload -XUz
}
_ping () {
	# undefined
	builtin autoload -XUz
}
_pip () {
	# undefined
	builtin autoload -XUz
}
_piuparts () {
	# undefined
	builtin autoload -XUz
}
_pkg-config () {
	# undefined
	builtin autoload -XUz
}
_pkg5 () {
	# undefined
	builtin autoload -XUz
}
_pkg_instance () {
	# undefined
	builtin autoload -XUz
}
_pkgadd () {
	# undefined
	builtin autoload -XUz
}
_pkgin () {
	# undefined
	builtin autoload -XUz
}
_pkginfo () {
	# undefined
	builtin autoload -XUz
}
_pkgrm () {
	# undefined
	builtin autoload -XUz
}
_pkgtool () {
	# undefined
	builtin autoload -XUz
}
_plutil () {
	# undefined
	builtin autoload -XUz
}
_pmap () {
	# undefined
	builtin autoload -XUz
}
_pon () {
	# undefined
	builtin autoload -XUz
}
_portaudit () {
	# undefined
	builtin autoload -XUz
}
_portlint () {
	# undefined
	builtin autoload -XUz
}
_portmaster () {
	# undefined
	builtin autoload -XUz
}
_ports () {
	# undefined
	builtin autoload -XUz
}
_portsnap () {
	# undefined
	builtin autoload -XUz
}
_postfix () {
	# undefined
	builtin autoload -XUz
}
_postgresql () {
	# undefined
	builtin autoload -XUz
}
_postscript () {
	# undefined
	builtin autoload -XUz
}
_powerd () {
	# undefined
	builtin autoload -XUz
}
_precommand () {
	# undefined
	builtin autoload -XUz
}
_prefix () {
	# undefined
	builtin autoload -XUz
}
_print () {
	# undefined
	builtin autoload -XUz
}
_printenv () {
	# undefined
	builtin autoload -XUz
}
_printers () {
	# undefined
	builtin autoload -XUz
}
_process_names () {
	# undefined
	builtin autoload -XUz
}
_procstat () {
	# undefined
	builtin autoload -XUz
}
_prompt () {
	# undefined
	builtin autoload -XUz
}
_prove () {
	# undefined
	builtin autoload -XUz
}
_prstat () {
	# undefined
	builtin autoload -XUz
}
_ps () {
	# undefined
	builtin autoload -XUz
}
_ps1234 () {
	# undefined
	builtin autoload -XUz
}
_pscp () {
	# undefined
	builtin autoload -XUz
}
_pspdf () {
	# undefined
	builtin autoload -XUz
}
_psutils () {
	# undefined
	builtin autoload -XUz
}
_ptree () {
	# undefined
	builtin autoload -XUz
}
_pulseaudio () {
	# undefined
	builtin autoload -XUz
}
_pump () {
	# undefined
	builtin autoload -XUz
}
_putclip () {
	# undefined
	builtin autoload -XUz
}
_pv () {
	# undefined
	builtin autoload -XUz
}
_pwgen () {
	# undefined
	builtin autoload -XUz
}
_pydoc () {
	# undefined
	builtin autoload -XUz
}
_python () {
	# undefined
	builtin autoload -XUz
}
_python_modules () {
	# undefined
	builtin autoload -XUz
}
_qdbus () {
	# undefined
	builtin autoload -XUz
}
_qemu () {
	# undefined
	builtin autoload -XUz
}
_qiv () {
	# undefined
	builtin autoload -XUz
}
_qtplay () {
	# undefined
	builtin autoload -XUz
}
_quilt () {
	# undefined
	builtin autoload -XUz
}
_rake () {
	# undefined
	builtin autoload -XUz
}
_ranlib () {
	# undefined
	builtin autoload -XUz
}
_rar () {
	# undefined
	builtin autoload -XUz
}
_rcctl () {
	# undefined
	builtin autoload -XUz
}
_rclone () {
	# undefined
	builtin autoload -XUz
}
_rcs () {
	# undefined
	builtin autoload -XUz
}
_rdesktop () {
	# undefined
	builtin autoload -XUz
}
_read () {
	# undefined
	builtin autoload -XUz
}
_read_comp () {
	# undefined
	builtin autoload -XUz
}
_readelf () {
	# undefined
	builtin autoload -XUz
}
_readlink () {
	# undefined
	builtin autoload -XUz
}
_readshortcut () {
	# undefined
	builtin autoload -XUz
}
_rebootin () {
	# undefined
	builtin autoload -XUz
}
_redirect () {
	# undefined
	builtin autoload -XUz
}
_regex_arguments () {
	# undefined
	builtin autoload -XUz
}
_regex_words () {
	# undefined
	builtin autoload -XUz
}
_remote_files () {
	# undefined
	builtin autoload -XUz
}
_renice () {
	# undefined
	builtin autoload -XUz
}
_reprepro () {
	# undefined
	builtin autoload -XUz
}
_requested () {
	# undefined
	builtin autoload -XUz
}
_retrieve_cache () {
	# undefined
	builtin autoload -XUz
}
_retrieve_mac_apps () {
	# undefined
	builtin autoload -XUz
}
_rg () {
	# undefined
	builtin autoload -XUz
}
_ri () {
	# undefined
	builtin autoload -XUz
}
_rlogin () {
	# undefined
	builtin autoload -XUz
}
_rm () {
	# undefined
	builtin autoload -XUz
}
_rmdir () {
	# undefined
	builtin autoload -XUz
}
_route () {
	# undefined
	builtin autoload -XUz
}
_rpm () {
	# undefined
	builtin autoload -XUz
}
_rrdtool () {
	# undefined
	builtin autoload -XUz
}
_rsync () {
	# undefined
	builtin autoload -XUz
}
_rubber () {
	# undefined
	builtin autoload -XUz
}
_ruby () {
	# undefined
	builtin autoload -XUz
}
_run-help () {
	# undefined
	builtin autoload -XUz
}
_runit () {
	# undefined
	builtin autoload -XUz
}
_samba () {
	# undefined
	builtin autoload -XUz
}
_savecore () {
	# undefined
	builtin autoload -XUz
}
_say () {
	# undefined
	builtin autoload -XUz
}
_sbuild () {
	# undefined
	builtin autoload -XUz
}
_sc_usage () {
	# undefined
	builtin autoload -XUz
}
_sccs () {
	# undefined
	builtin autoload -XUz
}
_sched () {
	# undefined
	builtin autoload -XUz
}
_schedtool () {
	# undefined
	builtin autoload -XUz
}
_schroot () {
	# undefined
	builtin autoload -XUz
}
_scl () {
	# undefined
	builtin autoload -XUz
}
_scons () {
	# undefined
	builtin autoload -XUz
}
_screen () {
	# undefined
	builtin autoload -XUz
}
_script () {
	# undefined
	builtin autoload -XUz
}
_scselect () {
	# undefined
	builtin autoload -XUz
}
_scutil () {
	# undefined
	builtin autoload -XUz
}
_seafile () {
	# undefined
	builtin autoload -XUz
}
_sed () {
	# undefined
	builtin autoload -XUz
}
_selinux_contexts () {
	# undefined
	builtin autoload -XUz
}
_selinux_roles () {
	# undefined
	builtin autoload -XUz
}
_selinux_types () {
	# undefined
	builtin autoload -XUz
}
_selinux_users () {
	# undefined
	builtin autoload -XUz
}
_sep_parts () {
	# undefined
	builtin autoload -XUz
}
_seq () {
	# undefined
	builtin autoload -XUz
}
_sequence () {
	# undefined
	builtin autoload -XUz
}
_service () {
	# undefined
	builtin autoload -XUz
}
_services () {
	# undefined
	builtin autoload -XUz
}
_set () {
	# undefined
	builtin autoload -XUz
}
_set_command () {
	local command
	command="$words[1]" 
	[[ -z "$command" ]] && return
	if (( $+builtins[$command] + $+functions[$command] ))
	then
		_comp_command1="$command" 
		_comp_command="$_comp_command1" 
	elif [[ "$command[1]" = '=' ]]
	then
		eval _comp_command2\=$command
		_comp_command1="$command[2,-1]" 
		_comp_command="$_comp_command2" 
	elif [[ "$command" = ..#/* ]]
	then
		_comp_command1="${PWD}/$command" 
		_comp_command2="${command:t}" 
		_comp_command="$_comp_command2" 
	elif [[ "$command" = */* ]]
	then
		_comp_command1="$command" 
		_comp_command2="${command:t}" 
		_comp_command="$_comp_command2" 
	else
		_comp_command1="$command" 
		_comp_command2="$commands[$command]" 
		_comp_command="$_comp_command1" 
	fi
}
_setfacl () {
	# undefined
	builtin autoload -XUz
}
_setopt () {
	# undefined
	builtin autoload -XUz
}
_setsid () {
	# undefined
	builtin autoload -XUz
}
_setup () {
	local val nm="$compstate[nmatches]" 
	[[ $# -eq 1 ]] && 2="$1" 
	if zstyle -a ":completion:${curcontext}:$1" list-colors val
	then
		zmodload -i zsh/complist
		if [[ "$1" = default ]]
		then
			_comp_colors=("$val[@]") 
		else
			_comp_colors+=("(${2})${(@)^val:#(|\(*\)*)}" "${(M@)val:#\(*\)*}") 
		fi
	elif [[ "$1" = default ]]
	then
		unset ZLS_COLORS ZLS_COLOURS
	fi
	if zstyle -s ":completion:${curcontext}:$1" show-ambiguity val
	then
		zmodload -i zsh/complist
		[[ $val = (yes|true|on) ]] && _ambiguous_color=4  || _ambiguous_color=$val 
	fi
	if zstyle -t ":completion:${curcontext}:$1" list-packed
	then
		compstate[list]="${compstate[list]} packed" 
	elif [[ $? -eq 1 ]]
	then
		compstate[list]="${compstate[list]:gs/packed//}" 
	else
		compstate[list]="$_saved_list" 
	fi
	if zstyle -t ":completion:${curcontext}:$1" list-rows-first
	then
		compstate[list]="${compstate[list]} rows" 
	elif [[ $? -eq 1 ]]
	then
		compstate[list]="${compstate[list]:gs/rows//}" 
	else
		compstate[list]="$_saved_list" 
	fi
	if zstyle -t ":completion:${curcontext}:$1" last-prompt
	then
		compstate[last_prompt]=yes 
	elif [[ $? -eq 1 ]]
	then
		compstate[last_prompt]='' 
	else
		compstate[last_prompt]="$_saved_lastprompt" 
	fi
	if zstyle -t ":completion:${curcontext}:$1" accept-exact
	then
		compstate[exact]=accept 
	elif [[ $? -eq 1 ]]
	then
		compstate[exact]='' 
	else
		compstate[exact]="$_saved_exact" 
	fi
	[[ _last_nmatches -ge 0 && _last_nmatches -ne nm ]] && _menu_style=("$_last_menu_style[@]" "$_menu_style[@]") 
	if zstyle -a ":completion:${curcontext}:$1" menu val
	then
		_last_nmatches=$nm 
		_last_menu_style=("$val[@]") 
	else
		_last_nmatches=-1 
	fi
	[[ "$_comp_force_list" != always ]] && zstyle -s ":completion:${curcontext}:$1" force-list val && [[ "$val" = always || ( "$val" = [0-9]## && ( -z "$_comp_force_list" || _comp_force_list -gt val ) ) ]] && _comp_force_list="$val" 
}
_setxkbmap () {
	# undefined
	builtin autoload -XUz
}
_sh () {
	# undefined
	builtin autoload -XUz
}
_shasum () {
	# undefined
	builtin autoload -XUz
}
_show_title () {
	print -Pn "\033]0;${PROMPT_TITLE:-"$USER@$HOST"}\007"
}
_showmount () {
	# undefined
	builtin autoload -XUz
}
_shred () {
	# undefined
	builtin autoload -XUz
}
_shuf () {
	# undefined
	builtin autoload -XUz
}
_shutdown () {
	# undefined
	builtin autoload -XUz
}
_signals () {
	# undefined
	builtin autoload -XUz
}
_signify () {
	# undefined
	builtin autoload -XUz
}
_sisu () {
	# undefined
	builtin autoload -XUz
}
_slabtop () {
	# undefined
	builtin autoload -XUz
}
_slrn () {
	# undefined
	builtin autoload -XUz
}
_smartmontools () {
	# undefined
	builtin autoload -XUz
}
_smit () {
	# undefined
	builtin autoload -XUz
}
_snoop () {
	# undefined
	builtin autoload -XUz
}
_socket () {
	# undefined
	builtin autoload -XUz
}
_sockstat () {
	# undefined
	builtin autoload -XUz
}
_softwareupdate () {
	# undefined
	builtin autoload -XUz
}
_sort () {
	# undefined
	builtin autoload -XUz
}
_source () {
	if [[ CURRENT -ge 3 ]]
	then
		compset -n 2
		_normal
	else
		if [[ -prefix */ && ! -o pathdirs ]]
		then
			_files
		elif [[ $service = . ]]
		then
			_files -W path
		else
			_files -W "(. $path)"
		fi
	fi
}
_spamassassin () {
	# undefined
	builtin autoload -XUz
}
_split () {
	# undefined
	builtin autoload -XUz
}
_sqlite () {
	# undefined
	builtin autoload -XUz
}
_sqsh () {
	# undefined
	builtin autoload -XUz
}
_ss () {
	# undefined
	builtin autoload -XUz
}
_ssh () {
	# undefined
	builtin autoload -XUz
}
_ssh_hosts () {
	# undefined
	builtin autoload -XUz
}
_sshfs () {
	# undefined
	builtin autoload -XUz
}
_stat () {
	# undefined
	builtin autoload -XUz
}
_stdbuf () {
	# undefined
	builtin autoload -XUz
}
_stgit () {
	# undefined
	builtin autoload -XUz
}
_store_cache () {
	# undefined
	builtin autoload -XUz
}
_stow () {
	# undefined
	builtin autoload -XUz
}
_strace () {
	# undefined
	builtin autoload -XUz
}
_strftime () {
	# undefined
	builtin autoload -XUz
}
_strings () {
	# undefined
	builtin autoload -XUz
}
_strip () {
	# undefined
	builtin autoload -XUz
}
_stty () {
	# undefined
	builtin autoload -XUz
}
_su () {
	# undefined
	builtin autoload -XUz
}
_sub_commands () {
	# undefined
	builtin autoload -XUz
}
_sublimetext () {
	# undefined
	builtin autoload -XUz
}
_subscript () {
	# undefined
	builtin autoload -XUz
}
_subversion () {
	# undefined
	builtin autoload -XUz
}
_sudo () {
	# undefined
	builtin autoload -XUz
}
_suffix_alias_files () {
	# undefined
	builtin autoload -XUz
}
_surfraw () {
	# undefined
	builtin autoload -XUz
}
_svcadm () {
	# undefined
	builtin autoload -XUz
}
_svccfg () {
	# undefined
	builtin autoload -XUz
}
_svcprop () {
	# undefined
	builtin autoload -XUz
}
_svcs () {
	# undefined
	builtin autoload -XUz
}
_svcs_fmri () {
	# undefined
	builtin autoload -XUz
}
_svn-buildpackage () {
	# undefined
	builtin autoload -XUz
}
_sw_vers () {
	# undefined
	builtin autoload -XUz
}
_swaks () {
	# undefined
	builtin autoload -XUz
}
_swanctl () {
	# undefined
	builtin autoload -XUz
}
_swift () {
	# undefined
	builtin autoload -XUz
}
_sys_calls () {
	# undefined
	builtin autoload -XUz
}
_sysctl () {
	# undefined
	builtin autoload -XUz
}
_sysrc () {
	# undefined
	builtin autoload -XUz
}
_sysstat () {
	# undefined
	builtin autoload -XUz
}
_systat () {
	# undefined
	builtin autoload -XUz
}
_system_profiler () {
	# undefined
	builtin autoload -XUz
}
_tac () {
	# undefined
	builtin autoload -XUz
}
_tags () {
	local prev
	if [[ "$1" = -- ]]
	then
		prev=- 
		shift
	fi
	if (( $# ))
	then
		local curcontext="$curcontext" order tag nodef tmp 
		if [[ "$1" = -C?* ]]
		then
			curcontext="${curcontext%:*}:${1[3,-1]}" 
			shift
		elif [[ "$1" = -C ]]
		then
			curcontext="${curcontext%:*}:${2}" 
			shift 2
		fi
		[[ "$1" = -(|-) ]] && shift
		zstyle -a ":completion:${curcontext}:" group-order order && compgroups "$order[@]"
		comptags "-i$prev" "$curcontext" "$@"
		if [[ -n "$_sort_tags" ]]
		then
			"$_sort_tags" "$@"
		else
			zstyle -a ":completion:${curcontext}:" tag-order order || (( ! ${@[(I)options]} )) || order=('(|*-)argument-* (|*-)option[-+]* values' options) 
			for tag in $order
			do
				case $tag in
					(-) nodef=yes  ;;
					(\!*) comptry "${(@)argv:#(${(j:|:)~${=~tag[2,-1]}})}" ;;
					(?*) comptry -m "$tag" ;;
				esac
			done
			[[ -z "$nodef" ]] && comptry "$@"
		fi
		comptags "-T$prev"
		return
	fi
	comptags "-N$prev"
}
_tail () {
	# undefined
	builtin autoload -XUz
}
_tar () {
	# undefined
	builtin autoload -XUz
}
_tar_archive () {
	# undefined
	builtin autoload -XUz
}
_tardy () {
	# undefined
	builtin autoload -XUz
}
_tcpdump () {
	# undefined
	builtin autoload -XUz
}
_tcpsys () {
	# undefined
	builtin autoload -XUz
}
_tcptraceroute () {
	# undefined
	builtin autoload -XUz
}
_tee () {
	# undefined
	builtin autoload -XUz
}
_telnet () {
	# undefined
	builtin autoload -XUz
}
_terminals () {
	# undefined
	builtin autoload -XUz
}
_tex () {
	# undefined
	builtin autoload -XUz
}
_texi () {
	# undefined
	builtin autoload -XUz
}
_texinfo () {
	# undefined
	builtin autoload -XUz
}
_the_silver_searcher () {
	# undefined
	builtin autoload -XUz
}
_tidy () {
	# undefined
	builtin autoload -XUz
}
_tiff () {
	# undefined
	builtin autoload -XUz
}
_tilde () {
	# undefined
	builtin autoload -XUz
}
_tilde_files () {
	# undefined
	builtin autoload -XUz
}
_time_zone () {
	# undefined
	builtin autoload -XUz
}
_timeout () {
	# undefined
	builtin autoload -XUz
}
_tin () {
	# undefined
	builtin autoload -XUz
}
_tla () {
	# undefined
	builtin autoload -XUz
}
_tload () {
	# undefined
	builtin autoload -XUz
}
_tmux () {
	# undefined
	builtin autoload -XUz
}
_todo.sh () {
	# undefined
	builtin autoload -XUz
}
_toilet () {
	# undefined
	builtin autoload -XUz
}
_toolchain-source () {
	# undefined
	builtin autoload -XUz
}
_top () {
	# undefined
	builtin autoload -XUz
}
_topgit () {
	# undefined
	builtin autoload -XUz
}
_totd () {
	# undefined
	builtin autoload -XUz
}
_touch () {
	# undefined
	builtin autoload -XUz
}
_tpb () {
	# undefined
	builtin autoload -XUz
}
_tput () {
	# undefined
	builtin autoload -XUz
}
_tr () {
	# undefined
	builtin autoload -XUz
}
_tracepath () {
	# undefined
	builtin autoload -XUz
}
_transmission () {
	# undefined
	builtin autoload -XUz
}
_trap () {
	# undefined
	builtin autoload -XUz
}
_trash () {
	# undefined
	builtin autoload -XUz
}
_tree () {
	# undefined
	builtin autoload -XUz
}
_truss () {
	# undefined
	builtin autoload -XUz
}
_tty () {
	# undefined
	builtin autoload -XUz
}
_ttyctl () {
	# undefined
	builtin autoload -XUz
}
_ttys () {
	# undefined
	builtin autoload -XUz
}
_tune2fs () {
	# undefined
	builtin autoload -XUz
}
_twidge () {
	# undefined
	builtin autoload -XUz
}
_twisted () {
	# undefined
	builtin autoload -XUz
}
_typeset () {
	# undefined
	builtin autoload -XUz
}
_ulimit () {
	# undefined
	builtin autoload -XUz
}
_uml () {
	# undefined
	builtin autoload -XUz
}
_umountable () {
	# undefined
	builtin autoload -XUz
}
_unace () {
	# undefined
	builtin autoload -XUz
}
_uname () {
	# undefined
	builtin autoload -XUz
}
_unexpand () {
	# undefined
	builtin autoload -XUz
}
_unhash () {
	# undefined
	builtin autoload -XUz
}
_uniq () {
	# undefined
	builtin autoload -XUz
}
_unison () {
	# undefined
	builtin autoload -XUz
}
_units () {
	# undefined
	builtin autoload -XUz
}
_update-alternatives () {
	# undefined
	builtin autoload -XUz
}
_update-rc.d () {
	# undefined
	builtin autoload -XUz
}
_uptime () {
	# undefined
	builtin autoload -XUz
}
_urls () {
	# undefined
	builtin autoload -XUz
}
_urpmi () {
	# undefined
	builtin autoload -XUz
}
_urxvt () {
	# undefined
	builtin autoload -XUz
}
_uscan () {
	# undefined
	builtin autoload -XUz
}
_user_admin () {
	# undefined
	builtin autoload -XUz
}
_user_at_host () {
	# undefined
	builtin autoload -XUz
}
_user_expand () {
	# undefined
	builtin autoload -XUz
}
_user_math_func () {
	# undefined
	builtin autoload -XUz
}
_users () {
	# undefined
	builtin autoload -XUz
}
_users_on () {
	# undefined
	builtin autoload -XUz
}
_valgrind () {
	# undefined
	builtin autoload -XUz
}
_value () {
	# undefined
	builtin autoload -XUz
}
_values () {
	# undefined
	builtin autoload -XUz
}
_vared () {
	# undefined
	builtin autoload -XUz
}
_vars () {
	# undefined
	builtin autoload -XUz
}
_vcsh () {
	# undefined
	builtin autoload -XUz
}
_vim () {
	# undefined
	builtin autoload -XUz
}
_vim-addons () {
	# undefined
	builtin autoload -XUz
}
_visudo () {
	# undefined
	builtin autoload -XUz
}
_vmctl () {
	# undefined
	builtin autoload -XUz
}
_vmstat () {
	# undefined
	builtin autoload -XUz
}
_vnc () {
	# undefined
	builtin autoload -XUz
}
_volume_groups () {
	# undefined
	builtin autoload -XUz
}
_vorbis () {
	# undefined
	builtin autoload -XUz
}
_vpnc () {
	# undefined
	builtin autoload -XUz
}
_vserver () {
	# undefined
	builtin autoload -XUz
}
_w () {
	# undefined
	builtin autoload -XUz
}
_w3m () {
	# undefined
	builtin autoload -XUz
}
_wait () {
	# undefined
	builtin autoload -XUz
}
_wajig () {
	# undefined
	builtin autoload -XUz
}
_wakeup_capable_devices () {
	# undefined
	builtin autoload -XUz
}
_wanna-build () {
	# undefined
	builtin autoload -XUz
}
_wanted () {
	# undefined
	builtin autoload -XUz
}
_watch () {
	# undefined
	builtin autoload -XUz
}
_watch-snoop () {
	# undefined
	builtin autoload -XUz
}
_wc () {
	# undefined
	builtin autoload -XUz
}
_webbrowser () {
	# undefined
	builtin autoload -XUz
}
_wget () {
	# undefined
	builtin autoload -XUz
}
_whereis () {
	# undefined
	builtin autoload -XUz
}
_which () {
	# undefined
	builtin autoload -XUz
}
_who () {
	# undefined
	builtin autoload -XUz
}
_whois () {
	# undefined
	builtin autoload -XUz
}
_widgets () {
	# undefined
	builtin autoload -XUz
}
_wiggle () {
	# undefined
	builtin autoload -XUz
}
_wipefs () {
	# undefined
	builtin autoload -XUz
}
_wpa_cli () {
	# undefined
	builtin autoload -XUz
}
_write_ysu_buffer () {
	_YSU_BUFFER+="$@" 
	local position="${YSU_MESSAGE_POSITION:-before}" 
	if [[ "$position" = "before" ]]
	then
		_flush_ysu_buffer
	elif [[ "$position" != "after" ]]
	then
		(
			printf "${RED}${BOLD}Unknown value for YSU_MESSAGE_POSITION '$position'. " >&2
		)
		(
			printf "Expected value 'before' or 'after'${NONE}\n" >&2
		)
		_flush_ysu_buffer
	fi
}
_x_arguments () {
	# undefined
	builtin autoload -XUz
}
_x_borderwidth () {
	# undefined
	builtin autoload -XUz
}
_x_color () {
	# undefined
	builtin autoload -XUz
}
_x_colormapid () {
	# undefined
	builtin autoload -XUz
}
_x_cursor () {
	# undefined
	builtin autoload -XUz
}
_x_display () {
	# undefined
	builtin autoload -XUz
}
_x_extension () {
	# undefined
	builtin autoload -XUz
}
_x_font () {
	# undefined
	builtin autoload -XUz
}
_x_geometry () {
	# undefined
	builtin autoload -XUz
}
_x_keysym () {
	# undefined
	builtin autoload -XUz
}
_x_locale () {
	# undefined
	builtin autoload -XUz
}
_x_modifier () {
	# undefined
	builtin autoload -XUz
}
_x_name () {
	# undefined
	builtin autoload -XUz
}
_x_resource () {
	# undefined
	builtin autoload -XUz
}
_x_selection_timeout () {
	# undefined
	builtin autoload -XUz
}
_x_title () {
	# undefined
	builtin autoload -XUz
}
_x_utils () {
	# undefined
	builtin autoload -XUz
}
_x_visual () {
	# undefined
	builtin autoload -XUz
}
_x_window () {
	# undefined
	builtin autoload -XUz
}
_xargs () {
	# undefined
	builtin autoload -XUz
}
_xauth () {
	# undefined
	builtin autoload -XUz
}
_xautolock () {
	# undefined
	builtin autoload -XUz
}
_xclip () {
	# undefined
	builtin autoload -XUz
}
_xcode-select () {
	# undefined
	builtin autoload -XUz
}
_xdvi () {
	# undefined
	builtin autoload -XUz
}
_xfig () {
	# undefined
	builtin autoload -XUz
}
_xft_fonts () {
	# undefined
	builtin autoload -XUz
}
_xloadimage () {
	# undefined
	builtin autoload -XUz
}
_xmlsoft () {
	# undefined
	builtin autoload -XUz
}
_xmlstarlet () {
	# undefined
	builtin autoload -XUz
}
_xmms2 () {
	# undefined
	builtin autoload -XUz
}
_xmodmap () {
	# undefined
	builtin autoload -XUz
}
_xournal () {
	# undefined
	builtin autoload -XUz
}
_xpdf () {
	# undefined
	builtin autoload -XUz
}
_xrandr () {
	# undefined
	builtin autoload -XUz
}
_xscreensaver () {
	# undefined
	builtin autoload -XUz
}
_xset () {
	# undefined
	builtin autoload -XUz
}
_xt_arguments () {
	# undefined
	builtin autoload -XUz
}
_xt_session_id () {
	# undefined
	builtin autoload -XUz
}
_xterm () {
	# undefined
	builtin autoload -XUz
}
_xv () {
	# undefined
	builtin autoload -XUz
}
_xwit () {
	# undefined
	builtin autoload -XUz
}
_xxd () {
	# undefined
	builtin autoload -XUz
}
_xz () {
	# undefined
	builtin autoload -XUz
}
_yafc () {
	# undefined
	builtin autoload -XUz
}
_yast () {
	# undefined
	builtin autoload -XUz
}
_yodl () {
	# undefined
	builtin autoload -XUz
}
_yp () {
	# undefined
	builtin autoload -XUz
}
_yum () {
	# undefined
	builtin autoload -XUz
}
_zargs () {
	# undefined
	builtin autoload -XUz
}
_zattr () {
	# undefined
	builtin autoload -XUz
}
_zcalc () {
	# undefined
	builtin autoload -XUz
}
_zcalc_line () {
	# undefined
	builtin autoload -XUz
}
_zcat () {
	# undefined
	builtin autoload -XUz
}
_zcompile () {
	# undefined
	builtin autoload -XUz
}
_zdump () {
	# undefined
	builtin autoload -XUz
}
_zeal () {
	# undefined
	builtin autoload -XUz
}
_zed () {
	# undefined
	builtin autoload -XUz
}
_zfs () {
	# undefined
	builtin autoload -XUz
}
_zfs_dataset () {
	# undefined
	builtin autoload -XUz
}
_zfs_keysource_props () {
	# undefined
	builtin autoload -XUz
}
_zfs_pool () {
	# undefined
	builtin autoload -XUz
}
_zftp () {
	# undefined
	builtin autoload -XUz
}
_zip () {
	# undefined
	builtin autoload -XUz
}
_zle () {
	# undefined
	builtin autoload -XUz
}
_zlogin () {
	# undefined
	builtin autoload -XUz
}
_zlua () {
	local arg_mode="" 
	local arg_type="" 
	local arg_subdir="" 
	local arg_inter="" 
	local arg_strip="" 
	if [ "$1" = "--add" ]
	then
		shift
		_ZL_RANDOM="$RANDOM" "$ZLUA_LUAEXE" "$ZLUA_SCRIPT" --add "$@"
		return
	elif [ "$1" = "--complete" ]
	then
		shift
		"$ZLUA_LUAEXE" "$ZLUA_SCRIPT" --complete "$@"
		return
	fi
	while [ "$1" ]
	do
		case "$1" in
			(-l) local arg_mode="-l"  ;;
			(-e) local arg_mode="-e"  ;;
			(-x) local arg_mode="-x"  ;;
			(-t) local arg_type="-t"  ;;
			(-r) local arg_type="-r"  ;;
			(-c) local arg_subdir="-c"  ;;
			(-s) local arg_strip="-s"  ;;
			(-i) local arg_inter="-i"  ;;
			(-I) local arg_inter="-I"  ;;
			(-h | --help) local arg_mode="-h"  ;;
			(--purge) local arg_mode="--purge"  ;;
			(*) break ;;
		esac
		shift
	done
	if [ "$arg_mode" = "-h" ] || [ "$arg_mode" = "--purge" ]
	then
		"$ZLUA_LUAEXE" "$ZLUA_SCRIPT" $arg_mode
	elif [ "$arg_mode" = "-l" ] || [ "$#" -eq 0 ]
	then
		"$ZLUA_LUAEXE" "$ZLUA_SCRIPT" -l $arg_subdir $arg_type $arg_strip "$@"
	elif [ -n "$arg_mode" ]
	then
		"$ZLUA_LUAEXE" "$ZLUA_SCRIPT" $arg_mode $arg_subdir $arg_type $arg_inter "$@"
	else
		local zdest=$("$ZLUA_LUAEXE" "$ZLUA_SCRIPT" --cd $arg_type $arg_subdir $arg_inter "$@") 
		if [ -n "$zdest" ] && [ -d "$zdest" ]
		then
			if [ -z "$_ZL_CD" ]
			then
				builtin cd "$zdest"
			else
				$_ZL_CD "$zdest"
			fi
			if [ -n "$_ZL_ECHO" ]
			then
				pwd
			fi
		fi
	fi
}
_zlua_precmd () {
	(
		_zlua --add "${PWD:a}" &
	)
}
_zlua_zsh_tab_completion () {
	(( $+compstate )) && compstate[insert]=menu 
	local -a tmp=(${(f)"$(_zlua --complete "${words/_zlua/z}")"}) 
	_describe "directory" tmp -U
}
_zmodload () {
	# undefined
	builtin autoload -XUz
}
_zmv () {
	# undefined
	builtin autoload -XUz
}
_zoneadm () {
	# undefined
	builtin autoload -XUz
}
_zones () {
	# undefined
	builtin autoload -XUz
}
_zparseopts () {
	# undefined
	builtin autoload -XUz
}
_zpool () {
	# undefined
	builtin autoload -XUz
}
_zpty () {
	# undefined
	builtin autoload -XUz
}
_zsh () {
	# undefined
	builtin autoload -XUz
}
_zsh-mime-handler () {
	# undefined
	builtin autoload -XUz
}
_zsh_autosuggest_accept () {
	local -i retval max_cursor_pos=$#BUFFER 
	if [[ "$KEYMAP" = "vicmd" ]]
	then
		max_cursor_pos=$((max_cursor_pos - 1)) 
	fi
	if (( $CURSOR != $max_cursor_pos || !$#POSTDISPLAY ))
	then
		_zsh_autosuggest_invoke_original_widget $@
		return
	fi
	BUFFER="$BUFFER$POSTDISPLAY" 
	unset POSTDISPLAY
	_zsh_autosuggest_invoke_original_widget $@
	retval=$? 
	if [[ "$KEYMAP" = "vicmd" ]]
	then
		CURSOR=$(($#BUFFER - 1)) 
	else
		CURSOR=$#BUFFER 
	fi
	return $retval
}
_zsh_autosuggest_async_request () {
	zmodload zsh/system 2> /dev/null
	typeset -g _ZSH_AUTOSUGGEST_ASYNC_FD _ZSH_AUTOSUGGEST_CHILD_PID
	if [[ -n "$_ZSH_AUTOSUGGEST_ASYNC_FD" ]] && {
			true <&$_ZSH_AUTOSUGGEST_ASYNC_FD
		} 2> /dev/null
	then
		exec {_ZSH_AUTOSUGGEST_ASYNC_FD}<&-
		zle -F $_ZSH_AUTOSUGGEST_ASYNC_FD
		if [[ -n "$_ZSH_AUTOSUGGEST_CHILD_PID" ]]
		then
			if [[ -o MONITOR ]]
			then
				kill -TERM -$_ZSH_AUTOSUGGEST_CHILD_PID 2> /dev/null
			else
				kill -TERM $_ZSH_AUTOSUGGEST_CHILD_PID 2> /dev/null
			fi
		fi
	fi
	exec {_ZSH_AUTOSUGGEST_ASYNC_FD}< <(
		# Tell parent process our pid
		echo $sysparams[pid]

		# Fetch and print the suggestion
		local suggestion
		_zsh_autosuggest_fetch_suggestion "$1"
		echo -nE "$suggestion"
	)
	autoload -Uz is-at-least
	is-at-least 5.8 || command true
	read _ZSH_AUTOSUGGEST_CHILD_PID <&$_ZSH_AUTOSUGGEST_ASYNC_FD
	zle -F "$_ZSH_AUTOSUGGEST_ASYNC_FD" _zsh_autosuggest_async_response
}
_zsh_autosuggest_async_response () {
	emulate -L zsh
	local suggestion
	if [[ -z "$2" || "$2" == "hup" ]]
	then
		IFS='' read -rd '' -u $1 suggestion
		zle autosuggest-suggest -- "$suggestion"
		exec {1}<&-
	fi
	zle -F "$1"
}
_zsh_autosuggest_bind_widget () {
	typeset -gA _ZSH_AUTOSUGGEST_BIND_COUNTS
	local widget=$1 
	local autosuggest_action=$2 
	local prefix=$ZSH_AUTOSUGGEST_ORIGINAL_WIDGET_PREFIX 
	local -i bind_count
	case $widgets[$widget] in
		(user:_zsh_autosuggest_(bound|orig)_*) bind_count=$((_ZSH_AUTOSUGGEST_BIND_COUNTS[$widget]))  ;;
		(user:*) _zsh_autosuggest_incr_bind_count $widget
			zle -N $prefix$bind_count-$widget ${widgets[$widget]#*:} ;;
		(builtin) _zsh_autosuggest_incr_bind_count $widget
			eval "_zsh_autosuggest_orig_${(q)widget}() { zle .${(q)widget} }"
			zle -N $prefix$bind_count-$widget _zsh_autosuggest_orig_$widget ;;
		(completion:*) _zsh_autosuggest_incr_bind_count $widget
			eval "zle -C $prefix$bind_count-${(q)widget} ${${(s.:.)widgets[$widget]}[2,3]}" ;;
	esac
	eval "_zsh_autosuggest_bound_${bind_count}_${(q)widget}() {
		_zsh_autosuggest_widget_$autosuggest_action $prefix$bind_count-${(q)widget} \$@
	}"
	zle -N -- $widget _zsh_autosuggest_bound_${bind_count}_$widget
}
_zsh_autosuggest_bind_widgets () {
	emulate -L zsh
	local widget
	local ignore_widgets
	ignore_widgets=(.\* _\* ${_ZSH_AUTOSUGGEST_BUILTIN_ACTIONS/#/autosuggest-} $ZSH_AUTOSUGGEST_ORIGINAL_WIDGET_PREFIX\* $ZSH_AUTOSUGGEST_IGNORE_WIDGETS) 
	for widget in ${${(f)"$(builtin zle -la)"}:#${(j:|:)~ignore_widgets}}
	do
		if [[ -n ${ZSH_AUTOSUGGEST_CLEAR_WIDGETS[(r)$widget]} ]]
		then
			_zsh_autosuggest_bind_widget $widget clear
		elif [[ -n ${ZSH_AUTOSUGGEST_ACCEPT_WIDGETS[(r)$widget]} ]]
		then
			_zsh_autosuggest_bind_widget $widget accept
		elif [[ -n ${ZSH_AUTOSUGGEST_EXECUTE_WIDGETS[(r)$widget]} ]]
		then
			_zsh_autosuggest_bind_widget $widget execute
		elif [[ -n ${ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS[(r)$widget]} ]]
		then
			_zsh_autosuggest_bind_widget $widget partial_accept
		else
			_zsh_autosuggest_bind_widget $widget modify
		fi
	done
}
_zsh_autosuggest_bound_1_accept-and-hold () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-accept-and-hold $@
}
_zsh_autosuggest_bound_1_accept-and-infer-next-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-accept-and-infer-next-history $@
}
_zsh_autosuggest_bound_1_accept-and-menu-complete () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-accept-and-menu-complete $@
}
_zsh_autosuggest_bound_1_accept-line () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-accept-line $@
}
_zsh_autosuggest_bound_1_accept-line-and-down-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-accept-line-and-down-history $@
}
_zsh_autosuggest_bound_1_accept-search () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-accept-search $@
}
_zsh_autosuggest_bound_1_argument-base () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-argument-base $@
}
_zsh_autosuggest_bound_1_auto-suffix-remove () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-auto-suffix-remove $@
}
_zsh_autosuggest_bound_1_auto-suffix-retain () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-auto-suffix-retain $@
}
_zsh_autosuggest_bound_1_autosuggest-capture-completion () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-autosuggest-capture-completion $@
}
_zsh_autosuggest_bound_1_backward-char () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-backward-char $@
}
_zsh_autosuggest_bound_1_backward-delete-char () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-backward-delete-char $@
}
_zsh_autosuggest_bound_1_backward-delete-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-backward-delete-word $@
}
_zsh_autosuggest_bound_1_backward-kill-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-backward-kill-line $@
}
_zsh_autosuggest_bound_1_backward-kill-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-backward-kill-word $@
}
_zsh_autosuggest_bound_1_backward-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-backward-word $@
}
_zsh_autosuggest_bound_1_beginning-of-buffer-or-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-beginning-of-buffer-or-history $@
}
_zsh_autosuggest_bound_1_beginning-of-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-beginning-of-history $@
}
_zsh_autosuggest_bound_1_beginning-of-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-beginning-of-line $@
}
_zsh_autosuggest_bound_1_beginning-of-line-hist () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-beginning-of-line-hist $@
}
_zsh_autosuggest_bound_1_bracketed-paste () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-bracketed-paste $@
}
_zsh_autosuggest_bound_1_capitalize-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-capitalize-word $@
}
_zsh_autosuggest_bound_1_clear-screen () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-clear-screen $@
}
_zsh_autosuggest_bound_1_complete-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-complete-word $@
}
_zsh_autosuggest_bound_1_copy-prev-shell-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-copy-prev-shell-word $@
}
_zsh_autosuggest_bound_1_copy-prev-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-copy-prev-word $@
}
_zsh_autosuggest_bound_1_copy-region-as-kill () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-copy-region-as-kill $@
}
_zsh_autosuggest_bound_1_deactivate-region () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-deactivate-region $@
}
_zsh_autosuggest_bound_1_delete-char () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-delete-char $@
}
_zsh_autosuggest_bound_1_delete-char-or-list () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-delete-char-or-list $@
}
_zsh_autosuggest_bound_1_delete-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-delete-word $@
}
_zsh_autosuggest_bound_1_describe-key-briefly () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-describe-key-briefly $@
}
_zsh_autosuggest_bound_1_digit-argument () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-digit-argument $@
}
_zsh_autosuggest_bound_1_down-case-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-down-case-word $@
}
_zsh_autosuggest_bound_1_down-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-down-history $@
}
_zsh_autosuggest_bound_1_down-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-down-line $@
}
_zsh_autosuggest_bound_1_down-line-or-beginning-search () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-down-line-or-beginning-search $@
}
_zsh_autosuggest_bound_1_down-line-or-history () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-down-line-or-history $@
}
_zsh_autosuggest_bound_1_down-line-or-search () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-down-line-or-search $@
}
_zsh_autosuggest_bound_1_edit-command-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-edit-command-line $@
}
_zsh_autosuggest_bound_1_emacs-backward-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-emacs-backward-word $@
}
_zsh_autosuggest_bound_1_emacs-forward-word () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-emacs-forward-word $@
}
_zsh_autosuggest_bound_1_end-of-buffer-or-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-end-of-buffer-or-history $@
}
_zsh_autosuggest_bound_1_end-of-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-end-of-history $@
}
_zsh_autosuggest_bound_1_end-of-line () {
	_zsh_autosuggest_widget_accept autosuggest-orig-1-end-of-line $@
}
_zsh_autosuggest_bound_1_end-of-line-hist () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-end-of-line-hist $@
}
_zsh_autosuggest_bound_1_end-of-list () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-end-of-list $@
}
_zsh_autosuggest_bound_1_exchange-point-and-mark () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-exchange-point-and-mark $@
}
_zsh_autosuggest_bound_1_execute-last-named-cmd () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-execute-last-named-cmd $@
}
_zsh_autosuggest_bound_1_execute-named-cmd () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-execute-named-cmd $@
}
_zsh_autosuggest_bound_1_expand-cmd-path () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-expand-cmd-path $@
}
_zsh_autosuggest_bound_1_expand-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-expand-history $@
}
_zsh_autosuggest_bound_1_expand-or-complete () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-expand-or-complete $@
}
_zsh_autosuggest_bound_1_expand-or-complete-prefix () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-expand-or-complete-prefix $@
}
_zsh_autosuggest_bound_1_expand-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-expand-word $@
}
_zsh_autosuggest_bound_1_fast-highlight-check-path-handler () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fast-highlight-check-path-handler $@
}
_zsh_autosuggest_bound_1_forward-char () {
	_zsh_autosuggest_widget_accept autosuggest-orig-1-forward-char $@
}
_zsh_autosuggest_bound_1_forward-word () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-forward-word $@
}
_zsh_autosuggest_bound_1_fzf-cd-widget () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fzf-cd-widget $@
}
_zsh_autosuggest_bound_1_fzf-completion () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fzf-completion $@
}
_zsh_autosuggest_bound_1_fzf-file-widget () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fzf-file-widget $@
}
_zsh_autosuggest_bound_1_fzf-history-widget () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fzf-history-widget $@
}
_zsh_autosuggest_bound_1_fzf-tab-complete () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fzf-tab-complete $@
}
_zsh_autosuggest_bound_1_fzf-tab-debug () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fzf-tab-debug $@
}
_zsh_autosuggest_bound_1_fzf-tab-dummy () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-fzf-tab-dummy $@
}
_zsh_autosuggest_bound_1_get-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-get-line $@
}
_zsh_autosuggest_bound_1_gosmacs-transpose-chars () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-gosmacs-transpose-chars $@
}
_zsh_autosuggest_bound_1_history-beginning-search-backward () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-history-beginning-search-backward $@
}
_zsh_autosuggest_bound_1_history-beginning-search-forward () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-history-beginning-search-forward $@
}
_zsh_autosuggest_bound_1_history-incremental-pattern-search-backward () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-history-incremental-pattern-search-backward $@
}
_zsh_autosuggest_bound_1_history-incremental-pattern-search-forward () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-history-incremental-pattern-search-forward $@
}
_zsh_autosuggest_bound_1_history-incremental-search-backward () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-history-incremental-search-backward $@
}
_zsh_autosuggest_bound_1_history-incremental-search-forward () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-history-incremental-search-forward $@
}
_zsh_autosuggest_bound_1_history-search-backward () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-history-search-backward $@
}
_zsh_autosuggest_bound_1_history-search-forward () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-history-search-forward $@
}
_zsh_autosuggest_bound_1_history-substring-search-down () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-history-substring-search-down $@
}
_zsh_autosuggest_bound_1_history-substring-search-up () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-history-substring-search-up $@
}
_zsh_autosuggest_bound_1_infer-next-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-infer-next-history $@
}
_zsh_autosuggest_bound_1_insert-last-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-insert-last-word $@
}
_zsh_autosuggest_bound_1_kill-buffer () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-kill-buffer $@
}
_zsh_autosuggest_bound_1_kill-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-kill-line $@
}
_zsh_autosuggest_bound_1_kill-region () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-kill-region $@
}
_zsh_autosuggest_bound_1_kill-whole-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-kill-whole-line $@
}
_zsh_autosuggest_bound_1_kill-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-kill-word $@
}
_zsh_autosuggest_bound_1_list-choices () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-list-choices $@
}
_zsh_autosuggest_bound_1_list-expand () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-list-expand $@
}
_zsh_autosuggest_bound_1_magic-space () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-magic-space $@
}
_zsh_autosuggest_bound_1_menu-complete () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-menu-complete $@
}
_zsh_autosuggest_bound_1_menu-expand-or-complete () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-menu-expand-or-complete $@
}
_zsh_autosuggest_bound_1_menu-select () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-menu-select $@
}
_zsh_autosuggest_bound_1_neg-argument () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-neg-argument $@
}
_zsh_autosuggest_bound_1_overwrite-mode () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-overwrite-mode $@
}
_zsh_autosuggest_bound_1_pound-insert () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-pound-insert $@
}
_zsh_autosuggest_bound_1_push-input () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-push-input $@
}
_zsh_autosuggest_bound_1_push-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-push-line $@
}
_zsh_autosuggest_bound_1_push-line-or-edit () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-push-line-or-edit $@
}
_zsh_autosuggest_bound_1_put-replace-selection () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-put-replace-selection $@
}
_zsh_autosuggest_bound_1_quote-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-quote-line $@
}
_zsh_autosuggest_bound_1_quote-region () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-quote-region $@
}
_zsh_autosuggest_bound_1_quoted-insert () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-quoted-insert $@
}
_zsh_autosuggest_bound_1_read-command () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-read-command $@
}
_zsh_autosuggest_bound_1_recursive-edit () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-recursive-edit $@
}
_zsh_autosuggest_bound_1_redisplay () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-redisplay $@
}
_zsh_autosuggest_bound_1_redo () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-redo $@
}
_zsh_autosuggest_bound_1_reset-prompt () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-reset-prompt $@
}
_zsh_autosuggest_bound_1_reverse-menu-complete () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-reverse-menu-complete $@
}
_zsh_autosuggest_bound_1_select-a-blank-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-select-a-blank-word $@
}
_zsh_autosuggest_bound_1_select-a-shell-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-select-a-shell-word $@
}
_zsh_autosuggest_bound_1_select-a-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-select-a-word $@
}
_zsh_autosuggest_bound_1_select-in-blank-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-select-in-blank-word $@
}
_zsh_autosuggest_bound_1_select-in-shell-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-select-in-shell-word $@
}
_zsh_autosuggest_bound_1_select-in-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-select-in-word $@
}
_zsh_autosuggest_bound_1_self-insert () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-self-insert $@
}
_zsh_autosuggest_bound_1_self-insert-unmeta () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-self-insert-unmeta $@
}
_zsh_autosuggest_bound_1_send-break () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-send-break $@
}
_zsh_autosuggest_bound_1_set-mark-command () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-set-mark-command $@
}
_zsh_autosuggest_bound_1_spell-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-spell-word $@
}
_zsh_autosuggest_bound_1_split-undo () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-split-undo $@
}
_zsh_autosuggest_bound_1_toggle-fzf-tab () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-toggle-fzf-tab $@
}
_zsh_autosuggest_bound_1_transpose-chars () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-transpose-chars $@
}
_zsh_autosuggest_bound_1_transpose-words () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-transpose-words $@
}
_zsh_autosuggest_bound_1_undefined-key () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-undefined-key $@
}
_zsh_autosuggest_bound_1_undo () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-undo $@
}
_zsh_autosuggest_bound_1_universal-argument () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-universal-argument $@
}
_zsh_autosuggest_bound_1_up-case-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-up-case-word $@
}
_zsh_autosuggest_bound_1_up-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-up-history $@
}
_zsh_autosuggest_bound_1_up-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-up-line $@
}
_zsh_autosuggest_bound_1_up-line-or-beginning-search () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-up-line-or-beginning-search $@
}
_zsh_autosuggest_bound_1_up-line-or-history () {
	_zsh_autosuggest_widget_clear autosuggest-orig-1-up-line-or-history $@
}
_zsh_autosuggest_bound_1_up-line-or-search () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-up-line-or-search $@
}
_zsh_autosuggest_bound_1_user:_zsh_highlight_widget_orig-s000-r288-zle-line-finish () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-user:_zsh_highlight_widget_orig-s000-r288-zle-line-finish $@
}
_zsh_autosuggest_bound_1_user:_zsh_highlight_widget_orig-s000-r288-zle-line-init () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-user:_zsh_highlight_widget_orig-s000-r288-zle-line-init $@
}
_zsh_autosuggest_bound_1_vi-add-eol () {
	_zsh_autosuggest_widget_accept autosuggest-orig-1-vi-add-eol $@
}
_zsh_autosuggest_bound_1_vi-add-next () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-add-next $@
}
_zsh_autosuggest_bound_1_vi-backward-blank-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-backward-blank-word $@
}
_zsh_autosuggest_bound_1_vi-backward-blank-word-end () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-backward-blank-word-end $@
}
_zsh_autosuggest_bound_1_vi-backward-char () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-backward-char $@
}
_zsh_autosuggest_bound_1_vi-backward-delete-char () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-backward-delete-char $@
}
_zsh_autosuggest_bound_1_vi-backward-kill-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-backward-kill-word $@
}
_zsh_autosuggest_bound_1_vi-backward-word () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-backward-word $@
}
_zsh_autosuggest_bound_1_vi-backward-word-end () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-backward-word-end $@
}
_zsh_autosuggest_bound_1_vi-beginning-of-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-beginning-of-line $@
}
_zsh_autosuggest_bound_1_vi-caps-lock-panic () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-caps-lock-panic $@
}
_zsh_autosuggest_bound_1_vi-change () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-change $@
}
_zsh_autosuggest_bound_1_vi-change-eol () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-change-eol $@
}
_zsh_autosuggest_bound_1_vi-change-whole-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-change-whole-line $@
}
_zsh_autosuggest_bound_1_vi-cmd-mode () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-cmd-mode $@
}
_zsh_autosuggest_bound_1_vi-delete () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-delete $@
}
_zsh_autosuggest_bound_1_vi-delete-char () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-delete-char $@
}
_zsh_autosuggest_bound_1_vi-digit-or-beginning-of-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-digit-or-beginning-of-line $@
}
_zsh_autosuggest_bound_1_vi-down-case () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-down-case $@
}
_zsh_autosuggest_bound_1_vi-down-line-or-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-down-line-or-history $@
}
_zsh_autosuggest_bound_1_vi-end-of-line () {
	_zsh_autosuggest_widget_accept autosuggest-orig-1-vi-end-of-line $@
}
_zsh_autosuggest_bound_1_vi-fetch-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-fetch-history $@
}
_zsh_autosuggest_bound_1_vi-find-next-char () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-vi-find-next-char $@
}
_zsh_autosuggest_bound_1_vi-find-next-char-skip () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-vi-find-next-char-skip $@
}
_zsh_autosuggest_bound_1_vi-find-prev-char () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-find-prev-char $@
}
_zsh_autosuggest_bound_1_vi-find-prev-char-skip () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-find-prev-char-skip $@
}
_zsh_autosuggest_bound_1_vi-first-non-blank () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-first-non-blank $@
}
_zsh_autosuggest_bound_1_vi-forward-blank-word () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-vi-forward-blank-word $@
}
_zsh_autosuggest_bound_1_vi-forward-blank-word-end () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-vi-forward-blank-word-end $@
}
_zsh_autosuggest_bound_1_vi-forward-char () {
	_zsh_autosuggest_widget_accept autosuggest-orig-1-vi-forward-char $@
}
_zsh_autosuggest_bound_1_vi-forward-word () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-vi-forward-word $@
}
_zsh_autosuggest_bound_1_vi-forward-word-end () {
	_zsh_autosuggest_widget_partial_accept autosuggest-orig-1-vi-forward-word-end $@
}
_zsh_autosuggest_bound_1_vi-goto-column () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-goto-column $@
}
_zsh_autosuggest_bound_1_vi-goto-mark () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-goto-mark $@
}
_zsh_autosuggest_bound_1_vi-goto-mark-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-goto-mark-line $@
}
_zsh_autosuggest_bound_1_vi-history-search-backward () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-history-search-backward $@
}
_zsh_autosuggest_bound_1_vi-history-search-forward () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-history-search-forward $@
}
_zsh_autosuggest_bound_1_vi-indent () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-indent $@
}
_zsh_autosuggest_bound_1_vi-insert () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-insert $@
}
_zsh_autosuggest_bound_1_vi-insert-bol () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-insert-bol $@
}
_zsh_autosuggest_bound_1_vi-join () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-join $@
}
_zsh_autosuggest_bound_1_vi-kill-eol () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-kill-eol $@
}
_zsh_autosuggest_bound_1_vi-kill-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-kill-line $@
}
_zsh_autosuggest_bound_1_vi-match-bracket () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-match-bracket $@
}
_zsh_autosuggest_bound_1_vi-open-line-above () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-open-line-above $@
}
_zsh_autosuggest_bound_1_vi-open-line-below () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-open-line-below $@
}
_zsh_autosuggest_bound_1_vi-oper-swap-case () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-oper-swap-case $@
}
_zsh_autosuggest_bound_1_vi-pound-insert () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-pound-insert $@
}
_zsh_autosuggest_bound_1_vi-put-after () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-put-after $@
}
_zsh_autosuggest_bound_1_vi-put-before () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-put-before $@
}
_zsh_autosuggest_bound_1_vi-quoted-insert () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-quoted-insert $@
}
_zsh_autosuggest_bound_1_vi-repeat-change () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-repeat-change $@
}
_zsh_autosuggest_bound_1_vi-repeat-find () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-repeat-find $@
}
_zsh_autosuggest_bound_1_vi-repeat-search () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-repeat-search $@
}
_zsh_autosuggest_bound_1_vi-replace () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-replace $@
}
_zsh_autosuggest_bound_1_vi-replace-chars () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-replace-chars $@
}
_zsh_autosuggest_bound_1_vi-rev-repeat-find () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-rev-repeat-find $@
}
_zsh_autosuggest_bound_1_vi-rev-repeat-search () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-rev-repeat-search $@
}
_zsh_autosuggest_bound_1_vi-set-buffer () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-set-buffer $@
}
_zsh_autosuggest_bound_1_vi-set-mark () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-set-mark $@
}
_zsh_autosuggest_bound_1_vi-substitute () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-substitute $@
}
_zsh_autosuggest_bound_1_vi-swap-case () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-swap-case $@
}
_zsh_autosuggest_bound_1_vi-undo-change () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-undo-change $@
}
_zsh_autosuggest_bound_1_vi-unindent () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-unindent $@
}
_zsh_autosuggest_bound_1_vi-up-case () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-up-case $@
}
_zsh_autosuggest_bound_1_vi-up-line-or-history () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-up-line-or-history $@
}
_zsh_autosuggest_bound_1_vi-yank () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-yank $@
}
_zsh_autosuggest_bound_1_vi-yank-eol () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-yank-eol $@
}
_zsh_autosuggest_bound_1_vi-yank-whole-line () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-vi-yank-whole-line $@
}
_zsh_autosuggest_bound_1_visual-line-mode () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-visual-line-mode $@
}
_zsh_autosuggest_bound_1_visual-mode () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-visual-mode $@
}
_zsh_autosuggest_bound_1_what-cursor-position () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-what-cursor-position $@
}
_zsh_autosuggest_bound_1_where-is () {
	_zsh_autosuggest_widget_modify autosuggest-orig-1-where-is $@
}
_zsh_autosuggest_capture_completion_async () {
	_zsh_autosuggest_capture_setup
	zmodload zsh/parameter 2> /dev/null || return
	autoload +X _complete
	functions[_original_complete]=$functions[_complete] 
	_complete () {
		unset 'compstate[vared]'
		_original_complete "$@"
	}
	vared 1
}
_zsh_autosuggest_capture_completion_sync () {
	_zsh_autosuggest_capture_setup
	zle autosuggest-capture-completion
}
_zsh_autosuggest_capture_completion_widget () {
	local -a +h comppostfuncs
	comppostfuncs=(_zsh_autosuggest_capture_postcompletion) 
	CURSOR=$#BUFFER 
	zle -- ${(k)widgets[(r)completion:.complete-word:_main_complete]}
	if is-at-least 5.0.3
	then
		stty -onlcr -ocrnl -F /dev/tty
	fi
	echo -nE - $'\0'$BUFFER$'\0'
}
_zsh_autosuggest_capture_postcompletion () {
	compstate[insert]=1 
	unset 'compstate[list]'
}
_zsh_autosuggest_capture_setup () {
	if ! is-at-least 5.4
	then
		zshexit () {
			kill -KILL $$ 2>&- || command kill -KILL $$
			sleep 1
		}
	fi
	zstyle ':completion:*' matcher-list ''
	zstyle ':completion:*' path-completion false
	zstyle ':completion:*' max-errors 0 not-numeric
	bindkey '^I' autosuggest-capture-completion
}
_zsh_autosuggest_clear () {
	unset POSTDISPLAY
	_zsh_autosuggest_invoke_original_widget $@
}
_zsh_autosuggest_disable () {
	typeset -g _ZSH_AUTOSUGGEST_DISABLED
	_zsh_autosuggest_clear
}
_zsh_autosuggest_enable () {
	unset _ZSH_AUTOSUGGEST_DISABLED
	if (( $#BUFFER ))
	then
		_zsh_autosuggest_fetch
	fi
}
_zsh_autosuggest_escape_command () {
	setopt localoptions EXTENDED_GLOB
	echo -E "${1//(#m)[\"\'\\()\[\]|*?~]/\\$MATCH}"
}
_zsh_autosuggest_execute () {
	BUFFER="$BUFFER$POSTDISPLAY" 
	unset POSTDISPLAY
	_zsh_autosuggest_invoke_original_widget "accept-line"
}
_zsh_autosuggest_fetch () {
	if (( ${+ZSH_AUTOSUGGEST_USE_ASYNC} ))
	then
		_zsh_autosuggest_async_request "$BUFFER"
	else
		local suggestion
		_zsh_autosuggest_fetch_suggestion "$BUFFER"
		_zsh_autosuggest_suggest "$suggestion"
	fi
}
_zsh_autosuggest_fetch_suggestion () {
	typeset -g suggestion
	local -a strategies
	local strategy
	strategies=(${=ZSH_AUTOSUGGEST_STRATEGY}) 
	for strategy in $strategies
	do
		_zsh_autosuggest_strategy_$strategy "$1"
		[[ "$suggestion" != "$1"* ]] && unset suggestion
		[[ -n "$suggestion" ]] && break
	done
}
_zsh_autosuggest_highlight_apply () {
	typeset -g _ZSH_AUTOSUGGEST_LAST_HIGHLIGHT
	if (( $#POSTDISPLAY ))
	then
		typeset -g _ZSH_AUTOSUGGEST_LAST_HIGHLIGHT="$#BUFFER $(($#BUFFER + $#POSTDISPLAY)) $ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE" 
		region_highlight+=("$_ZSH_AUTOSUGGEST_LAST_HIGHLIGHT") 
	else
		unset _ZSH_AUTOSUGGEST_LAST_HIGHLIGHT
	fi
}
_zsh_autosuggest_highlight_reset () {
	typeset -g _ZSH_AUTOSUGGEST_LAST_HIGHLIGHT
	if [[ -n "$_ZSH_AUTOSUGGEST_LAST_HIGHLIGHT" ]]
	then
		region_highlight=("${(@)region_highlight:#$_ZSH_AUTOSUGGEST_LAST_HIGHLIGHT}") 
		unset _ZSH_AUTOSUGGEST_LAST_HIGHLIGHT
	fi
}
_zsh_autosuggest_incr_bind_count () {
	typeset -gi bind_count=$((_ZSH_AUTOSUGGEST_BIND_COUNTS[$1]+1)) 
	_ZSH_AUTOSUGGEST_BIND_COUNTS[$1]=$bind_count 
}
_zsh_autosuggest_invoke_original_widget () {
	(( $# )) || return 0
	local original_widget_name="$1" 
	shift
	if (( ${+widgets[$original_widget_name]} ))
	then
		zle $original_widget_name -- $@
	fi
}
_zsh_autosuggest_modify () {
	local -i retval
	local -i KEYS_QUEUED_COUNT
	local orig_buffer="$BUFFER" 
	local orig_postdisplay="$POSTDISPLAY" 
	unset POSTDISPLAY
	_zsh_autosuggest_invoke_original_widget $@
	retval=$? 
	emulate -L zsh
	if (( $PENDING > 0 || $KEYS_QUEUED_COUNT > 0 ))
	then
		POSTDISPLAY="$orig_postdisplay" 
		return $retval
	fi
	if [[ "$BUFFER" = "$orig_buffer"* && "$orig_postdisplay" = "${BUFFER:$#orig_buffer}"* ]]
	then
		POSTDISPLAY="${orig_postdisplay:$(($#BUFFER - $#orig_buffer))}" 
		return $retval
	fi
	if (( ${+_ZSH_AUTOSUGGEST_DISABLED} ))
	then
		return $?
	fi
	if (( $#BUFFER > 0 ))
	then
		if [[ -z "$ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE" ]] || (( $#BUFFER <= $ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE ))
		then
			_zsh_autosuggest_fetch
		fi
	fi
	return $retval
}
_zsh_autosuggest_partial_accept () {
	local -i retval cursor_loc
	local original_buffer="$BUFFER" 
	BUFFER="$BUFFER$POSTDISPLAY" 
	_zsh_autosuggest_invoke_original_widget $@
	retval=$? 
	cursor_loc=$CURSOR 
	if [[ "$KEYMAP" = "vicmd" ]]
	then
		cursor_loc=$((cursor_loc + 1)) 
	fi
	if (( $cursor_loc > $#original_buffer ))
	then
		POSTDISPLAY="${BUFFER[$(($cursor_loc + 1)),$#BUFFER]}" 
		BUFFER="${BUFFER[1,$cursor_loc]}" 
	else
		BUFFER="$original_buffer" 
	fi
	return $retval
}
_zsh_autosuggest_start () {
	if (( ${+ZSH_AUTOSUGGEST_MANUAL_REBIND} ))
	then
		add-zsh-hook -d precmd _zsh_autosuggest_start
	fi
	_zsh_autosuggest_bind_widgets
}
_zsh_autosuggest_strategy_completion () {
	emulate -L zsh
	setopt EXTENDED_GLOB
	typeset -g suggestion
	local line REPLY
	whence compdef > /dev/null || return
	zmodload zsh/zpty 2> /dev/null || return
	[[ -n "$ZSH_AUTOSUGGEST_COMPLETION_IGNORE" ]] && [[ "$1" == $~ZSH_AUTOSUGGEST_COMPLETION_IGNORE ]] && return
	if zle
	then
		zpty $ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME _zsh_autosuggest_capture_completion_sync
	else
		zpty $ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME _zsh_autosuggest_capture_completion_async "\$1"
		zpty -w $ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME $'\t'
	fi
	{
		zpty -r $ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME line '*'$'\0''*'$'\0'
		suggestion="${${(@0)line}[2]}" 
	} always {
		zpty -d $ZSH_AUTOSUGGEST_COMPLETIONS_PTY_NAME
	}
}
_zsh_autosuggest_strategy_history () {
	emulate -L zsh
	setopt EXTENDED_GLOB
	local prefix="${1//(#m)[\\*?[\]<>()|^~#]/\\$MATCH}" 
	local pattern="$prefix*" 
	if [[ -n $ZSH_AUTOSUGGEST_HISTORY_IGNORE ]]
	then
		pattern="($pattern)~($ZSH_AUTOSUGGEST_HISTORY_IGNORE)" 
	fi
	typeset -g suggestion="${history[(r)$pattern]}" 
}
_zsh_autosuggest_strategy_match_prev_cmd () {
	emulate -L zsh
	setopt EXTENDED_GLOB
	local prefix="${1//(#m)[\\*?[\]<>()|^~#]/\\$MATCH}" 
	local pattern="$prefix*" 
	if [[ -n $ZSH_AUTOSUGGEST_HISTORY_IGNORE ]]
	then
		pattern="($pattern)~($ZSH_AUTOSUGGEST_HISTORY_IGNORE)" 
	fi
	local history_match_keys
	history_match_keys=(${(k)history[(R)$~pattern]}) 
	local histkey="${history_match_keys[1]}" 
	local prev_cmd="$(_zsh_autosuggest_escape_command "${history[$((HISTCMD-1))]}")" 
	for key in "${(@)history_match_keys[1,200]}"
	do
		[[ $key -gt 1 ]] || break
		if [[ "${history[$((key - 1))]}" == "$prev_cmd" ]]
		then
			histkey="$key" 
			break
		fi
	done
	typeset -g suggestion="$history[$histkey]" 
}
_zsh_autosuggest_suggest () {
	emulate -L zsh
	local suggestion="$1" 
	if [[ -n "$suggestion" ]] && (( $#BUFFER ))
	then
		POSTDISPLAY="${suggestion#$BUFFER}" 
	else
		unset POSTDISPLAY
	fi
}
_zsh_autosuggest_toggle () {
	if (( ${+_ZSH_AUTOSUGGEST_DISABLED} ))
	then
		_zsh_autosuggest_enable
	else
		_zsh_autosuggest_disable
	fi
}
_zsh_autosuggest_widget_accept () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_accept $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_clear () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_clear $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_disable () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_disable $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_enable () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_enable $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_execute () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_execute $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_fetch () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_fetch $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_modify () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_modify $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_partial_accept () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_partial_accept $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_suggest () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_suggest $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_autosuggest_widget_toggle () {
	local -i retval
	_zsh_autosuggest_highlight_reset
	_zsh_autosuggest_toggle $@
	retval=$? 
	_zsh_autosuggest_highlight_apply
	zle -R
	return $retval
}
_zsh_highlight () {
	local ret=$? 
	if [[ $WIDGET == zle-isearch-update ]] && ! (( $+ISEARCHMATCH_ACTIVE ))
	then
		region_highlight=() 
		return $ret
	fi
	emulate -LR zsh
	setopt extendedglob warncreateglobal typesetsilent noshortloops
	local REPLY
	local -a reply
	[[ -n ${ZSH_HIGHLIGHT_MAXLENGTH:-} ]] && [[ $#BUFFER -gt $ZSH_HIGHLIGHT_MAXLENGTH ]] && return $ret
	[[ $PENDING -gt 0 ]] && return $ret
	if [[ $WIDGET == zle-line-finish ]] || _zsh_highlight_buffer_modified
	then
		-fast-highlight-init
		-fast-highlight-process "$PREBUFFER" "$BUFFER" 0
		(( FAST_HIGHLIGHT[use_brackets] )) && {
			_FAST_MAIN_CACHE=($reply) 
			-fast-highlight-string-process "$PREBUFFER" "$BUFFER"
		}
		region_highlight=($reply) 
	else
		local char="${BUFFER[CURSOR+1]}" 
		if [[ "$char" = ["{([])}"] || "${FAST_HIGHLIGHT[prev_char]}" = ["{([])}"] ]]
		then
			FAST_HIGHLIGHT[prev_char]="$char" 
			(( FAST_HIGHLIGHT[use_brackets] )) && {
				reply=($_FAST_MAIN_CACHE) 
				-fast-highlight-string-process "$PREBUFFER" "$BUFFER"
				region_highlight=($reply) 
			}
		fi
	fi
	{
		local cache_place
		local -a region_highlight_copy
		if (( REGION_ACTIVE == 1 ))
		then
			_zsh_highlight_apply_zle_highlight region standout "$MARK" "$CURSOR"
		elif (( REGION_ACTIVE == 2 ))
		then
			() {
				local needle=$'\n' 
				integer min max
				if (( MARK > CURSOR ))
				then
					min=$CURSOR max=$(( MARK + 1 )) 
				else
					min=$MARK max=$CURSOR 
				fi
				(( min = ${${BUFFER[1,$min]}[(I)$needle]} ))
				(( max += ${${BUFFER:($max-1)}[(i)$needle]} - 1 ))
				_zsh_highlight_apply_zle_highlight region standout "$min" "$max"
			}
		fi
		(( $+YANK_ACTIVE )) && (( YANK_ACTIVE )) && _zsh_highlight_apply_zle_highlight paste standout "$YANK_START" "$YANK_END"
		(( $+ISEARCHMATCH_ACTIVE )) && (( ISEARCHMATCH_ACTIVE )) && _zsh_highlight_apply_zle_highlight isearch underline "$ISEARCHMATCH_START" "$ISEARCHMATCH_END"
		(( $+SUFFIX_ACTIVE )) && (( SUFFIX_ACTIVE )) && _zsh_highlight_apply_zle_highlight suffix bold "$SUFFIX_START" "$SUFFIX_END"
		return $ret
	} always {
		typeset -g _ZSH_HIGHLIGHT_PRIOR_BUFFER="$BUFFER" 
		typeset -g _ZSH_HIGHLIGHT_PRIOR_RACTIVE="$REGION_ACTIVE" 
		typeset -gi _ZSH_HIGHLIGHT_PRIOR_CURSOR=$CURSOR 
	}
}
_zsh_highlight_apply_zle_highlight () {
	local entry="$1" default="$2" 
	integer first="$3" second="$4" 
	local region="${zle_highlight[(r)${entry}:*]}" 
	if [[ -z "$region" ]]
	then
		region=$default 
	else
		region="${region#${entry}:}" 
		if [[ -z "$region" ]] || [[ "$region" == none ]]
		then
			return
		fi
	fi
	integer start end
	if (( first < second ))
	then
		start=$first end=$second 
	else
		start=$second end=$first 
	fi
	region_highlight+=("$start $end $region") 
}
_zsh_highlight_bind_widgets () {
	setopt localoptions noksharrays
	local -F2 SECONDS
	local prefix=orig-s${SECONDS/./}-r$(( RANDOM % 1000 )) 
	zmodload zsh/zleparameter 2> /dev/null || {
		print -r -- 'zsh-syntax-highlighting: failed loading zsh/zleparameter.' >&2
		return 1
	}
	local -U widgets_to_bind
	widgets_to_bind=(${${(k)widgets}:#(.*|run-help|which-command|beep|set-local-history|yank|zle-line-pre-redraw|zle-keymap-select)}) 
	widgets_to_bind+=(zle-line-finish) 
	widgets_to_bind+=(zle-isearch-update) 
	local cur_widget
	for cur_widget in $widgets_to_bind
	do
		case $widgets[$cur_widget] in
			(user:_zsh_highlight_widget_*)  ;;
			(user:*) zle -N -- $prefix-$cur_widget ${widgets[$cur_widget]#*:}
				eval "_zsh_highlight_widget_${(q)prefix}-${(q)cur_widget}() { _zsh_highlight_call_widget ${(q)prefix}-${(q)cur_widget} -- \"\$@\" }"
				zle -N -- $cur_widget _zsh_highlight_widget_$prefix-$cur_widget ;;
			(completion:*) zle -C $prefix-$cur_widget ${${(s.:.)widgets[$cur_widget]}[2,3]}
				eval "_zsh_highlight_widget_${(q)prefix}-${(q)cur_widget}() { _zsh_highlight_call_widget ${(q)prefix}-${(q)cur_widget} -- \"\$@\" }"
				zle -N -- $cur_widget _zsh_highlight_widget_$prefix-$cur_widget ;;
			(builtin) eval "_zsh_highlight_widget_${(q)prefix}-${(q)cur_widget}() { _zsh_highlight_call_widget .${(q)cur_widget} -- \"\$@\" }"
				zle -N -- $cur_widget _zsh_highlight_widget_$prefix-$cur_widget ;;
			(*) if [[ $cur_widget == zle-* ]] && [[ -z $widgets[$cur_widget] ]]
				then
					_zsh_highlight_widget_${cur_widget} () {
						:
						_zsh_highlight
					}
					zle -N -- $cur_widget _zsh_highlight_widget_$cur_widget
				else
					print -r -- "zsh-syntax-highlighting: unhandled ZLE widget ${(qq)cur_widget}" >&2
				fi ;;
		esac
	done
}
_zsh_highlight_buffer_modified () {
	[[ "${_ZSH_HIGHLIGHT_PRIOR_BUFFER:-}" != "$BUFFER" ]] || [[ "$REGION_ACTIVE" != "$_ZSH_HIGHLIGHT_PRIOR_RACTIVE" ]] || {
		_zsh_highlight_cursor_moved && [[ "$REGION_ACTIVE" = 1 || "$REGION_ACTIVE" = 2 ]]
	}
}
_zsh_highlight_call_widget () {
	integer ret
	builtin zle "$@"
	ret=$? 
	_zsh_highlight
	return $ret
}
_zsh_highlight_cursor_moved () {
	[[ -n $CURSOR ]] && [[ -n ${_ZSH_HIGHLIGHT_PRIOR_CURSOR-} ]] && (($_ZSH_HIGHLIGHT_PRIOR_CURSOR != $CURSOR))
}
_zsh_highlight_preexec_hook () {
	typeset -g _ZSH_HIGHLIGHT_PRIOR_BUFFER= 
	typeset -gi _ZSH_HIGHLIGHT_PRIOR_CURSOR=0 
	typeset -ga _FAST_MAIN_CACHE
	_FAST_MAIN_CACHE=() 
}
_zsh_highlight_widget_orig-s000-r288-_bash_complete-word () {
	_zsh_highlight_call_widget orig-s000-r288-_bash_complete-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_bash_list-choices () {
	_zsh_highlight_call_widget orig-s000-r288-_bash_list-choices -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_complete_debug () {
	_zsh_highlight_call_widget orig-s000-r288-_complete_debug -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_complete_help () {
	_zsh_highlight_call_widget orig-s000-r288-_complete_help -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_complete_tag () {
	_zsh_highlight_call_widget orig-s000-r288-_complete_tag -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_correct_filename () {
	_zsh_highlight_call_widget orig-s000-r288-_correct_filename -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_correct_word () {
	_zsh_highlight_call_widget orig-s000-r288-_correct_word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_expand_alias () {
	_zsh_highlight_call_widget orig-s000-r288-_expand_alias -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_expand_word () {
	_zsh_highlight_call_widget orig-s000-r288-_expand_word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_history-complete-newer () {
	_zsh_highlight_call_widget orig-s000-r288-_history-complete-newer -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_history-complete-older () {
	_zsh_highlight_call_widget orig-s000-r288-_history-complete-older -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_list_expansions () {
	_zsh_highlight_call_widget orig-s000-r288-_list_expansions -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_most_recent_file () {
	_zsh_highlight_call_widget orig-s000-r288-_most_recent_file -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_next_tags () {
	_zsh_highlight_call_widget orig-s000-r288-_next_tags -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-_read_comp () {
	_zsh_highlight_call_widget orig-s000-r288-_read_comp -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-accept-and-hold () {
	_zsh_highlight_call_widget .accept-and-hold -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-accept-and-infer-next-history () {
	_zsh_highlight_call_widget .accept-and-infer-next-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-accept-and-menu-complete () {
	_zsh_highlight_call_widget .accept-and-menu-complete -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-accept-line () {
	_zsh_highlight_call_widget .accept-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-accept-line-and-down-history () {
	_zsh_highlight_call_widget .accept-line-and-down-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-accept-search () {
	_zsh_highlight_call_widget .accept-search -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-argument-base () {
	_zsh_highlight_call_widget .argument-base -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-auto-suffix-remove () {
	_zsh_highlight_call_widget .auto-suffix-remove -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-auto-suffix-retain () {
	_zsh_highlight_call_widget .auto-suffix-retain -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-accept () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-accept -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-capture-completion () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-capture-completion -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-clear () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-clear -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-disable () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-disable -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-enable () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-enable -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-execute () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-execute -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-fetch () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-fetch -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-suggest () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-suggest -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-autosuggest-toggle () {
	_zsh_highlight_call_widget orig-s000-r288-autosuggest-toggle -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-backward-char () {
	_zsh_highlight_call_widget .backward-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-backward-delete-char () {
	_zsh_highlight_call_widget .backward-delete-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-backward-delete-word () {
	_zsh_highlight_call_widget .backward-delete-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-backward-kill-line () {
	_zsh_highlight_call_widget .backward-kill-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-backward-kill-word () {
	_zsh_highlight_call_widget .backward-kill-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-backward-word () {
	_zsh_highlight_call_widget .backward-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-beginning-of-buffer-or-history () {
	_zsh_highlight_call_widget .beginning-of-buffer-or-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-beginning-of-history () {
	_zsh_highlight_call_widget .beginning-of-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-beginning-of-line () {
	_zsh_highlight_call_widget .beginning-of-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-beginning-of-line-hist () {
	_zsh_highlight_call_widget .beginning-of-line-hist -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-bracketed-paste () {
	_zsh_highlight_call_widget orig-s000-r288-bracketed-paste -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-capitalize-word () {
	_zsh_highlight_call_widget .capitalize-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-clear-screen () {
	_zsh_highlight_call_widget .clear-screen -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-complete-word () {
	_zsh_highlight_call_widget orig-s000-r288-complete-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-copy-prev-shell-word () {
	_zsh_highlight_call_widget .copy-prev-shell-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-copy-prev-word () {
	_zsh_highlight_call_widget .copy-prev-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-copy-region-as-kill () {
	_zsh_highlight_call_widget .copy-region-as-kill -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-deactivate-region () {
	_zsh_highlight_call_widget .deactivate-region -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-delete-char () {
	_zsh_highlight_call_widget .delete-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-delete-char-or-list () {
	_zsh_highlight_call_widget orig-s000-r288-delete-char-or-list -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-delete-word () {
	_zsh_highlight_call_widget .delete-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-describe-key-briefly () {
	_zsh_highlight_call_widget .describe-key-briefly -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-digit-argument () {
	_zsh_highlight_call_widget .digit-argument -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-down-case-word () {
	_zsh_highlight_call_widget .down-case-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-down-history () {
	_zsh_highlight_call_widget .down-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-down-line () {
	_zsh_highlight_call_widget .down-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-down-line-or-beginning-search () {
	_zsh_highlight_call_widget orig-s000-r288-down-line-or-beginning-search -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-down-line-or-history () {
	_zsh_highlight_call_widget .down-line-or-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-down-line-or-search () {
	_zsh_highlight_call_widget .down-line-or-search -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-edit-command-line () {
	_zsh_highlight_call_widget orig-s000-r288-edit-command-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-emacs-backward-word () {
	_zsh_highlight_call_widget .emacs-backward-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-emacs-forward-word () {
	_zsh_highlight_call_widget .emacs-forward-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-end-of-buffer-or-history () {
	_zsh_highlight_call_widget .end-of-buffer-or-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-end-of-history () {
	_zsh_highlight_call_widget .end-of-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-end-of-line () {
	_zsh_highlight_call_widget .end-of-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-end-of-line-hist () {
	_zsh_highlight_call_widget .end-of-line-hist -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-end-of-list () {
	_zsh_highlight_call_widget .end-of-list -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-exchange-point-and-mark () {
	_zsh_highlight_call_widget .exchange-point-and-mark -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-execute-last-named-cmd () {
	_zsh_highlight_call_widget .execute-last-named-cmd -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-execute-named-cmd () {
	_zsh_highlight_call_widget .execute-named-cmd -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-expand-cmd-path () {
	_zsh_highlight_call_widget .expand-cmd-path -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-expand-history () {
	_zsh_highlight_call_widget .expand-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-expand-or-complete () {
	_zsh_highlight_call_widget orig-s000-r288-expand-or-complete -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-expand-or-complete-prefix () {
	_zsh_highlight_call_widget orig-s000-r288-expand-or-complete-prefix -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-expand-word () {
	_zsh_highlight_call_widget .expand-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-forward-char () {
	_zsh_highlight_call_widget .forward-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-forward-word () {
	_zsh_highlight_call_widget .forward-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-fzf-cd-widget () {
	_zsh_highlight_call_widget orig-s000-r288-fzf-cd-widget -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-fzf-completion () {
	_zsh_highlight_call_widget orig-s000-r288-fzf-completion -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-fzf-file-widget () {
	_zsh_highlight_call_widget orig-s000-r288-fzf-file-widget -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-fzf-history-widget () {
	_zsh_highlight_call_widget orig-s000-r288-fzf-history-widget -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-fzf-tab-complete () {
	_zsh_highlight_call_widget orig-s000-r288-fzf-tab-complete -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-fzf-tab-debug () {
	_zsh_highlight_call_widget orig-s000-r288-fzf-tab-debug -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-fzf-tab-dummy () {
	_zsh_highlight_call_widget orig-s000-r288-fzf-tab-dummy -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-get-line () {
	_zsh_highlight_call_widget orig-s000-r288-get-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-gosmacs-transpose-chars () {
	_zsh_highlight_call_widget .gosmacs-transpose-chars -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-beginning-search-backward () {
	_zsh_highlight_call_widget .history-beginning-search-backward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-beginning-search-forward () {
	_zsh_highlight_call_widget .history-beginning-search-forward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-incremental-pattern-search-backward () {
	_zsh_highlight_call_widget .history-incremental-pattern-search-backward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-incremental-pattern-search-forward () {
	_zsh_highlight_call_widget .history-incremental-pattern-search-forward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-incremental-search-backward () {
	_zsh_highlight_call_widget .history-incremental-search-backward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-incremental-search-forward () {
	_zsh_highlight_call_widget .history-incremental-search-forward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-search-backward () {
	_zsh_highlight_call_widget .history-search-backward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-history-search-forward () {
	_zsh_highlight_call_widget .history-search-forward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-infer-next-history () {
	_zsh_highlight_call_widget .infer-next-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-insert-last-word () {
	_zsh_highlight_call_widget .insert-last-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-kill-buffer () {
	_zsh_highlight_call_widget .kill-buffer -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-kill-line () {
	_zsh_highlight_call_widget .kill-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-kill-region () {
	_zsh_highlight_call_widget .kill-region -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-kill-whole-line () {
	_zsh_highlight_call_widget .kill-whole-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-kill-word () {
	_zsh_highlight_call_widget .kill-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-list-choices () {
	_zsh_highlight_call_widget orig-s000-r288-list-choices -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-list-expand () {
	_zsh_highlight_call_widget .list-expand -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-magic-space () {
	_zsh_highlight_call_widget .magic-space -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-menu-complete () {
	_zsh_highlight_call_widget orig-s000-r288-menu-complete -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-menu-expand-or-complete () {
	_zsh_highlight_call_widget orig-s000-r288-menu-expand-or-complete -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-menu-select () {
	_zsh_highlight_call_widget .menu-select -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-neg-argument () {
	_zsh_highlight_call_widget .neg-argument -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-overwrite-mode () {
	_zsh_highlight_call_widget .overwrite-mode -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-pound-insert () {
	_zsh_highlight_call_widget .pound-insert -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-push-input () {
	_zsh_highlight_call_widget orig-s000-r288-push-input -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-push-line () {
	_zsh_highlight_call_widget orig-s000-r288-push-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-push-line-or-edit () {
	_zsh_highlight_call_widget orig-s000-r288-push-line-or-edit -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-put-replace-selection () {
	_zsh_highlight_call_widget .put-replace-selection -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-quote-line () {
	_zsh_highlight_call_widget .quote-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-quote-region () {
	_zsh_highlight_call_widget .quote-region -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-quoted-insert () {
	_zsh_highlight_call_widget .quoted-insert -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-read-command () {
	_zsh_highlight_call_widget .read-command -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-recursive-edit () {
	_zsh_highlight_call_widget .recursive-edit -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-redisplay () {
	_zsh_highlight_call_widget .redisplay -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-redo () {
	_zsh_highlight_call_widget .redo -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-reset-prompt () {
	_zsh_highlight_call_widget .reset-prompt -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-reverse-menu-complete () {
	_zsh_highlight_call_widget orig-s000-r288-reverse-menu-complete -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-select-a-blank-word () {
	_zsh_highlight_call_widget .select-a-blank-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-select-a-shell-word () {
	_zsh_highlight_call_widget .select-a-shell-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-select-a-word () {
	_zsh_highlight_call_widget .select-a-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-select-in-blank-word () {
	_zsh_highlight_call_widget .select-in-blank-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-select-in-shell-word () {
	_zsh_highlight_call_widget .select-in-shell-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-select-in-word () {
	_zsh_highlight_call_widget .select-in-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-self-insert () {
	_zsh_highlight_call_widget orig-s000-r288-self-insert -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-self-insert-unmeta () {
	_zsh_highlight_call_widget .self-insert-unmeta -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-send-break () {
	_zsh_highlight_call_widget .send-break -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-set-mark-command () {
	_zsh_highlight_call_widget .set-mark-command -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-spell-word () {
	_zsh_highlight_call_widget .spell-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-split-undo () {
	_zsh_highlight_call_widget .split-undo -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-toggle-fzf-tab () {
	_zsh_highlight_call_widget orig-s000-r288-toggle-fzf-tab -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-transpose-chars () {
	_zsh_highlight_call_widget .transpose-chars -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-transpose-words () {
	_zsh_highlight_call_widget .transpose-words -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-undefined-key () {
	_zsh_highlight_call_widget .undefined-key -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-undo () {
	_zsh_highlight_call_widget orig-s000-r288-undo -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-universal-argument () {
	_zsh_highlight_call_widget .universal-argument -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-up-case-word () {
	_zsh_highlight_call_widget .up-case-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-up-history () {
	_zsh_highlight_call_widget .up-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-up-line () {
	_zsh_highlight_call_widget .up-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-up-line-or-beginning-search () {
	_zsh_highlight_call_widget orig-s000-r288-up-line-or-beginning-search -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-up-line-or-history () {
	_zsh_highlight_call_widget .up-line-or-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-up-line-or-search () {
	_zsh_highlight_call_widget .up-line-or-search -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-add-eol () {
	_zsh_highlight_call_widget .vi-add-eol -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-add-next () {
	_zsh_highlight_call_widget .vi-add-next -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-backward-blank-word () {
	_zsh_highlight_call_widget .vi-backward-blank-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-backward-blank-word-end () {
	_zsh_highlight_call_widget .vi-backward-blank-word-end -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-backward-char () {
	_zsh_highlight_call_widget .vi-backward-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-backward-delete-char () {
	_zsh_highlight_call_widget .vi-backward-delete-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-backward-kill-word () {
	_zsh_highlight_call_widget .vi-backward-kill-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-backward-word () {
	_zsh_highlight_call_widget .vi-backward-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-backward-word-end () {
	_zsh_highlight_call_widget .vi-backward-word-end -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-beginning-of-line () {
	_zsh_highlight_call_widget .vi-beginning-of-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-caps-lock-panic () {
	_zsh_highlight_call_widget .vi-caps-lock-panic -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-change () {
	_zsh_highlight_call_widget .vi-change -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-change-eol () {
	_zsh_highlight_call_widget .vi-change-eol -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-change-whole-line () {
	_zsh_highlight_call_widget .vi-change-whole-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-cmd-mode () {
	_zsh_highlight_call_widget .vi-cmd-mode -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-delete () {
	_zsh_highlight_call_widget .vi-delete -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-delete-char () {
	_zsh_highlight_call_widget .vi-delete-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-digit-or-beginning-of-line () {
	_zsh_highlight_call_widget .vi-digit-or-beginning-of-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-down-case () {
	_zsh_highlight_call_widget .vi-down-case -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-down-line-or-history () {
	_zsh_highlight_call_widget .vi-down-line-or-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-end-of-line () {
	_zsh_highlight_call_widget .vi-end-of-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-fetch-history () {
	_zsh_highlight_call_widget .vi-fetch-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-find-next-char () {
	_zsh_highlight_call_widget .vi-find-next-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-find-next-char-skip () {
	_zsh_highlight_call_widget .vi-find-next-char-skip -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-find-prev-char () {
	_zsh_highlight_call_widget .vi-find-prev-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-find-prev-char-skip () {
	_zsh_highlight_call_widget .vi-find-prev-char-skip -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-first-non-blank () {
	_zsh_highlight_call_widget .vi-first-non-blank -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-forward-blank-word () {
	_zsh_highlight_call_widget .vi-forward-blank-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-forward-blank-word-end () {
	_zsh_highlight_call_widget .vi-forward-blank-word-end -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-forward-char () {
	_zsh_highlight_call_widget .vi-forward-char -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-forward-word () {
	_zsh_highlight_call_widget .vi-forward-word -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-forward-word-end () {
	_zsh_highlight_call_widget .vi-forward-word-end -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-goto-column () {
	_zsh_highlight_call_widget .vi-goto-column -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-goto-mark () {
	_zsh_highlight_call_widget .vi-goto-mark -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-goto-mark-line () {
	_zsh_highlight_call_widget .vi-goto-mark-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-history-search-backward () {
	_zsh_highlight_call_widget .vi-history-search-backward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-history-search-forward () {
	_zsh_highlight_call_widget .vi-history-search-forward -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-indent () {
	_zsh_highlight_call_widget .vi-indent -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-insert () {
	_zsh_highlight_call_widget .vi-insert -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-insert-bol () {
	_zsh_highlight_call_widget .vi-insert-bol -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-join () {
	_zsh_highlight_call_widget .vi-join -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-kill-eol () {
	_zsh_highlight_call_widget .vi-kill-eol -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-kill-line () {
	_zsh_highlight_call_widget .vi-kill-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-match-bracket () {
	_zsh_highlight_call_widget .vi-match-bracket -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-open-line-above () {
	_zsh_highlight_call_widget .vi-open-line-above -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-open-line-below () {
	_zsh_highlight_call_widget .vi-open-line-below -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-oper-swap-case () {
	_zsh_highlight_call_widget .vi-oper-swap-case -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-pound-insert () {
	_zsh_highlight_call_widget .vi-pound-insert -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-put-after () {
	_zsh_highlight_call_widget .vi-put-after -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-put-before () {
	_zsh_highlight_call_widget .vi-put-before -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-quoted-insert () {
	_zsh_highlight_call_widget .vi-quoted-insert -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-repeat-change () {
	_zsh_highlight_call_widget .vi-repeat-change -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-repeat-find () {
	_zsh_highlight_call_widget .vi-repeat-find -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-repeat-search () {
	_zsh_highlight_call_widget .vi-repeat-search -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-replace () {
	_zsh_highlight_call_widget .vi-replace -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-replace-chars () {
	_zsh_highlight_call_widget .vi-replace-chars -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-rev-repeat-find () {
	_zsh_highlight_call_widget .vi-rev-repeat-find -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-rev-repeat-search () {
	_zsh_highlight_call_widget .vi-rev-repeat-search -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-set-buffer () {
	_zsh_highlight_call_widget .vi-set-buffer -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-set-mark () {
	_zsh_highlight_call_widget .vi-set-mark -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-substitute () {
	_zsh_highlight_call_widget .vi-substitute -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-swap-case () {
	_zsh_highlight_call_widget .vi-swap-case -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-undo-change () {
	_zsh_highlight_call_widget .vi-undo-change -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-unindent () {
	_zsh_highlight_call_widget .vi-unindent -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-up-case () {
	_zsh_highlight_call_widget .vi-up-case -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-up-line-or-history () {
	_zsh_highlight_call_widget .vi-up-line-or-history -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-yank () {
	_zsh_highlight_call_widget .vi-yank -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-yank-eol () {
	_zsh_highlight_call_widget .vi-yank-eol -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-vi-yank-whole-line () {
	_zsh_highlight_call_widget .vi-yank-whole-line -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-visual-line-mode () {
	_zsh_highlight_call_widget .visual-line-mode -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-visual-mode () {
	_zsh_highlight_call_widget .visual-mode -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-what-cursor-position () {
	_zsh_highlight_call_widget .what-cursor-position -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-where-is () {
	_zsh_highlight_call_widget .where-is -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-yank-pop () {
	_zsh_highlight_call_widget .yank-pop -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-zle-line-finish () {
	_zsh_highlight_call_widget orig-s000-r288-zle-line-finish -- "$@"
}
_zsh_highlight_widget_orig-s000-r288-zle-line-init () {
	_zsh_highlight_call_widget orig-s000-r288-zle-line-init -- "$@"
}
_zsh_highlight_widget_zle-isearch-update () {
	:
	_zsh_highlight
}
_zsocket () {
	# undefined
	builtin autoload -XUz
}
_zstyle () {
	# undefined
	builtin autoload -XUz
}
_ztodo () {
	# undefined
	builtin autoload -XUz
}
_zypper () {
	# undefined
	builtin autoload -XUz
}
add-zle-hook-widget () {
	local -a hooktypes
	zstyle -a zle-hook types hooktypes
	local usage="Usage: $funcstack[1] hook widgetname\nValid hooks are:\n  $hooktypes" 
	local opt
	local -a autoopts
	integer del list help
	while getopts "dDhLUzk" opt
	do
		case $opt in
			(d) del=1  ;;
			(D) del=2  ;;
			(h) help=1  ;;
			(L) list=1  ;;
			([Uzk]) autoopts+=(-$opt)  ;;
			(*) return 1 ;;
		esac
	done
	shift $(( OPTIND - 1 ))
	1=${1#zle-} 
	if (( list ))
	then
		zstyle -L "zle-(${1:-${(@j:|:)hooktypes[@]}})" widgets
		return $?
	elif (( help || $# != 2 || ${hooktypes[(I)$1]} == 0 ))
	then
		print -u$(( 2 - help )) $usage
		return $(( 1 - help ))
	fi
	local -aU extant_hooks
	local hook="zle-$1" 
	local fn="$2" 
	if (( del ))
	then
		if zstyle -g extant_hooks "$hook" widgets
		then
			if (( del == 2 ))
			then
				set -A extant_hooks ${extant_hooks[@]:#(<->:|)${~fn}}
			else
				set -A extant_hooks ${extant_hooks[@]:#(<->:|)$fn}
			fi
			if (( ${#extant_hooks} ))
			then
				zstyle "$hook" widgets "${extant_hooks[@]}"
			else
				zstyle -d "$hook" widgets
			fi
		fi
	else
		if [[ "$fn" = "$hook" ]]
		then
			if (( ${+widgets[$fn]} ))
			then
				print -u2 "$funcstack[1]: Cannot hook $fn to itself"
				return 1
			fi
			autoload "${autoopts[@]}" -- "$fn"
			zle -N "$fn"
			return 0
		fi
		integer i=${#options[ksharrays]}-2 
		zstyle -g extant_hooks "$hook" widgets
		if [[ ${widgets[$hook]:-} != "user:azhw:$hook" ]]
		then
			if [[ -n ${widgets[$hook]:-} ]]
			then
				zle -A "$hook" "${widgets[$hook]}"
				extant_hooks=(0:"${widgets[$hook]}" "${extant_hooks[@]}") 
			fi
			zle -N "$hook" azhw:"$hook"
		fi
		if [[ -z ${(M)extant_hooks[@]:#(<->:|)$fn} ]]
		then
			i=${${(On@)${(@M)extant_hooks[@]#<->:}%:}[i]:-0}+1 
		else
			return 0
		fi
		extant_hooks+=("${i}:${fn}") 
		zstyle -- "$hook" widgets "${extant_hooks[@]}"
		if (( ! ${+widgets[$fn]} ))
		then
			autoload "${autoopts[@]}" -- "$fn"
			zle -N -- "$fn"
		fi
		if (( ! ${+widgets[$hook]} ))
		then
			zle -N "$hook" azhw:"$hook"
		fi
	fi
}
add-zsh-hook () {
	emulate -L zsh
	local -a hooktypes
	hooktypes=(chpwd precmd preexec periodic zshaddhistory zshexit zsh_directory_name) 
	local usage="Usage: add-zsh-hook hook function\nValid hooks are:\n  $hooktypes" 
	local opt
	local -a autoopts
	integer del list help
	while getopts "dDhLUzk" opt
	do
		case $opt in
			(d) del=1  ;;
			(D) del=2  ;;
			(h) help=1  ;;
			(L) list=1  ;;
			([Uzk]) autoopts+=(-$opt)  ;;
			(*) return 1 ;;
		esac
	done
	shift $(( OPTIND - 1 ))
	if (( list ))
	then
		typeset -mp "(${1:-${(@j:|:)hooktypes}})_functions"
		return $?
	elif (( help || $# != 2 || ${hooktypes[(I)$1]} == 0 ))
	then
		print -u$(( 2 - help )) $usage
		return $(( 1 - help ))
	fi
	local hook="${1}_functions" 
	local fn="$2" 
	if (( del ))
	then
		if (( ${(P)+hook} ))
		then
			if (( del == 2 ))
			then
				set -A $hook ${(P)hook:#${~fn}}
			else
				set -A $hook ${(P)hook:#$fn}
			fi
			if (( ! ${(P)#hook} ))
			then
				unset $hook
			fi
		fi
	else
		if (( ${(P)+hook} ))
		then
			if (( ${${(P)hook}[(I)$fn]} == 0 ))
			then
				typeset -ga $hook
				set -A $hook ${(P)hook} $fn
			fi
		else
			typeset -ga $hook
			set -A $hook $fn
		fi
		autoload $autoopts -- $fn
	fi
}
alias_value () {
	(( $+aliases[$1] )) && echo $aliases[$1]
}
azhw:zle-history-line-set () {
	local -a hook_widgets
	local hook
	zstyle -a $WIDGET widgets hook_widgets
	for hook in "${(@)${(@on)hook_widgets[@]}#<->:}"
	do
		if [[ "$hook" = user:* ]]
		then
			zle "$hook" -N -- "$@"
		else
			zle "$hook" -Nw -- "$@"
		fi || return
	done
	return 0
}
azhw:zle-isearch-exit () {
	local -a hook_widgets
	local hook
	zstyle -a $WIDGET widgets hook_widgets
	for hook in "${(@)${(@on)hook_widgets[@]}#<->:}"
	do
		if [[ "$hook" = user:* ]]
		then
			zle "$hook" -N -- "$@"
		else
			zle "$hook" -Nw -- "$@"
		fi || return
	done
	return 0
}
azhw:zle-isearch-update () {
	local -a hook_widgets
	local hook
	zstyle -a $WIDGET widgets hook_widgets
	for hook in "${(@)${(@on)hook_widgets[@]}#<->:}"
	do
		if [[ "$hook" = user:* ]]
		then
			zle "$hook" -N -- "$@"
		else
			zle "$hook" -Nw -- "$@"
		fi || return
	done
	return 0
}
azhw:zle-keymap-select () {
	local -a hook_widgets
	local hook
	zstyle -a $WIDGET widgets hook_widgets
	for hook in "${(@)${(@on)hook_widgets[@]}#<->:}"
	do
		if [[ "$hook" = user:* ]]
		then
			zle "$hook" -N -- "$@"
		else
			zle "$hook" -Nw -- "$@"
		fi || return
	done
	return 0
}
azhw:zle-line-finish () {
	local -a hook_widgets
	local hook
	zstyle -a $WIDGET widgets hook_widgets
	for hook in "${(@)${(@on)hook_widgets[@]}#<->:}"
	do
		if [[ "$hook" = user:* ]]
		then
			zle "$hook" -N -- "$@"
		else
			zle "$hook" -Nw -- "$@"
		fi || return
	done
	return 0
}
azhw:zle-line-init () {
	local -a hook_widgets
	local hook
	zstyle -a $WIDGET widgets hook_widgets
	for hook in "${(@)${(@on)hook_widgets[@]}#<->:}"
	do
		if [[ "$hook" = user:* ]]
		then
			zle "$hook" -N -- "$@"
		else
			zle "$hook" -Nw -- "$@"
		fi || return
	done
	return 0
}
azhw:zle-line-pre-redraw () {
	local -a hook_widgets
	local hook
	zstyle -a $WIDGET widgets hook_widgets
	for hook in "${(@)${(@on)hook_widgets[@]}#<->:}"
	do
		if [[ "$hook" = user:* ]]
		then
			zle "$hook" -N -- "$@"
		else
			zle "$hook" -Nw -- "$@"
		fi || return
	done
	return 0
}
bashcompinit () {
	# undefined
	builtin autoload -XUz
}
bracketed-paste-magic () {
	# undefined
	builtin autoload -XUz
}
build-fzf-tab-module () {
	local MACOS
	if [[ ${OSTYPE} == darwin* ]]
	then
		MACOS=true 
	fi
	pushd $FZF_TAB_HOME/modules
	CPPFLAGS=-I/usr/local/include CFLAGS="-g -Wall -O2" LDFLAGS=-L/usr/local/lib ./configure --disable-gdbm --without-tcsetpgrp ${MACOS:+DL_EXT=bundle}
	make -j
	popd
}
cd () {
	builtin cd $* && ls
}
check_alias_usage () {
	local limit="${1:-9000000000000000}" 
	local key
	declare -A usage
	for key in "${(@k)aliases}"
	do
		usage[$key]=0 
	done
	local current=0 
	local total=$(wc -l < "$HISTFILE") 
	if [[ $total -gt $limit ]]
	then
		total=$limit 
	fi
	 < "$HISTFILE" | tail "-$limit" | cut -d";" -f2 | while read line
	do
		local entry
		for entry in ${(@s/|/)line}
		do
			entry="$(echo "$entry" | sed -e 's/^ *//')" 
			local word=${entry[(w)1]} 
			if [[ -n ${usage[$word]} ]]
			then
				local prev=$usage[$word] 
				let "prev = prev + 1 "
				usage[$word]=$prev 
			fi
		done
		let "current = current + 1"
		printf "[$current/$total]\r"
	done
	printf "\r\033[K"
	for key in ${(k)usage}
	do
		echo "${usage[$key]}: $key='${aliases[$key]}'"
	done | sort -rn -k1
}
chruby_prompt_info () {
	return 1
}
colored () {
	local -a environment
	local k v
	for k v in "${(@kv)less_termcap}"
	do
		environment+=("LESS_TERMCAP_${k}=${v}") 
	done
	environment+=(PAGER="${commands[less]:-$PAGER}") 
	if [[ "$OSTYPE" = solaris* ]]
	then
		environment+=(PATH="${__colored_man_pages_dir}:$PATH") 
	fi
	command env $environment "$@"
}
colorize_cat () {
	if ! colorize_check_requirements
	then
		return 1
	fi
	if [ -z "$ZSH_COLORIZE_STYLE" ]
	then
		ZSH_COLORIZE_STYLE="emacs" 
	fi
	if [ $# -eq 0 ]
	then
		if [[ "$ZSH_COLORIZE_TOOL" == "pygmentize" ]]
		then
			pygmentize -O style="$ZSH_COLORIZE_STYLE" -g
		else
			chroma --style="$ZSH_COLORIZE_STYLE" --formatter="${ZSH_COLORIZE_CHROMA_FORMATTER:-terminal}"
		fi
		return $?
	fi
	local FNAME lexer
	for FNAME in "$@"
	do
		if [[ "$ZSH_COLORIZE_TOOL" == "pygmentize" ]]
		then
			lexer=$(pygmentize -N "$FNAME") 
			if [[ $lexer != text ]]
			then
				pygmentize -O style="$ZSH_COLORIZE_STYLE" -l "$lexer" "$FNAME"
			else
				pygmentize -O style="$ZSH_COLORIZE_STYLE" -g "$FNAME"
			fi
		else
			chroma --style="$ZSH_COLORIZE_STYLE" --formatter="${ZSH_COLORIZE_CHROMA_FORMATTER:-terminal}" "$FNAME"
		fi
	done
}
colorize_check_requirements () {
	local -a available_tools
	available_tools=("chroma" "pygmentize") 
	if [ -z "$ZSH_COLORIZE_TOOL" ]
	then
		if (( $+commands[pygmentize] ))
		then
			ZSH_COLORIZE_TOOL="pygmentize" 
		elif (( $+commands[chroma] ))
		then
			ZSH_COLORIZE_TOOL="chroma" 
		else
			echo "Neither 'pygments' nor 'chroma' is installed!" >&2
			return 1
		fi
	fi
	if [[ ${available_tools[(Ie)$ZSH_COLORIZE_TOOL]} -eq 0 ]]
	then
		echo "ZSH_COLORIZE_TOOL '$ZSH_COLORIZE_TOOL' not recognized. Available options are 'pygmentize' and 'chroma'." >&2
		return 1
	elif (( $+commands["$ZSH_COLORIZE_TOOL"] ))
	then
		echo "Package '$ZSH_COLORIZE_TOOL' is not installed!" >&2
		return 1
	fi
}
colorize_less () {
	if ! colorize_check_requirements
	then
		return 1
	fi
	_cless () {
		local LESS="-R $LESS" 
		local LESSOPEN="| zsh -c 'source \"$ZSH_COLORIZE_PLUGIN_PATH\";         ZSH_COLORIZE_TOOL=$ZSH_COLORIZE_TOOL ZSH_COLORIZE_STYLE=$ZSH_COLORIZE_STYLE         colorize_cat %s 2> /dev/null'" 
		local LESSCLOSE="" 
		LESS="$LESS" LESSOPEN="$LESSOPEN" LESSCLOSE="$LESSCLOSE" command less "$@"
	}
	if [ -t 0 ]
	then
		_cless "$@"
	else
		colorize_cat | _cless "$@"
	fi
}
colors () {
	emulate -L zsh
	typeset -Ag color colour
	color=(00 none 01 bold 02 faint 22 normal 03 standout 23 no-standout 04 underline 24 no-underline 05 blink 25 no-blink 07 reverse 27 no-reverse 08 conceal 28 no-conceal 30 black 40 bg-black 31 red 41 bg-red 32 green 42 bg-green 33 yellow 43 bg-yellow 34 blue 44 bg-blue 35 magenta 45 bg-magenta 36 cyan 46 bg-cyan 37 white 47 bg-white 39 default 49 bg-default) 
	local k
	for k in ${(k)color}
	do
		color[${color[$k]}]=$k 
	done
	for k in ${color[(I)3?]}
	do
		color[fg-${color[$k]}]=$k 
	done
	color[grey]=${color[black]} 
	color[fg-grey]=${color[grey]} 
	color[bg-grey]=${color[bg-black]} 
	colour=(${(kv)color}) 
	local lc=$'\e[' rc=m 
	typeset -Hg reset_color bold_color
	reset_color="$lc${color[none]}$rc" 
	bold_color="$lc${color[bold]}$rc" 
	typeset -AHg fg fg_bold fg_no_bold
	for k in ${(k)color[(I)fg-*]}
	do
		fg[${k#fg-}]="$lc${color[$k]}$rc" 
		fg_bold[${k#fg-}]="$lc${color[bold]};${color[$k]}$rc" 
		fg_no_bold[${k#fg-}]="$lc${color[normal]};${color[$k]}$rc" 
	done
	typeset -AHg bg bg_bold bg_no_bold
	for k in ${(k)color[(I)bg-*]}
	do
		bg[${k#bg-}]="$lc${color[$k]}$rc" 
		bg_bold[${k#bg-}]="$lc${color[bold]};${color[$k]}$rc" 
		bg_no_bold[${k#bg-}]="$lc${color[normal]};${color[$k]}$rc" 
	done
}
command_not_found_handler () {
	/data/data/com.termux/files/usr/libexec/termux/command-not-found "$1"
}
compadd () {
	local -A apre hpre dscrs _oad
	local -a isfile _opts __ expl
	zparseopts -E -a _opts P:=apre p:=hpre d:=dscrs X+:=expl O:=_oad A:=_oad D:=_oad f=isfile i: S: s: I: x: r: R: W: F: M+: E: q e Q n U C J:=__ V:=__ a=__ l=__ k=__ o=__ 1=__ 2=__
	if (( $#_oad != 0 || ! IN_FZF_TAB ))
	then
		builtin compadd "$@"
		return
	fi
	local -a __hits __dscr
	if (( $#dscrs == 1 ))
	then
		__dscr=("${(@P)${(v)dscrs}}") 
	fi
	builtin compadd -A __hits -D __dscr "$@"
	local ret=$? 
	if (( $#__hits == 0 ))
	then
		return $ret
	fi
	_ftb_curcontext=${curcontext#:} 
	expl=$expl[2] 
	[[ -n $expl ]] && _ftb_groups+=$expl 
	local -a keys=(apre hpre PREFIX SUFFIX IPREFIX ISUFFIX) 
	local key expanded __tmp_value=$'<\0>' 
	for key in $keys
	do
		expanded=${(P)key} 
		if [[ -n $expanded ]]
		then
			__tmp_value+=$'\0'$key$'\0'$expanded 
		fi
	done
	if [[ -n $expl ]]
	then
		__tmp_value+=$'\0group\0'$_ftb_groups[(ie)$expl] 
	fi
	if [[ -n $isfile ]]
	then
		__tmp_value+=$'\0realdir\0'${${(Qe)~${:-$IPREFIX$hpre}}} 
	fi
	_opts+=("${(@kv)apre}" "${(@kv)hpre}" $isfile) 
	__tmp_value+=$'\0args\0'${(pj:\1:)_opts} 
	if (( $+builtins[fzf-tab-compcap-generate] ))
	then
		fzf-tab-compcap-generate __hits __dscr __tmp_value
	else
		local dscr word i
		for i in {1..$#__hits}
		do
			word=$__hits[i] dscr=$__dscr[i] 
			if [[ -n $dscr ]]
			then
				dscr=${dscr//$'\n'} 
			elif [[ -n $word ]]
			then
				dscr=$word 
			fi
			_ftb_compcap+=$dscr$'\2'$__tmp_value$'\0word\0'$word 
		done
	fi
	builtin compadd -U -qS '' -R -ftb-remove-space ''
}
compaudit () {
	# undefined
	builtin autoload -XUz
}
compdef () {
	local opt autol type func delete eval new i ret=0 cmd svc 
	local -a match mbegin mend
	emulate -L zsh
	setopt extendedglob
	if (( ! $# ))
	then
		print -u2 "$0: I need arguments"
		return 1
	fi
	while getopts "anpPkKde" opt
	do
		case "$opt" in
			(a) autol=yes  ;;
			(n) new=yes  ;;
			([pPkK]) if [[ -n "$type" ]]
				then
					print -u2 "$0: type already set to $type"
					return 1
				fi
				if [[ "$opt" = p ]]
				then
					type=pattern 
				elif [[ "$opt" = P ]]
				then
					type=postpattern 
				elif [[ "$opt" = K ]]
				then
					type=widgetkey 
				else
					type=key 
				fi ;;
			(d) delete=yes  ;;
			(e) eval=yes  ;;
		esac
	done
	shift OPTIND-1
	if (( ! $# ))
	then
		print -u2 "$0: I need arguments"
		return 1
	fi
	if [[ -z "$delete" ]]
	then
		if [[ -z "$eval" ]] && [[ "$1" = *\=* ]]
		then
			while (( $# ))
			do
				if [[ "$1" = *\=* ]]
				then
					cmd="${1%%\=*}" 
					svc="${1#*\=}" 
					func="$_comps[${_services[(r)$svc]:-$svc}]" 
					[[ -n ${_services[$svc]} ]] && svc=${_services[$svc]} 
					[[ -z "$func" ]] && func="${${_patcomps[(K)$svc][1]}:-${_postpatcomps[(K)$svc][1]}}" 
					if [[ -n "$func" ]]
					then
						_comps[$cmd]="$func" 
						_services[$cmd]="$svc" 
					else
						print -u2 "$0: unknown command or service: $svc"
						ret=1 
					fi
				else
					print -u2 "$0: invalid argument: $1"
					ret=1 
				fi
				shift
			done
			return ret
		fi
		func="$1" 
		[[ -n "$autol" ]] && autoload -Uz "$func"
		shift
		case "$type" in
			(widgetkey) while [[ -n $1 ]]
				do
					if [[ $# -lt 3 ]]
					then
						print -u2 "$0: compdef -K requires <widget> <comp-widget> <key>"
						return 1
					fi
					[[ $1 = _* ]] || 1="_$1" 
					[[ $2 = .* ]] || 2=".$2" 
					[[ $2 = .menu-select ]] && zmodload -i zsh/complist
					zle -C "$1" "$2" "$func"
					if [[ -n $new ]]
					then
						bindkey "$3" | IFS=$' \t' read -A opt
						[[ $opt[-1] = undefined-key ]] && bindkey "$3" "$1"
					else
						bindkey "$3" "$1"
					fi
					shift 3
				done ;;
			(key) if [[ $# -lt 2 ]]
				then
					print -u2 "$0: missing keys"
					return 1
				fi
				if [[ $1 = .* ]]
				then
					[[ $1 = .menu-select ]] && zmodload -i zsh/complist
					zle -C "$func" "$1" "$func"
				else
					[[ $1 = menu-select ]] && zmodload -i zsh/complist
					zle -C "$func" ".$1" "$func"
				fi
				shift
				for i
				do
					if [[ -n $new ]]
					then
						bindkey "$i" | IFS=$' \t' read -A opt
						[[ $opt[-1] = undefined-key ]] || continue
					fi
					bindkey "$i" "$func"
				done ;;
			(*) while (( $# ))
				do
					if [[ "$1" = -N ]]
					then
						type=normal 
					elif [[ "$1" = -p ]]
					then
						type=pattern 
					elif [[ "$1" = -P ]]
					then
						type=postpattern 
					else
						case "$type" in
							(pattern) if [[ $1 = (#b)(*)=(*) ]]
								then
									_patcomps[$match[1]]="=$match[2]=$func" 
								else
									_patcomps[$1]="$func" 
								fi ;;
							(postpattern) if [[ $1 = (#b)(*)=(*) ]]
								then
									_postpatcomps[$match[1]]="=$match[2]=$func" 
								else
									_postpatcomps[$1]="$func" 
								fi ;;
							(*) if [[ "$1" = *\=* ]]
								then
									cmd="${1%%\=*}" 
									svc=yes 
								else
									cmd="$1" 
									svc= 
								fi
								if [[ -z "$new" || -z "${_comps[$1]}" ]]
								then
									_comps[$cmd]="$func" 
									[[ -n "$svc" ]] && _services[$cmd]="${1#*\=}" 
								fi ;;
						esac
					fi
					shift
				done ;;
		esac
	else
		case "$type" in
			(pattern) unset "_patcomps[$^@]" ;;
			(postpattern) unset "_postpatcomps[$^@]" ;;
			(key) print -u2 "$0: cannot restore key bindings"
				return 1 ;;
			(*) unset "_comps[$^@]" ;;
		esac
	fi
}
compdump () {
	# undefined
	builtin autoload -XUz
}
compgen () {
	local opts prefix suffix job OPTARG OPTIND ret=1 
	local -a name res results jids
	local -A shortopts
	emulate -L sh
	setopt kshglob noshglob braceexpand nokshautoload
	shortopts=(a alias b builtin c command d directory e export f file g group j job k keyword u user v variable) 
	while getopts "o:A:G:C:F:P:S:W:X:abcdefgjkuv" name
	do
		case $name in
			([abcdefgjkuv]) OPTARG="${shortopts[$name]}"  ;&
			(A) case $OPTARG in
					(alias) results+=("${(k)aliases[@]}")  ;;
					(arrayvar) results+=("${(k@)parameters[(R)array*]}")  ;;
					(binding) results+=("${(k)widgets[@]}")  ;;
					(builtin) results+=("${(k)builtins[@]}" "${(k)dis_builtins[@]}")  ;;
					(command) results+=("${(k)commands[@]}" "${(k)aliases[@]}" "${(k)builtins[@]}" "${(k)functions[@]}" "${(k)reswords[@]}")  ;;
					(directory) setopt bareglobqual
						results+=(${IPREFIX}${PREFIX}*${SUFFIX}${ISUFFIX}(N-/)) 
						setopt nobareglobqual ;;
					(disabled) results+=("${(k)dis_builtins[@]}")  ;;
					(enabled) results+=("${(k)builtins[@]}")  ;;
					(export) results+=("${(k)parameters[(R)*export*]}")  ;;
					(file) setopt bareglobqual
						results+=(${IPREFIX}${PREFIX}*${SUFFIX}${ISUFFIX}(N)) 
						setopt nobareglobqual ;;
					(function) results+=("${(k)functions[@]}")  ;;
					(group) emulate zsh
						_groups -U -O res
						emulate sh
						setopt kshglob noshglob braceexpand
						results+=("${res[@]}")  ;;
					(hostname) emulate zsh
						_hosts -U -O res
						emulate sh
						setopt kshglob noshglob braceexpand
						results+=("${res[@]}")  ;;
					(job) results+=("${savejobtexts[@]%% *}")  ;;
					(keyword) results+=("${(k)reswords[@]}")  ;;
					(running) jids=("${(@k)savejobstates[(R)running*]}") 
						for job in "${jids[@]}"
						do
							results+=(${savejobtexts[$job]%% *}) 
						done ;;
					(stopped) jids=("${(@k)savejobstates[(R)suspended*]}") 
						for job in "${jids[@]}"
						do
							results+=(${savejobtexts[$job]%% *}) 
						done ;;
					(setopt | shopt) results+=("${(k)options[@]}")  ;;
					(signal) results+=("SIG${^signals[@]}")  ;;
					(user) results+=("${(k)userdirs[@]}")  ;;
					(variable) results+=("${(k)parameters[@]}")  ;;
					(helptopic)  ;;
				esac ;;
			(F) COMPREPLY=() 
				local -a args
				args=("${words[0]}" "${@[-1]}" "${words[CURRENT-2]}") 
				() {
					typeset -h words
					$OPTARG "${args[@]}"
				}
				results+=("${COMPREPLY[@]}")  ;;
			(G) setopt nullglob
				results+=(${~OPTARG}) 
				unsetopt nullglob ;;
			(W) results+=(${(Q)~=OPTARG})  ;;
			(C) results+=($(eval $OPTARG))  ;;
			(P) prefix="$OPTARG"  ;;
			(S) suffix="$OPTARG"  ;;
			(X) if [[ ${OPTARG[0]} = '!' ]]
				then
					results=("${(M)results[@]:#${OPTARG#?}}") 
				else
					results=("${results[@]:#$OPTARG}") 
				fi ;;
		esac
	done
	print -l -r -- "$prefix${^results[@]}$suffix"
}
compinit () {
	# undefined
	builtin autoload -XUz
}
compinstall () {
	# undefined
	builtin autoload -XUz
}
complete () {
	emulate -L zsh
	local args void cmd print remove
	args=("$@") 
	zparseopts -D -a void o: A: G: W: C: F: P: S: X: a b c d e f g j k u v p=print r=remove
	if [[ -n $print ]]
	then
		printf 'complete %2$s %1$s\n' "${(@kv)_comps[(R)_bash*]#* }"
	elif [[ -n $remove ]]
	then
		for cmd
		do
			unset "_comps[$cmd]"
		done
	else
		compdef _bash_complete\ ${(j. .)${(q)args[1,-1-$#]}} "$@"
	fi
}
d () {
	if [[ -n $1 ]]
	then
		dirs "$@"
	else
		dirs -v | head -10
	fi
}
debman () {
	colored $0 "$@"
}
default () {
	(( $+parameters[$1] )) && return 0
	typeset -g "$1"="$2" && return 3
}
disable-fzf-tab () {
	emulate -L zsh -o extended_glob
	(( $+_ftb_orig_widget )) || return 0
	bindkey '^I' $_ftb_orig_widget
	case $_ftb_orig_list_grouped in
		(0) zstyle ':completion:*' list-grouped false ;;
		(1) zstyle ':completion:*' list-grouped true ;;
		(2) zstyle -d ':completion:*' list-grouped ;;
	esac
	unset _ftb_orig_widget _ftb_orig_list_groupded
	unfunction compadd 2> /dev/null
	functions[_main_complete]=$functions[_ftb__main_complete] 
	functions[_approximate]=$functions[_ftb__approximate] 
}
disable_you_should_use () {
	add-zsh-hook -D preexec _check_aliases
	add-zsh-hook -D preexec _check_global_aliases
	add-zsh-hook -D preexec _check_git_aliases
	add-zsh-hook -D precmd _flush_ysu_buffer
}
dman () {
	colored $0 "$@"
}
down-line-or-beginning-search () {
	emulate -L zsh
	typeset -g __searching __savecursor
	if [[ ${+NUMERIC} -eq 0 && ( $LASTWIDGET = $__searching || $RBUFFER != *$'\n'* ) ]]
	then
		[[ $LASTWIDGET = $__searching ]] && CURSOR=$__savecursor 
		__searching=$WIDGET 
		__savecursor=$CURSOR 
		if zle .history-beginning-search-forward
		then
			[[ $RBUFFER = *$'\n'* ]] || zstyle -T ':zle:down-line-or-beginning-search' leave-cursor && zle .end-of-line
			return
		fi
		[[ $RBUFFER = *$'\n'* ]] || return
	fi
	__searching='' 
	zle .down-line-or-history
}
dup () {
	if [ "$#" -ne 2 ]
	then
		echo "usage: $0 path/to/file/file copied_file"
		return
	fi
	cp $1 `dirname $1`/$2
}
edit-command-line () {
	# undefined
	builtin autoload -XU
}
enable-fzf-tab () {
	emulate -L zsh -o extended_glob
	(( ! $+_ftb_orig_widget )) || disable-fzf-tab
	typeset -g _ftb_orig_widget="${${$(builtin bindkey '^I')##* }:-expand-or-complete}" 
	if (( ! $+widgets[.fzf-tab-orig-$_ftb_orig_widget] ))
	then
		local compinit_widgets=(complete-word delete-char-or-list expand-or-complete expand-or-complete-prefix list-choices menu-complete menu-expand-or-complete reverse-menu-complete) 
		if [[ $widgets[$_ftb_orig_widget] == builtin && $compinit_widgets[(Ie)$_ftb_orig_widget] != 0 ]]
		then
			zle -C .fzf-tab-orig-$_ftb_orig_widget .$_ftb_orig_widget _main_complete
		else
			zle -A $_ftb_orig_widget .fzf-tab-orig-$_ftb_orig_widget
		fi
	fi
	zstyle -t ':completion:*' list-grouped false
	typeset -g _ftb_orig_list_grouped=$? 
	zstyle ':completion:*' list-grouped false
	bindkey '^I' fzf-tab-complete
	bindkey '^X.' fzf-tab-debug
	autoload +X -Uz _main_complete _approximate
	functions[compadd]=$functions[-ftb-compadd] 
	functions[_ftb__main_complete]=$functions[_main_complete] 
	_main_complete () {
		-ftb-complete "$@"
	}
	functions[_ftb__approximate]=$functions[_approximate] 
	_approximate () {
		(( ! IN_FZF_TAB )) || unfunction compadd
		_ftb__approximate
		(( ! IN_FZF_TAB )) || functions[compadd]=$functions[-ftb-compadd] 
	}
}
enable_you_should_use () {
	disable_you_should_use
	add-zsh-hook preexec _check_aliases
	add-zsh-hook preexec _check_global_aliases
	add-zsh-hook preexec _check_git_aliases
	add-zsh-hook precmd _flush_ysu_buffer
}
env_default () {
	[[ ${parameters[$1]} = *-export* ]] && return 0
	export "$1=$2" && return 3
}
extract () {
	local remove_archive
	local success
	local extract_dir
	if (( $# == 0 ))
	then
		cat <<'EOF' >&2
Usage: extract [-option] [file ...]

Options:
    -r, --remove    Remove archive after unpacking.
EOF
	fi
	remove_archive=1 
	if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]
	then
		remove_archive=0 
		shift
	fi
	while (( $# > 0 ))
	do
		if [[ ! -f "$1" ]]
		then
			echo "extract: '$1' is not a valid file" >&2
			shift
			continue
		fi
		success=0 
		extract_dir="${1:t:r}" 
		case "${1:l}" in
			(*.tar.gz|*.tgz) (( $+commands[pigz] )) && {
					pigz -dc "$1" | tar xv
				} || tar zxvf "$1" ;;
			(*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
			(*.tar.xz|*.txz) tar --xz --help &> /dev/null && tar --xz -xvf "$1" || xzcat "$1" | tar xvf - ;;
			(*.tar.zma|*.tlz) tar --lzma --help &> /dev/null && tar --lzma -xvf "$1" || lzcat "$1" | tar xvf - ;;
			(*.tar.zst|*.tzst) tar --zstd --help &> /dev/null && tar --zstd -xvf "$1" || zstdcat "$1" | tar xvf - ;;
			(*.tar) tar xvf "$1" ;;
			(*.tar.lz) (( $+commands[lzip] )) && tar xvf "$1" ;;
			(*.tar.lz4) lz4 -c -d "$1" | tar xvf - ;;
			(*.tar.lrz) (( $+commands[lrzuntar] )) && lrzuntar "$1" ;;
			(*.gz) (( $+commands[pigz] )) && pigz -dk "$1" || gunzip -k "$1" ;;
			(*.bz2) bunzip2 "$1" ;;
			(*.xz) unxz "$1" ;;
			(*.lrz) (( $+commands[lrunzip] )) && lrunzip "$1" ;;
			(*.lz4) lz4 -d "$1" ;;
			(*.lzma) unlzma "$1" ;;
			(*.z) uncompress "$1" ;;
			(*.zip|*.war|*.jar|*.ear|*.sublime-package|*.ipa|*.ipsw|*.xpi|*.apk|*.aar|*.whl) unzip "$1" -d $extract_dir ;;
			(*.rar) unrar x -ad "$1" ;;
			(*.rpm) mkdir "$extract_dir" && cd "$extract_dir" && rpm2cpio "../$1" | cpio --quiet -id && cd .. ;;
			(*.7z) 7za x "$1" ;;
			(*.deb) mkdir -p "$extract_dir/control"
				mkdir -p "$extract_dir/data"
				cd "$extract_dir"
				ar vx "../${1}" > /dev/null
				cd control
				tar xzvf ../control.tar.gz
				cd ../data
				extract ../data.tar.*
				cd ..
				rm -i *.tar.* debian-binary
				cd .. ;;
			(*.zst) unzstd "$1" ;;
			(*) echo "extract: '$1' cannot be extracted" >&2
				success=1  ;;
		esac
		(( success = $success > 0 ? $success : $? ))
		(( $success == 0 )) && (( $remove_archive == 0 )) && rm -i "$1"
		shift
	done
}
extrakt () {
	if [ -f $1 ]
	then
		case $1 in
			(*.tar.bz2) tar xvjf $1 ;;
			(*.tar.gz) tar xvzf $1 ;;
			(*.bz2) bunzip2 $1 ;;
			(*.rar) unrar x $1 ;;
			(*.gz) gunzip $1 ;;
			(*.tar) tar xvf $1 ;;
			(*.tbz2) tar xvjf $1 ;;
			(*.tgz) tar xvzf $1 ;;
			(*.zip) unzip $1 ;;
			(*.Z) uncompress $1 ;;
			(*.7z) 7z x $1 ;;
			(*) echo "'$1' cannot be extracted via >extract<" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}
fast-theme () {
	# undefined
	builtin autoload -XUz
}
ftb-switch-group () {
	# undefined
	builtin autoload -XUz
}
ftb-tmux-popup () {
	# undefined
	builtin autoload -XUz
}
fzf-cd-widget () {
	local cmd="${FZF_ALT_C_COMMAND:-"command find -L . -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune     -o -type d -print 2> /dev/null | cut -b3-"}" 
	setopt localoptions pipefail no_aliases 2> /dev/null
	local dir="$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" $(__fzfcmd) +m)" 
	if [[ -z "$dir" ]]
	then
		zle redisplay
		return 0
	fi
	zle push-line
	BUFFER="cd ${(q)dir}" 
	zle accept-line
	local ret=$? 
	unset dir
	zle reset-prompt
	return $ret
}
fzf-completion () {
	local tokens cmd prefix trigger tail matches lbuf d_cmds
	setopt localoptions noshwordsplit noksh_arrays noposixbuiltins
	tokens=(${(z)LBUFFER}) 
	if [ ${#tokens} -lt 1 ]
	then
		zle ${fzf_default_completion:-expand-or-complete}
		return
	fi
	cmd=$(__fzf_extract_command "$LBUFFER") 
	trigger=${FZF_COMPLETION_TRIGGER-'**'} 
	[ -z "$trigger" -a ${LBUFFER[-1]} = ' ' ] && tokens+=("") 
	if [[ ${LBUFFER} = *"${tokens[-2]}${tokens[-1]}" ]]
	then
		tokens[-2]="${tokens[-2]}${tokens[-1]}" 
		tokens=(${tokens[0,-2]}) 
	fi
	lbuf=$LBUFFER 
	tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))} 
	if [ "$cmd" = kill -a ${LBUFFER[-1]} = ' ' ]
	then
		tail=$trigger 
		tokens+=$trigger 
		lbuf="$lbuf$trigger" 
	fi
	if [ ${#tokens} -gt 1 -a "$tail" = "$trigger" ]
	then
		d_cmds=(${=FZF_COMPLETION_DIR_COMMANDS:-cd pushd rmdir}) 
		[ -z "$trigger" ] && prefix=${tokens[-1]}  || prefix=${tokens[-1]:0:-${#trigger}} 
		[ -n "${tokens[-1]}" ] && lbuf=${lbuf:0:-${#tokens[-1]}} 
		if eval "type _fzf_complete_${cmd} > /dev/null"
		then
			prefix="$prefix" eval _fzf_complete_${cmd} ${(q)lbuf}
			zle reset-prompt
		elif [ ${d_cmds[(i)$cmd]} -le ${#d_cmds} ]
		then
			_fzf_dir_completion "$prefix" "$lbuf"
		else
			_fzf_path_completion "$prefix" "$lbuf"
		fi
	else
		zle ${fzf_default_completion:-expand-or-complete}
	fi
}
fzf-file-widget () {
	LBUFFER="${LBUFFER}$(__fsel)" 
	local ret=$? 
	zle reset-prompt
	return $ret
}
fzf-history-widget () {
	local selected num
	setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
	selected=($(fc -rl 1 | perl -ne 'print if !$seen{(/^\s*[0-9]+\**\s+(.*)/, $1)}++' |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort,ctrl-z:ignore $FZF_CTRL_R_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd))) 
	local ret=$? 
	if [ -n "$selected" ]
	then
		num=$selected[1] 
		if [ -n "$num" ]
		then
			zle vi-fetch-history -n $num
		fi
	fi
	zle reset-prompt
	return $ret
}
fzf-tab-complete () {
	local -i _ftb_continue=1 _ftb_accept=0 ret=0 
	echoti civis > /dev/tty 2> /dev/null
	while (( _ftb_continue ))
	do
		_ftb_continue=0 
		local IN_FZF_TAB=1 
		{
			zle .fzf-tab-orig-$_ftb_orig_widget
			ret=$? 
		} always {
			IN_FZF_TAB=0 
		}
		if (( _ftb_continue ))
		then
			zle .split-undo
			zle .reset-prompt
			zle -R
			zle fzf-tab-dummy
		fi
	done
	echoti cnorm > /dev/tty 2> /dev/null
	zle .redisplay
	(( _ftb_accept )) && zle .accept-line
	return $ret
}
fzf-tab-debug () {
	(( $+_ftb_debug_cnt )) || typeset -gi _ftb_debug_cnt
	local tmp=${TMPPREFIX:-/tmp/zsh}-$$-fzf-tab-$(( ++_ftb_debug_cnt )).log 
	local -i debug_fd=-1 IN_FZF_TAB=1 
	{
		exec {debug_fd}>&2 2>| $tmp
		local -a debug_indent
		debug_indent=('%'{3..20}'(e. .)') 
		local PROMPT4 PS4="${(j::)debug_indent}+%N:%i> " 
		setopt xtrace
		: $ZSH_NAME $ZSH_VERSION
		zle .fzf-tab-orig-$_ftb_orig_widget
		unsetopt xtrace
		if (( debug_fd != -1 ))
		then
			zle -M "fzf-tab-debug: Trace output left in $tmp"
		fi
	} always {
		(( debug_fd != -1 )) && exec 2>&$debug_fd {debug_fd}>&-
	}
}
fzf-tab-dummy () {
	
}
fzf-tab-lscolors::from-mode () {
	emulate -L zsh
	setopt cbases octalzeroes extendedglob
	[[ -z $2 ]] && return 1
	local -i reg=0 
	local -a codes
	local -i st_mode=$(($2)) 
	case $(( st_mode & 0170000 )) in
		($(( 0140000 ))) codes=($modecolors[so])  ;;
		($(( 0120000 ))) if ! (($+3))
			then
				REPLY=$modecolors[or] 
			elif [[ $modecolors[ln] = target ]]
			then
				"$0" "$1" "${@:3}"
			else
				REPLY=$modecolors[ln] 
			fi
			return ;;
		($(( 0100000 ))) codes=() 
			reg=1  ;;
		($(( 0060000 ))) codes=($modecolors[bd])  ;;
		($(( 0040000 ))) codes=($modecolors[di])  ;;
		($(( 0020000 ))) codes=($modecolors[cd])  ;;
		($(( 0010000 ))) codes=($modecolors[pi])  ;;
	esac
	(( st_mode & 04000 )) && codes+=($modecolors[su]) 
	(( st_mode & 02000 )) && codes+=($modecolors[sg]) 
	(( ! reg )) && case $(( st_mode & 01002 )) in
		($(( 01000 ))) codes+=($modecolors[st])  ;;
		($(( 00002 ))) codes+=($modecolors[ow])  ;;
		($(( 01002 ))) codes+=($modecolors[tw])  ;;
	esac
	if (( ! $#codes ))
	then
		(( st_mode &  0111 )) && codes+=($modecolors[ex]) 
	fi
	[[ -n ${REPLY::=${(j:;:)codes}} ]]
}
fzf-tab-lscolors::from-name () {
	emulate -L zsh
	setopt extendedglob
	[[ -n ${REPLY::=$namecolors[(k)$1]} ]]
}
fzf-tab-lscolors::init () {
	emulate -L zsh
	local LS_COLORS=${1:-${LS_COLORS:-$LSCOLORS}} 
	typeset -gA namecolors=(${(@s:=:)${(@s.:.)LS_COLORS}:#[[:alpha:]][[:alpha:]]=*}) 
	typeset -gA modecolors=(${(@Ms:=:)${(@s.:.)LS_COLORS}:#[[:alpha:]][[:alpha:]]=*}) 
}
fzf-tab-lscolors::match-by () {
	emulate -L zsh
	setopt extendedglob cbases octalzeroes
	local arg REPLY name=$1 pfx=${0%::match-by} 
	shift
	if ! [[ -v namecolors && -v modecolors ]]
	then
		local -A namecolors modecolors
		${pfx}::init
	fi
	if [[ ${1:l} = (g|global) ]]
	then
		shift
	else
		local -a stat lstat
		declare -ga reply=() 
	fi
	zmodload -F zsh/stat b:zstat
	for arg
	do
		case ${arg[1]:l} in
			(n | name) ${pfx}::from-name $name
				reply+=("$REPLY")  ;;
			(l | lstat) (($#lstat)) || zstat -A lstat -L $name || return 1
				if ((lstat[3] & 0170000 ))
				then
					(($#stat)) || zstat -A stat $name 2> /dev/null
				fi
				${pfx}::from-mode "$name" "$lstat[3]" $stat[3]
				if [[ -n $REPLY || ${2[1]} = L ]]
				then
					reply+=("$REPLY") 
				else
					"$0" "$name" g n
				fi ;;
			(s | stat) (($#stat)) || zstat -A stat $name || return 1
				${pfx}::from-mode $name $stat[3]
				reply+=("$REPLY") 
				if [[ -n $REPLY || ${arg[1]} = S ]]
				then
					reply+=("$REPLY") 
				else
					"$0" "$name" g n
				fi ;;
			(f | follow) (($#lstat)) || zstat -A lstat -L $name || return 1
				reply+=("$lstat[14]")  ;;
			(a | all) "$0" "$name" g ${${${arg[1]%a}:+L}:-l}
				reply+=($lstat[14]) 
				if [[ -n $lstat[14] ]]
				then
					if [[ -e $name ]]
					then
						"$0" "$name" g ${${${arg[1]%a}:+S}:-s}
					else
						reply+=($reply[-2]) 
					fi
				fi ;;
			(*) return 2 ;;
		esac
	done
}
gawklibpath_append () {
	[ -z "$AWKLIBPATH" ] && AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'` 
	export AWKLIBPATH="$AWKLIBPATH:$*" 
}
gawklibpath_default () {
	unset AWKLIBPATH
	export AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'` 
}
gawklibpath_prepend () {
	[ -z "$AWKLIBPATH" ] && AWKLIBPATH=`gawk 'BEGIN {print ENVIRON["AWKLIBPATH"]}'` 
	export AWKLIBPATH="$*:$AWKLIBPATH" 
}
gawkpath_append () {
	[ -z "$AWKPATH" ] && AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'` 
	export AWKPATH="$AWKPATH:$*" 
}
gawkpath_default () {
	unset AWKPATH
	export AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'` 
}
gawkpath_prepend () {
	[ -z "$AWKPATH" ] && AWKPATH=`gawk 'BEGIN {print ENVIRON["AWKPATH"]}'` 
	export AWKPATH="$*:$AWKPATH" 
}
git_commits_ahead () {
	if __git_prompt_git rev-parse --git-dir &> /dev/null
	then
		local commits="$(__git_prompt_git rev-list --count @{upstream}..HEAD 2>/dev/null)" 
		if [[ -n "$commits" && "$commits" != 0 ]]
		then
			echo "$ZSH_THEME_GIT_COMMITS_AHEAD_PREFIX$commits$ZSH_THEME_GIT_COMMITS_AHEAD_SUFFIX"
		fi
	fi
}
git_commits_behind () {
	if __git_prompt_git rev-parse --git-dir &> /dev/null
	then
		local commits="$(__git_prompt_git rev-list --count HEAD..@{upstream} 2>/dev/null)" 
		if [[ -n "$commits" && "$commits" != 0 ]]
		then
			echo "$ZSH_THEME_GIT_COMMITS_BEHIND_PREFIX$commits$ZSH_THEME_GIT_COMMITS_BEHIND_SUFFIX"
		fi
	fi
}
git_current_branch () {
	local ref
	ref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null) 
	local ret=$? 
	if [[ $ret != 0 ]]
	then
		[[ $ret == 128 ]] && return
		ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)  || return
	fi
	echo ${ref#refs/heads/}
}
git_current_user_email () {
	__git_prompt_git config user.email 2> /dev/null
}
git_current_user_name () {
	__git_prompt_git config user.name 2> /dev/null
}
git_prompt_ahead () {
	if [[ -n "$(__git_prompt_git rev-list origin/$(git_current_branch)..HEAD 2> /dev/null)" ]]
	then
		echo "$ZSH_THEME_GIT_PROMPT_AHEAD"
	fi
}
git_prompt_behind () {
	if [[ -n "$(__git_prompt_git rev-list HEAD..origin/$(git_current_branch) 2> /dev/null)" ]]
	then
		echo "$ZSH_THEME_GIT_PROMPT_BEHIND"
	fi
}
git_prompt_info () {
	dirty="$(parse_git_dirty)" 
	__git_ps1 "${ZSH_THEME_GIT_PROMPT_PREFIX//\%/%%}%s${dirty//\%/%%}${ZSH_THEME_GIT_PROMPT_SUFFIX//\%/%%}"
}
git_prompt_long_sha () {
	local SHA
	SHA=$(__git_prompt_git rev-parse HEAD 2> /dev/null)  && echo "$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER"
}
git_prompt_remote () {
	if [[ -n "$(__git_prompt_git show-ref origin/$(git_current_branch) 2> /dev/null)" ]]
	then
		echo "$ZSH_THEME_GIT_PROMPT_REMOTE_EXISTS"
	else
		echo "$ZSH_THEME_GIT_PROMPT_REMOTE_MISSING"
	fi
}
git_prompt_short_sha () {
	local SHA
	SHA=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)  && echo "$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER"
}
git_prompt_status () {
	[[ "$(__git_prompt_git config --get oh-my-zsh.hide-status 2>/dev/null)" = 1 ]] && return
	local -A prefix_constant_map
	prefix_constant_map=('\?\? ' 'UNTRACKED' 'A  ' 'ADDED' 'M  ' 'ADDED' 'MM ' 'MODIFIED' ' M ' 'MODIFIED' 'AM ' 'MODIFIED' ' T ' 'MODIFIED' 'R  ' 'RENAMED' ' D ' 'DELETED' 'D  ' 'DELETED' 'UU ' 'UNMERGED' 'ahead' 'AHEAD' 'behind' 'BEHIND' 'diverged' 'DIVERGED' 'stashed' 'STASHED') 
	local -A constant_prompt_map
	constant_prompt_map=('UNTRACKED' "$ZSH_THEME_GIT_PROMPT_UNTRACKED" 'ADDED' "$ZSH_THEME_GIT_PROMPT_ADDED" 'MODIFIED' "$ZSH_THEME_GIT_PROMPT_MODIFIED" 'RENAMED' "$ZSH_THEME_GIT_PROMPT_RENAMED" 'DELETED' "$ZSH_THEME_GIT_PROMPT_DELETED" 'UNMERGED' "$ZSH_THEME_GIT_PROMPT_UNMERGED" 'AHEAD' "$ZSH_THEME_GIT_PROMPT_AHEAD" 'BEHIND' "$ZSH_THEME_GIT_PROMPT_BEHIND" 'DIVERGED' "$ZSH_THEME_GIT_PROMPT_DIVERGED" 'STASHED' "$ZSH_THEME_GIT_PROMPT_STASHED") 
	local status_constants
	status_constants=(UNTRACKED ADDED MODIFIED RENAMED DELETED STASHED UNMERGED AHEAD BEHIND DIVERGED) 
	local status_text="$(__git_prompt_git status --porcelain -b 2> /dev/null)" 
	if [[ $? -eq 128 ]]
	then
		return 1
	fi
	local -A statuses_seen
	if __git_prompt_git rev-parse --verify refs/stash &> /dev/null
	then
		statuses_seen[STASHED]=1 
	fi
	local status_lines
	status_lines=("${(@f)${status_text}}") 
	if [[ "$status_lines[1]" =~ "^## [^ ]+ \[(.*)\]" ]]
	then
		local branch_statuses
		branch_statuses=("${(@s/,/)match}") 
		for branch_status in $branch_statuses
		do
			if [[ ! $branch_status =~ "(behind|diverged|ahead) ([0-9]+)?" ]]
			then
				continue
			fi
			local last_parsed_status=$prefix_constant_map[$match[1]] 
			statuses_seen[$last_parsed_status]=$match[2] 
		done
	fi
	for status_prefix in ${(k)prefix_constant_map}
	do
		local status_constant="${prefix_constant_map[$status_prefix]}" 
		local status_regex=$'(^|\n)'"$status_prefix" 
		if [[ "$status_text" =~ $status_regex ]]
		then
			statuses_seen[$status_constant]=1 
		fi
	done
	local status_prompt
	for status_constant in $status_constants
	do
		if (( ${+statuses_seen[$status_constant]} ))
		then
			local next_display=$constant_prompt_map[$status_constant] 
			status_prompt="$next_display$status_prompt" 
		fi
	done
	echo $status_prompt
}
git_remote_status () {
	local remote ahead behind git_remote_status git_remote_status_detailed
	remote=${$(__git_prompt_git rev-parse --verify ${hook_com[branch]}@{upstream} --symbolic-full-name 2>/dev/null)/refs\/remotes\/} 
	if [[ -n ${remote} ]]
	then
		ahead=$(__git_prompt_git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l) 
		behind=$(__git_prompt_git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l) 
		if [[ $ahead -eq 0 ]] && [[ $behind -eq 0 ]]
		then
			git_remote_status="$ZSH_THEME_GIT_PROMPT_EQUAL_REMOTE" 
		elif [[ $ahead -gt 0 ]] && [[ $behind -eq 0 ]]
		then
			git_remote_status="$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE" 
			git_remote_status_detailed="$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE$((ahead))%{$reset_color%}" 
		elif [[ $behind -gt 0 ]] && [[ $ahead -eq 0 ]]
		then
			git_remote_status="$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE" 
			git_remote_status_detailed="$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE$((behind))%{$reset_color%}" 
		elif [[ $ahead -gt 0 ]] && [[ $behind -gt 0 ]]
		then
			git_remote_status="$ZSH_THEME_GIT_PROMPT_DIVERGED_REMOTE" 
			git_remote_status_detailed="$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_AHEAD_REMOTE$((ahead))%{$reset_color%}$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE_COLOR$ZSH_THEME_GIT_PROMPT_BEHIND_REMOTE$((behind))%{$reset_color%}" 
		fi
		if [[ -n $ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_DETAILED ]]
		then
			git_remote_status="$ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_PREFIX$remote$git_remote_status_detailed$ZSH_THEME_GIT_PROMPT_REMOTE_STATUS_SUFFIX" 
		fi
		echo $git_remote_status
	fi
}
git_repo_name () {
	local repo_path
	if repo_path="$(__git_prompt_git rev-parse --show-toplevel 2>/dev/null)"  && [[ -n "$repo_path" ]]
	then
		echo ${repo_path:t}
	fi
}
hg_prompt_info () {
	return 1
}
hist () {
	emulate -L zsh -o extendedglob -o warncreateglobal
	local -A opts=() 
	local REPLY
	zparseopts -D -A opts f i s v
	local act=$1 sel=$2 
	if [[ $act != [${(kj::)_HIST__ARGS}] && ! -v opts[-s] ]]
	then
		autoload -Uz .hist.help
		.hist.help
		return 1
	fi
	case $act in
		(r) .hist.fcparams || return
			.hist.yes "Replace current history with contents of $HISTFILE?" && builtin fc -p $HISTFILE $HISTSIZE $SAVEHIST
			return ;;
		(u) if .hist.yes "Revert last 'hist' action & all entries since then?"
			then
				builtin fc -P
				local ret=$? 
				if (( ? == 0 ))
				then
					builtin fc -W
					[[ -v opts[-s] ]] || print 'Revert successful. Previous history restored.'
				else
					[[ -v opts[-s] ]] || print 'Unable to revert. No restore points available in this session.'
				fi
				return ret
			fi
			return ;;
	esac
	local -A entries=() 
	local HISTORY_IGNORE
	[[ -z $sel ]] && sel=0 
	case $sel in
		(0) local suffix=' #:hist:push-line:' 
			HISTORY_IGNORE='*'$suffix 
			entries=("${(@kv)history[(R)$~HISTORY_IGNORE]%$suffix}")  ;;
		(<1->) HISTORY_IGNORE=${(b)history[$sel]} 
			entries[$sel]=$history[$sel]  ;;
		(-<1->) sel=${${(@k)history}[-sel]} 
			HISTORY_IGNORE=${(b)history[$sel]} 
			entries[$sel]=$history[$sel]  ;;
		(*) HISTORY_IGNORE=$sel 
			entries=("${(@kv)history[(R)$~sel]}")  ;;
	esac
	if [[ ! -v opts[-s] ]]
	then
		local -i MBEGIN MEND
		local MATCH k faint=$'\e[2m' reverse=$'\e[7m' none=$'\e[0m' 
		for k in ${(@kn)entries}
		do
			print -r - "$faint${(l:$#HISTCMD:)k}$none" "${entries[$k]//(#m)[^[:print:]]##/$reverse${(V)MATCH}$none}"
		done
	fi
	if (( $#entries == 0 ))
	then
		[[ -v opts[-s] ]] || print "No ${${${sel:#0}:+matching history entries}:-pushed lines} found."
		return 1
	fi
	local single_plural="${#entries} entries" 
	(( $#entries == 1 )) && single_plural='1 entry' 
	if [[ $act != [gl] ]]
	then
		.hist.fcparams || return
		local msg="Delete these $single_plural from history?" 
		[[ $act == e ]] && msg="Merge these $single_plural for editing?" 
		if [[ $#entries -eq 1 && ! -v opts[-i] ]] || .hist.yes $msg
		then
			builtin fc -W
			builtin fc -p $HISTFILE $HISTSIZE $SAVEHIST
			[[ $act != [en] && ! -v opts[-s] ]] && print "$single_plural deleted."
		else
			[[ -v opts[-s] ]] || print -l '' '0 entries deleted.'
			return 1
		fi
	fi
	case $act in
		(e) local new=${(vF)entries} 
			print "$faint${(l:COLUMNS::-:):-}$none"
			{
				local +h -a compprefuncs=(.hist.vared) 
				vared new
			} always {
				if (( TRY_BLOCK_INTERRUPT > 0 ))
				then
					TRY_BLOCK_INTERRUPT=0 
					{
						builtin fc -P
					} always {
						builtin fc -W
						print -l - '' 'Deleted entries restored.'
					}
				else
					print -rs - "$new"
					builtin fc -W
					[[ -v opts[-s] ]] || print -l '' 'New entry saved.'
				fi
			} ;;
		([fg]) print -z ${(Fv)entries} ;;
		(n) local -a lines match mbegin mend
			local entry
			for k in ${(@kn)entries}
			do
				.hist.format "$entries[$k]" && print -rs - "$REPLY"
			done
			builtin fc -W
			[[ -v opts[-s] ]] || print "$single_plural reformatted." ;;
	esac
	setopt NO_warncreateglobal
	reply=("${(@kv)entries}") 
}
history-substring-search-down () {
	_history-substring-search-begin
	_history-substring-search-down-history || _history-substring-search-down-buffer || _history-substring-search-down-search
	_history-substring-search-end
}
history-substring-search-up () {
	_history-substring-search-begin
	_history-substring-search-up-history || _history-substring-search-up-buffer || _history-substring-search-up-search
	_history-substring-search-end
}
ip-addr () {
	wget -qO- http://ipecho.net/plain
	echo
}
is-at-least () {
	emulate -L zsh
	local IFS=".-" min_cnt=0 ver_cnt=0 part min_ver version order 
	min_ver=(${=1}) 
	version=(${=2:-$ZSH_VERSION} 0) 
	while (( $min_cnt <= ${#min_ver} ))
	do
		while [[ "$part" != <-> ]]
		do
			(( ++ver_cnt > ${#version} )) && return 0
			if [[ ${version[ver_cnt]} = *[0-9][^0-9]* ]]
			then
				order=(${version[ver_cnt]} ${min_ver[ver_cnt]}) 
				if [[ ${version[ver_cnt]} = <->* ]]
				then
					[[ $order != ${${(On)order}} ]] && return 1
				else
					[[ $order != ${${(O)order}} ]] && return 1
				fi
				[[ $order[1] != $order[2] ]] && return 0
			fi
			part=${version[ver_cnt]##*[^0-9]} 
		done
		while true
		do
			(( ++min_cnt > ${#min_ver} )) && return 0
			[[ ${min_ver[min_cnt]} = <-> ]] && break
		done
		(( part > min_ver[min_cnt] )) && return 0
		(( part < min_ver[min_cnt] )) && return 1
		part='' 
	done
}
is_plugin () {
	local base_dir=$1 
	local name=$2 
	builtin test -f $base_dir/plugins/$name/$name.plugin.zsh || builtin test -f $base_dir/plugins/$name/_$name
}
jenv_prompt_info () {
	return 1
}
kubectx_prompt_info () {
	return 1
}
launch () {
	case "$1" in
		(--help | -h) printf "Usage:\n"
			printf "\tlaunch [appname]\n"
			printf "\t\tLaunching application\n"
			printf "\t\tType 'launch --list' to view list of applications name.\n"
			printf "\t\tExample: launch whatsapp\n\n"
			printf "\tlaunch [--list|-l]\n"
			printf "\t\tDisplaying available apps\n\n"
			printf "\tlaunch [--help|-h]\n"
			printf "\t\tDisplaying this message and exit .\n\n" ;;
		(Amazon-Shopping | amazon-shopping) am start -n 'com.amazon.mShop.android.shopping/com.amazon.mShop.home.HomeActivity' --user 0 &> /dev/null
			printf "Launch 'Amazon Shopping'\n" ;;
		(Cryptomator | cryptomator) am start -n 'org.cryptomator/.presentation.ui.activity.SplashActivity' --user 0 &> /dev/null
			printf "Launch 'Cryptomator'\n" ;;
		(Aurora-Droid | aurora-droid) am start -n 'com.aurora.adroid/.ui.generic.activity.SplashActivity' --user 0 &> /dev/null
			printf "Launch 'Aurora Droid'\n" ;;
		(Rechner | rechner) am start -n 'com.simplemobiletools.calculator/.activities.SplashActivity.Grey_black' --user 0 &> /dev/null
			printf "Launch 'Rechner'\n" ;;
		(Kalender | kalender) am start -n 'com.samsung.android.calendar/com.samsung.android.app.calendar.activity.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Kalender'\n" ;;
		(SmartCookieWeb | smartcookieweb) am start -n 'com.cookiegames.smartcookie/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'SmartCookieWeb'\n" ;;
		(Samsung-Portable-SSD | samsung-portable-ssd) am start -n 'com.samsung.samsungportablessd/.activity.SplashScreen' --user 0 &> /dev/null
			printf "Launch 'Samsung Portable SSD'\n" ;;
		(OkcAgent | okcagent) am start -n 'org.ddosolitary.okcagent/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'OkcAgent'\n" ;;
		(IFTTT | ifttt) am start -n 'com.ifttt.ifttt/.home.HomeActivity' --user 0 &> /dev/null
			printf "Launch 'IFTTT'\n" ;;
		(Imagepipe | imagepipe) am start -n 'de.kaffeemitkoffein.imagepipe/.ImageReceiver' --user 0 &> /dev/null
			printf "Launch 'Imagepipe'\n" ;;
		(CHECK24 | check24) am start -n 'de.check24.check24/.activities.Check24Activity' --user 0 &> /dev/null
			printf "Launch 'CHECK24'\n" ;;
		(Amaze-Cloud | amaze-cloud) am start -n 'com.filemanager.amazecloud/.activity.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Amaze Cloud'\n" ;;
		(WhatsApp | whatsapp) am start -n 'com.whatsapp/.Main' --user 0 &> /dev/null
			printf "Launch 'WhatsApp'\n" ;;
		(SlimSocial-for-Twitter | slimsocial-for-twitter) am start -n 'it.rignanese.leo.slimtwitter/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'SlimSocial for Twitter'\n" ;;
		(Code-Editor | code-editor) am start -n 'com.rhmsoft.code/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Code-Editor'\n" ;;
		(openWorkout | openworkout) am start -n 'com.health.openworkout/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'openWorkout'\n" ;;
		(PayPal | paypal) am start -n 'com.paypal.android.p2pmobile/.startup.activities.StartupActivity' --user 0 &> /dev/null
			printf "Launch 'PayPal'\n" ;;
		(ProtonMail | protonmail) am start -n 'ch.protonmail.android/.activities.SplashActivity' --user 0 &> /dev/null
			printf "Launch 'ProtonMail'\n" ;;
		(OpenKeychain | openkeychain) am start -n 'org.sufficientlysecure.keychain/.ui.MainActivity' --user 0 &> /dev/null
			printf "Launch 'OpenKeychain'\n" ;;
		(Termux:Boot | termux:boot) am start -n 'com.termux.boot/.BootActivity' --user 0 &> /dev/null
			printf "Launch 'Termux:Boot'\n" ;;
		(Galaxy-Store | galaxy-store) am start -n 'com.sec.android.app.samsungapps/.SamsungAppsMainActivity' --user 0 &> /dev/null
			printf "Launch 'Galaxy Store'\n" ;;
		(Amazon-VISA | amazon-visa) am start -n 'de.lbb.amazon/de.lbb.kkb.ui.activities.SplashActivity' --user 0 &> /dev/null
			printf "Launch 'Amazon VISA'\n" ;;
		(NewPipe | newpipe) am start -n 'org.schabi.newpipe/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'NewPipe'\n" ;;
		(Kalender | kalender) am start -n 'com.simplemobiletools.calendar.pro/.activities.SplashActivity.Grey_black' --user 0 &> /dev/null
			printf "Launch 'Kalender'\n" ;;
		(Google-Play-Store | google-play-store) am start -n 'com.android.vending/.AssetBrowserActivity' --user 0 &> /dev/null
			printf "Launch 'Google Play Store'\n" ;;
		(Aegis | aegis) am start -n 'com.beemdevelopment.aegis/.ui.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Aegis'\n" ;;
		(Xbox-Game-Pass | xbox-game-pass) am start -n 'com.gamepass/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Xbox Game Pass'\n" ;;
		(NetGuard | netguard) am start -n 'eu.faircode.netguard/.ActivityMain' --user 0 &> /dev/null
			printf "Launch 'NetGuard'\n" ;;
		(Dankeschön | dankeschön) am start -n 'com.simplemobiletools.thankyou/.activities.SplashActivity.Orange' --user 0 &> /dev/null
			printf "Launch 'Dankeschön'\n" ;;
		(TermuxLauncher | termuxlauncher) am start -n 'amsitlab.android.apps.termuxlauncher/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'TermuxLauncher'\n" ;;
		(Termux-Tutorial | termux-tutorial) am start -n 'com.prabhakar.ttltools/.StartActivity' --user 0 &> /dev/null
			printf "Launch 'Termux Tutorial'\n" ;;
		(Vodafone-Services | vodafone-services) am start -n 'com.android.stk/.StkLauncherActivity' --user 0 &> /dev/null
			printf "Launch 'Vodafone Services'\n" ;;
		(Nachrichten | nachrichten) am start -n 'com.samsung.android.messaging/com.android.mms.ui.ConversationComposer' --user 0 &> /dev/null
			printf "Launch 'Nachrichten'\n" ;;
		(MuPDF-viewer | mupdf-viewer) am start -n 'com.artifex.mupdf.viewer.app/.LibraryActivity' --user 0 &> /dev/null
			printf "Launch 'MuPDF viewer'\n" ;;
		(6-Weeks-Challenge-Lite | 6-weeks-challenge-lite) am start -n 'yo.a6weekschallenge.lite/yo.a6weekschallenge.HomeActivity' --user 0 &> /dev/null
			printf "Launch '6 Weeks Challenge Lite'\n" ;;
		(Infinity | infinity) am start -n 'ml.docilealligator.infinityforreddit/.activities.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Infinity'\n" ;;
		(Hackers-Keyboard | hackers-keyboard) am start -n 'org.pocketworkstation.pckeyboard/.Main' --user 0 &> /dev/null
			printf "Launch 'Hacker's Keyboard'\n" ;;
		(UntrackMe | untrackme) am start -n 'app.fedilab.nitterizeme/.activities.MainActivity' --user 0 &> /dev/null
			printf "Launch 'UntrackMe'\n" ;;
		(Signal | signal) am start -n 'org.thoughtcrime.securesms/.RoutingActivity' --user 0 &> /dev/null
			printf "Launch 'Signal'\n" ;;
		(Aurora-Store | aurora-store) am start -n 'com.aurora.store/.view.ui.onboarding.OnboardingActivity' --user 0 &> /dev/null
			printf "Launch 'Aurora Store'\n" ;;
		(Galerie | galerie) am start -n 'com.sec.android.gallery3d/com.samsung.android.gallery.app.activity.GalleryActivity' --user 0 &> /dev/null
			printf "Launch 'Galerie'\n" ;;
		(Eingabehilfe | eingabehilfe) am start -n 'com.samsung.accessibility/.SettingsActivity' --user 0 &> /dev/null
			printf "Launch 'Eingabehilfe'\n" ;;
		(Safe-Charger | safe-charger) am start -n 'com.gpa.safecharge/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Safe Charger'\n" ;;
		(ScreenCam | screencam) am start -n 'com.orpheusdroid.screenrecorder/.ui.MainActivity' --user 0 &> /dev/null
			printf "Launch 'ScreenCam'\n" ;;
		(Twire | twire) am start -n 'com.perflyst.twire/.activities.StartUpActivity' --user 0 &> /dev/null
			printf "Launch 'Twire'\n" ;;
		(Vodafone-Services | vodafone-services) am start -n 'com.android.stk2/.StkLauncherActivity' --user 0 &> /dev/null
			printf "Launch 'Vodafone Services'\n" ;;
		(Ruthless-Launcher | ruthless-launcher) am start -n 'shubh.ruthless/amirz.shade.ShadeLauncher' --user 0 &> /dev/null
			printf "Launch 'Ruthless Launcher'\n" ;;
		(Slide | slide) am start -n 'me.ccrama.redditslide/.Activities.SlideGrey' --user 0 &> /dev/null
			printf "Launch 'Slide'\n" ;;
		(Unit-Converter-Ultimate | unit-converter-ultimate) am start -n 'com.physphil.android.unitconverterultimate/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Unit Converter Ultimate'\n" ;;
		(Uhr | uhr) am start -n 'com.sec.android.app.clockpackage/.ClockPackage' --user 0 &> /dev/null
			printf "Launch 'Uhr'\n" ;;
		(Termux:Float | termux:float) am start -n 'com.termux.window/.TermuxFloatActivity' --user 0 &> /dev/null
			printf "Launch 'Termux:Float'\n" ;;
		(SMS-Messenger | sms-messenger) am start -n 'com.simplemobiletools.smsmessenger/.activities.SplashActivity.Blue' --user 0 &> /dev/null
			printf "Launch 'SMS Messenger'\n" ;;
		(Hypatia | hypatia) am start -n 'us.spotco.malwarescanner/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Hypatia'\n" ;;
		(WiFi-Manager | wifi-manager) am start -n 'org.secuso.privacyfriendlywifimanager/.view.SplashActivity' --user 0 &> /dev/null
			printf "Launch 'WiFi-Manager'\n" ;;
		(Termux-Guide-for-hacking | termux-guide-for-hacking) am start -n 'com.lotsof.termuxguideforhacking/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Termux Guide for hacking'\n" ;;
		(OpenScan | openscan) am start -n 'com.ethereal.openscan/com.example.openscan.MainActivity' --user 0 &> /dev/null
			printf "Launch 'OpenScan'\n" ;;
		(Advanzia | advanzia) am start -n 'com.advanzia.android/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Advanzia'\n" ;;
		(Private-Location | private-location) am start -n 'com.wesaphzt.privatelocation/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Private Location'\n" ;;
		(Eigene-Dateien | eigene-dateien) am start -n 'com.sec.android.app.myfiles/.external.ui.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Eigene Dateien'\n" ;;
		(Privacy-Browser | privacy-browser) am start -n 'com.stoutner.privacybrowser.standard/com.stoutner.privacybrowser.activities.MainWebViewActivity' --user 0 &> /dev/null
			printf "Launch 'Privacy Browser'\n" ;;
		(Terminal-Commands | terminal-commands) am start -n 'hsmnzaydn.serkanozaydin.net/.ui.SplashScreenActivity.SplashScreenActivity' --user 0 &> /dev/null
			printf "Launch 'Terminal Commands'\n" ;;
		(App-Manager | app-manager) am start -n 'io.github.muntashirakon.AppManager/.main.MainActivity' --user 0 &> /dev/null
			printf "Launch 'App Manager'\n" ;;
		(Text---Bildscanner | text---bildscanner) am start -n 'com.sec.android.app.ocr4/.OCR' --user 0 &> /dev/null
			printf "Launch 'Text- & Bildscanner'\n" ;;
		(Vinyl-Music-Player | vinyl-music-player) am start -n 'com.poupa.vinylmusicplayer/.ui.activities.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Vinyl Music Player'\n" ;;
		(Bitwarden | bitwarden) am start -n 'com.x8bit.bitwarden/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Bitwarden'\n" ;;
		(Öffi | öffi) am start -n 'de.schildbach.oeffi/.directions.DirectionsActivity' --user 0 &> /dev/null
			printf "Launch 'Öffi'\n" ;;
		(Telefon | telefon) am start -n 'com.samsung.android.dialer/.DialtactsActivity' --user 0 &> /dev/null
			printf "Launch 'Telefon'\n" ;;
		(OpenHub | openhub) am start -n 'com.thirtydegreesray.openhub/.ui.activity.SplashActivity' --user 0 &> /dev/null
			printf "Launch 'OpenHub'\n" ;;
		(Galerie | galerie) am start -n 'com.simplemobiletools.gallery.pro/.activities.SplashActivity.Grey_black' --user 0 &> /dev/null
			printf "Launch 'Galerie'\n" ;;
		(Sound-Meter-HQ-PRO | sound-meter-hq-pro) am start -n 'com.just4funtools.soundmeternoisehd/.PermissionRequestClass' --user 0 &> /dev/null
			printf "Launch 'Sound Meter HQ PRO'\n" ;;
		(Battery-Calibration | battery-calibration) am start -n 'com.mohlab07.batterycalibration/.SplashActivity' --user 0 &> /dev/null
			printf "Launch 'Battery Calibration'\n" ;;
		(personalDNSfilter | personaldnsfilter) am start -n 'dnsfilter.android/.DNSProxyActivity' --user 0 &> /dev/null
			printf "Launch 'personalDNSfilter'\n" ;;
		(Amaze | amaze) am start -n 'com.amaze.filemanager/.ui.activities.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Amaze'\n" ;;
		(QR--Barcode-Scanner | qr--barcode-scanner) am start -n 'com.example.barcodescanner/.feature.tabs.BottomTabsActivity' --user 0 &> /dev/null
			printf "Launch 'QR & Barcode Scanner'\n" ;;
		(SD-Maid | sd-maid) am start -n 'eu.thedarken.sdm/.main.ui.SDMMainActivity' --user 0 &> /dev/null
			printf "Launch 'SD Maid'\n" ;;
		(Einstellungen | einstellungen) am start -n 'com.android.settings/.Settings' --user 0 &> /dev/null
			printf "Launch 'Einstellungen'\n" ;;
		(Gerätewartung | gerätewartung) am start -n 'com.samsung.android.lool/com.samsung.android.sm.score.ui.ScoreBoardActivity' --user 0 &> /dev/null
			printf "Launch 'Gerätewartung'\n" ;;
		(Termux | termux) am start -n 'com.termux/.app.TermuxActivity' --user 0 &> /dev/null
			printf "Launch 'Termux'\n" ;;
		(Learn-ADB-and-Fastboot | learn-adb-and-fastboot) am start -n 'com.msiejak.msiejak.phoenix/.activities.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Learn ADB and Fastboot'\n" ;;
		(Hibernation-Manager | hibernation-manager) am start -n 'com.root.battery.saver.sleep.hibernation/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Hibernation Manager'\n" ;;
		(Wearable-Manager-Installer | wearable-manager-installer) am start -n 'com.samsung.android.app.watchmanagerstub/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Wearable Manager Installer'\n" ;;
		(Finanzassistent | finanzassistent) am start -n 'de.postbank.finanzassistent/.features.login.SplashViewActivity' --user 0 &> /dev/null
			printf "Launch 'Finanzassistent'\n" ;;
		(Diktiergerät | diktiergerät) am start -n 'com.simplemobiletools.voicerecorder/.activities.SplashActivity.Grey_black' --user 0 &> /dev/null
			printf "Launch 'Diktiergerät'\n" ;;
		(Bromite | bromite) am start -n 'org.bromite.bromite/com.google.android.apps.chrome.Main' --user 0 &> /dev/null
			printf "Launch 'Bromite'\n" ;;
		(MyMonero-for-Android | mymonero-for-android) am start -n 'com.mymonero.official_android_application/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'MyMonero for Android'\n" ;;
		(Notizen | notizen) am start -n 'com.simplemobiletools.notes.pro/.activities.SplashActivity.Grey_black' --user 0 &> /dev/null
			printf "Launch 'Notizen'\n" ;;
		(monerujo | monerujo) am start -n 'com.m2049r.xmrwallet/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'monerujo'\n" ;;
		(DuckDuckGo | duckduckgo) am start -n 'com.duckduckgo.mobile.android/com.duckduckgo.app.launch.LauncherBlack' --user 0 &> /dev/null
			printf "Launch 'DuckDuckGo'\n" ;;
		(TERMUX | termux) am start -n 'com.prabhakar.cattTermux/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'TERMUX'\n" ;;
		(OsmAnd~ | osmand~) am start -n 'net.osmand.plus/.activities.MapActivity' --user 0 &> /dev/null
			printf "Launch 'OsmAnd~'\n" ;;
		(WhatsApp-Web-To-Go | whatsapp-web-to-go) am start -n 'io.kuenzler.whatsappwebtogo/.WebviewActivity' --user 0 &> /dev/null
			printf "Launch 'WhatsApp Web To Go'\n" ;;
		(Zeichenblock | zeichenblock) am start -n 'com.simplemobiletools.draw.pro/.activities.SplashActivity.Grey_black' --user 0 &> /dev/null
			printf "Launch 'Zeichenblock'\n" ;;
		(Post--DHL | post--dhl) am start -n 'de.dhl.paket/de.its_berlin.dhlpaket.base.main.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Post & DHL'\n" ;;
		(FairEmail | fairemail) am start -n 'eu.faircode.email/.ActivityMain' --user 0 &> /dev/null
			printf "Launch 'FairEmail'\n" ;;
		(System-Tracing | system-tracing) am start -n 'com.android.traceur/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'System-Tracing'\n" ;;
		(Radio | radio) am start -n 'com.sec.android.app.fm/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Radio'\n" ;;
		(Kamera | kamera) am start -n 'com.sec.android.app.camera/.Camera' --user 0 &> /dev/null
			printf "Launch 'Kamera'\n" ;;
		(Kontakte | kontakte) am start -n 'com.samsung.android.contacts/.contactslist.PeopleActivity' --user 0 &> /dev/null
			printf "Launch 'Kontakte'\n" ;;
		(Open-In-WhatsApp | open-in-whatsapp) am start -n 'io.github.subhamtyagi.openinwhatsapp/.MainActivity' --user 0 &> /dev/null
			printf "Launch 'Open In WhatsApp'\n" ;;
		(Linux-Command-Library | linux-command-library) am start -n 'com.inspiredandroid.linuxcommandbibliotheca/.activities.NavigationActivity' --user 0 &> /dev/null
			printf "Launch 'Linux Command Library'\n" ;;
		(Uhr | uhr) am start -n 'com.simplemobiletools.clock/.activities.SplashActivity.Grey_black' --user 0 &> /dev/null
			printf "Launch 'Uhr'\n" ;;
		(--list | -l) printf "Amazon-Shopping\namazon-shopping\n"
			printf "Cryptomator\ncryptomator\n"
			printf "Aurora-Droid\naurora-droid\n"
			printf "Rechner\nrechner\n"
			printf "Kalender\nkalender\n"
			printf "SmartCookieWeb\nsmartcookieweb\n"
			printf "Samsung-Portable-SSD\nsamsung-portable-ssd\n"
			printf "OkcAgent\nokcagent\n"
			printf "IFTTT\nifttt\n"
			printf "Imagepipe\nimagepipe\n"
			printf "CHECK24\ncheck24\n"
			printf "Amaze-Cloud\namaze-cloud\n"
			printf "WhatsApp\nwhatsapp\n"
			printf "SlimSocial-for-Twitter\nslimsocial-for-twitter\n"
			printf "Code-Editor\ncode-editor\n"
			printf "openWorkout\nopenworkout\n"
			printf "PayPal\npaypal\n"
			printf "ProtonMail\nprotonmail\n"
			printf "OpenKeychain\nopenkeychain\n"
			printf "Termux:Boot\ntermux:boot\n"
			printf "Galaxy-Store\ngalaxy-store\n"
			printf "Amazon-VISA\namazon-visa\n"
			printf "NewPipe\nnewpipe\n"
			printf "Kalender\nkalender\n"
			printf "Google-Play-Store\ngoogle-play-store\n"
			printf "Aegis\naegis\n"
			printf "Xbox-Game-Pass\nxbox-game-pass\n"
			printf "NetGuard\nnetguard\n"
			printf "Dankeschön\ndankeschön\n"
			printf "TermuxLauncher\ntermuxlauncher\n"
			printf "Termux-Tutorial\ntermux-tutorial\n"
			printf "Vodafone-Services\nvodafone-services\n"
			printf "Nachrichten\nnachrichten\n"
			printf "MuPDF-viewer\nmupdf-viewer\n"
			printf "6-Weeks-Challenge-Lite\n6-weeks-challenge-lite\n"
			printf "Infinity\ninfinity\n"
			printf "Hackers-Keyboard\nhackers-keyboard\n"
			printf "UntrackMe\nuntrackme\n"
			printf "Signal\nsignal\n"
			printf "Aurora-Store\naurora-store\n"
			printf "Galerie\ngalerie\n"
			printf "Eingabehilfe\neingabehilfe\n"
			printf "Safe-Charger\nsafe-charger\n"
			printf "ScreenCam\nscreencam\n"
			printf "Twire\ntwire\n"
			printf "Vodafone-Services\nvodafone-services\n"
			printf "Ruthless-Launcher\nruthless-launcher\n"
			printf "Slide\nslide\n"
			printf "Unit-Converter-Ultimate\nunit-converter-ultimate\n"
			printf "Uhr\nuhr\n"
			printf "Termux:Float\ntermux:float\n"
			printf "SMS-Messenger\nsms-messenger\n"
			printf "Hypatia\nhypatia\n"
			printf "WiFi-Manager\nwifi-manager\n"
			printf "Termux-Guide-for-hacking\ntermux-guide-for-hacking\n"
			printf "OpenScan\nopenscan\n"
			printf "Advanzia\nadvanzia\n"
			printf "Private-Location\nprivate-location\n"
			printf "Eigene-Dateien\neigene-dateien\n"
			printf "Privacy-Browser\nprivacy-browser\n"
			printf "Terminal-Commands\nterminal-commands\n"
			printf "App-Manager\napp-manager\n"
			printf "Text---Bildscanner\ntext---bildscanner\n"
			printf "Vinyl-Music-Player\nvinyl-music-player\n"
			printf "Bitwarden\nbitwarden\n"
			printf "Öffi\nöffi\n"
			printf "Telefon\ntelefon\n"
			printf "OpenHub\nopenhub\n"
			printf "Galerie\ngalerie\n"
			printf "Sound-Meter-HQ-PRO\nsound-meter-hq-pro\n"
			printf "Battery-Calibration\nbattery-calibration\n"
			printf "personalDNSfilter\npersonaldnsfilter\n"
			printf "Amaze\namaze\n"
			printf "QR--Barcode-Scanner\nqr--barcode-scanner\n"
			printf "SD-Maid\nsd-maid\n"
			printf "Einstellungen\neinstellungen\n"
			printf "Gerätewartung\ngerätewartung\n"
			printf "Termux\ntermux\n"
			printf "Learn-ADB-and-Fastboot\nlearn-adb-and-fastboot\n"
			printf "Hibernation-Manager\nhibernation-manager\n"
			printf "Wearable-Manager-Installer\nwearable-manager-installer\n"
			printf "Finanzassistent\nfinanzassistent\n"
			printf "Diktiergerät\ndiktiergerät\n"
			printf "Bromite\nbromite\n"
			printf "MyMonero-for-Android\nmymonero-for-android\n"
			printf "Notizen\nnotizen\n"
			printf "monerujo\nmonerujo\n"
			printf "DuckDuckGo\nduckduckgo\n"
			printf "TERMUX\ntermux\n"
			printf "OsmAnd~\nosmand~\n"
			printf "WhatsApp-Web-To-Go\nwhatsapp-web-to-go\n"
			printf "Zeichenblock\nzeichenblock\n"
			printf "Post--DHL\npost--dhl\n"
			printf "FairEmail\nfairemail\n"
			printf "System-Tracing\nsystem-tracing\n"
			printf "Radio\nradio\n"
			printf "Kamera\nkamera\n"
			printf "Kontakte\nkontakte\n"
			printf "Open-In-WhatsApp\nopen-in-whatsapp\n"
			printf "Linux-Command-Library\nlinux-command-library\n"
			printf "Uhr\nuhr\n" ;;
		(*) printf "Unknown command: type 'launch --help' for detail .\n"
			return 1 ;;
	esac
}
man () {
	colored $0 "$@"
}
mkcd () {
	mkdir -p $1
	cd $1
}
mktouch () {
	mkdir -p `dirname $1`
	touch $1
}
nvm_prompt_info () {
	which nvm &> /dev/null || return
	local nvm_prompt=${$(nvm current)#v} 
	echo "${ZSH_THEME_NVM_PROMPT_PREFIX}${nvm_prompt}${ZSH_THEME_NVM_PROMPT_SUFFIX}"
}
omz_history () {
	local clear list
	zparseopts -E c=clear l=list
	if [[ -n "$clear" ]]
	then
		echo -n >| "$HISTFILE"
		fc -p "$HISTFILE"
		echo History file deleted. >&2
	elif [[ -n "$list" ]]
	then
		builtin fc "$@"
	else
		[[ ${@[-1]-} = *[0-9]* ]] && builtin fc -l "$@" || builtin fc -l "$@" 1
	fi
}
omz_termsupport_precmd () {
	[[ "${DISABLE_AUTO_TITLE:-}" == true ]] && return
	title $ZSH_THEME_TERM_TAB_TITLE_IDLE $ZSH_THEME_TERM_TITLE_IDLE
}
omz_termsupport_preexec () {
	[[ "${DISABLE_AUTO_TITLE:-}" == true ]] && return
	emulate -L zsh
	setopt extended_glob
	local -a cmdargs
	cmdargs=("${(z)2}") 
	if [[ "${cmdargs[1]}" = fg ]]
	then
		local job_id jobspec="${cmdargs[2]#%}" 
		case "$jobspec" in
			(<->) job_id=${jobspec}  ;;
			("" | % | +) job_id=${(k)jobstates[(r)*:+:*]}  ;;
			(-) job_id=${(k)jobstates[(r)*:-:*]}  ;;
			([?]*) job_id=${(k)jobtexts[(r)*${(Q)jobspec}*]}  ;;
			(*) job_id=${(k)jobtexts[(r)${(Q)jobspec}*]}  ;;
		esac
		if [[ -n "${jobtexts[$job_id]}" ]]
		then
			1="${jobtexts[$job_id]}" 
			2="${jobtexts[$job_id]}" 
		fi
	fi
	local CMD=${1[(wr)^(*=*|sudo|ssh|mosh|rake|-*)]:gs/%/%%} 
	local LINE="${2:gs/%/%%}" 
	title '$CMD' '%100>...>$LINE%<<'
}
omz_urldecode () {
	emulate -L zsh
	local encoded_url=$1 
	local caller_encoding=$langinfo[CODESET] 
	local LC_ALL=C 
	export LC_ALL
	local tmp=${encoded_url:gs/+/ /} 
	tmp=${tmp:gs/\\/\\\\/} 
	tmp=${tmp:gs/%/\\x/} 
	local decoded
	eval "decoded=\$'$tmp'"
	local safe_encodings
	safe_encodings=(UTF-8 utf8 US-ASCII) 
	if [[ -z ${safe_encodings[(r)$caller_encoding]} ]]
	then
		decoded=$(echo -E "$decoded" | iconv -f UTF-8 -t $caller_encoding) 
		if [[ $? != 0 ]]
		then
			echo "Error converting string from UTF-8 to $caller_encoding" >&2
			return 1
		fi
	fi
	echo -E "$decoded"
}
omz_urlencode () {
	emulate -L zsh
	local -a opts
	zparseopts -D -E -a opts r m P
	local in_str=$1 
	local url_str="" 
	local spaces_as_plus
	if [[ -z $opts[(r)-P] ]]
	then
		spaces_as_plus=1 
	fi
	local str="$in_str" 
	local encoding=$langinfo[CODESET] 
	local safe_encodings
	safe_encodings=(UTF-8 utf8 US-ASCII) 
	if [[ -z ${safe_encodings[(r)$encoding]} ]]
	then
		str=$(echo -E "$str" | iconv -f $encoding -t UTF-8) 
		if [[ $? != 0 ]]
		then
			echo "Error converting string from $encoding to UTF-8" >&2
			return 1
		fi
	fi
	local i byte ord LC_ALL=C 
	export LC_ALL
	local reserved=';/?:@&=+$,' 
	local mark='_.!~*''()-' 
	local dont_escape="[A-Za-z0-9" 
	if [[ -z $opts[(r)-r] ]]
	then
		dont_escape+=$reserved 
	fi
	if [[ -z $opts[(r)-m] ]]
	then
		dont_escape+=$mark 
	fi
	dont_escape+="]" 
	local url_str="" 
	for ((i = 1; i <= ${#str}; ++i )) do
		byte="$str[i]" 
		if [[ "$byte" =~ "$dont_escape" ]]
		then
			url_str+="$byte" 
		else
			if [[ "$byte" == " " && -n $spaces_as_plus ]]
			then
				url_str+="+" 
			else
				ord=$(( [##16] #byte )) 
				url_str+="%$ord" 
			fi
		fi
	done
	echo -E "$url_str"
}
open_command () {
	local open_cmd
	case "$OSTYPE" in
		(linux*) [[ "$(uname -r)" != *icrosoft* ]] && open_cmd='nohup xdg-open'  || {
				open_cmd='cmd.exe /c start ""' 
				[[ -e "$1" ]] && {
					1="$(wslpath -w "${1:a}")"  || return 1
				}
			} ;;
		(msys*) open_cmd='start ""'  ;;
		(*) echo "Platform $OSTYPE not supported"
			return 1 ;;
	esac
	${=open_cmd} "$@" &> /dev/null
}
parse_git_dirty () {
	local STATUS
	local -a FLAGS
	FLAGS=('--porcelain') 
	if [[ "$(__git_prompt_git config --get oh-my-zsh.hide-dirty)" != "1" ]]
	then
		if [[ "${DISABLE_UNTRACKED_FILES_DIRTY:-}" == "true" ]]
		then
			FLAGS+='--untracked-files=no' 
		fi
		case "${GIT_STATUS_IGNORE_SUBMODULES:-}" in
			(git)  ;;
			(*) FLAGS+="--ignore-submodules=${GIT_STATUS_IGNORE_SUBMODULES:-dirty}"  ;;
		esac
		STATUS=$(__git_prompt_git status ${FLAGS} 2> /dev/null | tail -1) 
	fi
	if [[ -n $STATUS ]]
	then
		echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
	else
		echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
	fi
}
preexec () {
	echo -ne '\e[5 q'
}
prompt () {
	local -a prompt_opts theme_active
	zstyle -g theme_active :prompt-theme cleanup || {
		[[ -o promptbang ]] && prompt_opts+=(bang) 
		[[ -o promptcr ]] && prompt_opts+=(cr) 
		[[ -o promptpercent ]] && prompt_opts+=(percent) 
		[[ -o promptsp ]] && prompt_opts+=(sp) 
		[[ -o promptsubst ]] && prompt_opts+=(subst) 
		zstyle -e :prompt-theme cleanup 'zstyle -d :prompt-theme cleanup;' 'prompt_default_setup;' ${PS1+PS1="${(q)PS1}"} ${PS2+PS2="${(q)PS2}"} ${PS3+PS3="${(q)PS3}"} ${PS4+PS4="${(q)PS4}"} ${RPS1+RPS1="${(q)RPS1}"} ${RPS2+RPS2="${(q)RPS2}"} ${RPROMPT+RPROMPT="${(q)RPROMPT}"} ${RPROMPT2+RPROMPT2="${(q)RPROMPT2}"} ${PSVAR+PSVAR="${(q)PSVAR}"} "precmd_functions=(${(q)precmd_functions[@]})" "preexec_functions=(${(q)preexec_functions[@]})" "prompt_opts=( ${prompt_opts[*]} )" 'reply=(yes)'
	}
	set_prompt "$@"
	(( ${#prompt_opts} )) && setopt noprompt{bang,cr,percent,sp,subst} "prompt${^prompt_opts[@]}"
	true
}
prompt_Imp_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_adam1_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_adam2_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_adben_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_astro-z_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_bart_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_berlin_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_bigfade_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_candy_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_classyTouch_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_cleanup () {
	local -a cleanup_hooks
	if zstyle -g cleanup_hooks :prompt-theme cleanup
	then
		cleanup_hooks+=(';' "$@") 
		zstyle -e :prompt-theme cleanup "${cleanup_hooks[@]}"
	elif (( $+prompt_preview_cleanup == 0 ))
	then
		print -u2 "prompt_cleanup: no prompt theme active"
		return 1
	fi
}
prompt_clint_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_darkblood_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_default_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_dragon_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_elite2_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_elite_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_fade_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_fino-time_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_fino_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_fire_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_fox_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_funky_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_gnzh_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_gruvbox_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_intheloop_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_kali_setup () {
	local current_dir='%{$fg_bold[red]%}[%{$reset_color%}%~% %{$fg_bold[red]%}]%{$reset_color%}' 
	local git_branch='$()%{$reset_color%}' 
	PROMPT="
%(?,%{$fg[red]%}┌─╼%{$fg_bold[red]%}[%{$fg_bold[blue]%}H4CK3R%{$fg_bold[yellow]%}@%{$fg_bold[cyan]%}LINUX%{$fg_bold[red]%}]%{$fg_bold[green]%}—%{$fg_bold[red]%}[%{$fg_bold[green]%}%(5~|%-1~/…/%2~|%4~)%{$fg_bold[red]%}]%{$reset_color%} ${git_branch}
%{$fg[red]%}└────╼%{$fg_bold[white]%} ❯%{$fg_bold[blue]%}❯%{$fg_bold[cyan]%}❯%{$reset_color%} ,%{$fg[red]%}┌─╼%{$fg_bold[red]%}[%{$fg_bold[green]%}%(5~|%-1~/…/%2~|%4~)%{$fg_bold[red]%}]%{$reset_color%}
%{$fg[red]%}└╼%{$fg_bold[white]%} ❯%{$fg_bold[blue]%}❯%{$fg_bold[cyan]%}❯%{$reset_color%} " 
	ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}[" 
	ZSH_THEME_GIT_PROMPT_SUFFIX="] %{$reset_color%}" 
}
prompt_kphoen_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_mikeh_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_multiline_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_my-theme_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_off_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_oliver_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_parrot2_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_parrot_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_preview_safely () {
	emulate -L zsh
	print -P "%b%f%k"
	if [[ -z "$prompt_themes[(r)$1]" ]]
	then
		print "Unknown theme: $1"
		return
	fi
	local +h PS1=$PS1 PS2=$PS2 PS3=$PS3 PS4=$PS4 RPS1=$RPS1 RPS2=$RPS2 
	local +h PROMPT=$PROMPT RPROMPT=$RPOMPT RPROMPT2=$RPROMPT2 PSVAR=$PSVAR 
	local -a precmd_functions preexec_functions prompt_preview_cleanup
	local -aLl +h zle_highlight
	{
		zstyle -g prompt_preview_cleanup :prompt-theme cleanup
		{
			zstyle -d :prompt-theme cleanup
			prompt_${1}_setup
			if typeset +f prompt_${1}_preview >&/dev/null
			then
				prompt_${1}_preview "$@[2,-1]"
			else
				prompt_preview_theme "$@"
			fi
		} always {
			zstyle -t :prompt-theme cleanup
		}
	} always {
		(( $#prompt_preview_cleanup )) && zstyle -e :prompt-theme cleanup "${prompt_preview_cleanup[@]}"
	}
}
prompt_preview_theme () {
	emulate -L zsh
	(( $+prompt_preview_cleanup )) || {
		prompt_preview_safely "$@"
		return
	}
	local -a prompt_opts
	print -n "$1 theme"
	(( $#* > 1 )) && print -n " with parameters \`$*[2,-1]'"
	print ":"
	prompt_${1}_setup "$@[2,-1]"
	(( ${#prompt_opts} )) && setopt noprompt{bang,cr,percent,sp,subst} "prompt${^prompt_opts[@]}"
	[[ -n ${precmd_functions[(r)prompt_${1}_precmd]} ]] && prompt_${1}_precmd
	[[ -o promptcr ]] && print -n $'\r'
	:
	print -P "${PS1}command arg1 arg2 ... argn"
	[[ -n ${preexec_functions[(r)prompt_${1}_preexec]} ]] && prompt_${1}_preexec
}
prompt_punctual_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_pws_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_redhat_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_refined_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_restore_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_rgm_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_rkj-repos_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_rkj_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_sepshell_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_shelder_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_simonoff_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_steeef_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_strug_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_suse_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_ubunly_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_walters_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_xiong-chiamov_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_xiong_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_ys_setup () {
	# undefined
	builtin autoload -XUz
}
prompt_zefram_setup () {
	# undefined
	builtin autoload -XUz
}
promptinit () {
	emulate -L zsh
	setopt extendedglob
	local ppath='' name theme 
	local -a match mbegin mend
	for theme in $^fpath/prompt_*_setup(N)
	do
		if [[ $theme == */prompt_(#b)(*)_setup ]]
		then
			name="$match[1]" 
			if [[ -r "$theme" ]]
			then
				prompt_themes=($prompt_themes $name) 
				autoload -Uz prompt_${name}_setup
			else
				print "Couldn't read file $theme containing theme $name."
			fi
		else
			print "Eh?  Mismatch between glob patterns in promptinit."
		fi
	done
	autoload -Uz add-zsh-hook
	prompt_newline=$'\n%{\r%}' 
}
pyclean () {
	ZSH_PYCLEAN_PLACES=${*:-'.'} 
	find ${ZSH_PYCLEAN_PLACES} -type f -name "*.py[co]" -delete
	find ${ZSH_PYCLEAN_PLACES} -type d -name "__pycache__" -delete
	find ${ZSH_PYCLEAN_PLACES} -depth -type d -name ".mypy_cache" -exec rm -r "{}" +
	find ${ZSH_PYCLEAN_PLACES} -depth -type d -name ".pytest_cache" -exec rm -r "{}" +
}
pyenv_prompt_info () {
	return 1
}
pyuserpaths () {
	local targets=("python2" "python3") 
	local interps=() 
	for target in $targets
	do
		[ `command -v $target` ] && interps+=($target) 
	done
	local user_base="${HOME}/.local" 
	[ $PYTHONUSERBASE ] && user_base=$PYTHONUSERBASE 
	for interp in $interps
	do
		local ver=`$interp -V 2>&1` 
		ver=`echo ${ver:7} | cut -d '.' -f 1,2` 
		local site_pkgs="${user_base}/lib/python${ver}/site-packages" 
		[[ -d $site_pkgs && ! $PYTHONPATH =~ $site_pkgs ]] && export PYTHONPATH=${site_pkgs}:$PYTHONPATH 
	done
}
ranger_cd () {
	temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")" 
	ranger --choosedir="$temp_file" -- "${@:-$PWD}"
	if chosen_dir="$(cat -- "$temp_file")"  && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]
	then
		cd -- "$chosen_dir"
	fi
	\rm -f -- "$temp_file"
}
rbenv_prompt_info () {
	return 1
}
rename () {
	if [ "$#" -ne 2 ]
	then
		echo "usage: $0 path/to/file/old_name new_name"
		return
	fi
	mv $1 `dirname $1`/$2
}
ruby_prompt_info () {
	echo $(rvm_prompt_info || rbenv_prompt_info || chruby_prompt_info)
}
rvm_prompt_info () {
	[ -f $HOME/.rvm/bin/rvm-prompt ] || return 1
	local rvm_prompt
	rvm_prompt=$($HOME/.rvm/bin/rvm-prompt ${=ZSH_THEME_RVM_PROMPT_OPTIONS} 2>/dev/null) 
	[[ -z "${rvm_prompt}" ]] && return 1
	echo "${ZSH_THEME_RUBY_PROMPT_PREFIX}${rvm_prompt}${ZSH_THEME_RUBY_PROMPT_SUFFIX}"
}
set_prompt () {
	emulate -L zsh
	local opt preview theme usage old_theme
	usage='Usage: prompt <options>
Options:
    -c              Show currently selected theme and parameters
    -l              List currently available prompt themes
    -p [<themes>]   Preview given themes (defaults to all)
    -h [<theme>]    Display help (for given theme)
    -s <theme>      Set and save theme
    <theme>         Switch to new theme immediately (changes not saved)

Use prompt -h <theme> for help on specific themes.' 
	getopts "chlps:" opt
	case "$opt" in
		(h|p) setopt localtraps
			if [[ -z "$prompt_theme[1]" ]]
			then
				local +h PS1=$PS1 PS2=$PS2 PS3=$PS3 PS4=$PS4 RPS1=$RPS1 RPS2=$RPS2 
				local +h PROMPT=$PROMPT RPROMPT=$RPOMPT RPROMPT2=$RPROMPT2 PSVAR=$PSVAR 
				local -a precmd_functions preexec_functions
			else
				trap 'prompt_${prompt_theme[1]}_setup "${(@)prompt_theme[2,-1]}"' 0
			fi ;;
	esac
	case "$opt" in
		(c) if [[ -n $prompt_theme ]]
			then
				print -n "Current prompt theme"
				(( $#prompt_theme > 1 )) && print -n " with parameters"
				print " is:\n  $prompt_theme"
			else
				print "Current prompt is not a theme."
			fi
			return ;;
		(h) if [[ -n "$2" && -n $prompt_themes[(r)$2] ]]
			then
				if functions prompt_$2_setup > /dev/null
				then
					prompt_$2_setup
				fi
				if functions prompt_$2_help > /dev/null
				then
					print "Help for $2 theme:\n"
					prompt_$2_help
				else
					print "No help available for $2 theme."
				fi
				print "\nType \`prompt -p $2' to preview the theme, \`prompt $2'"
				print "to try it out, and \`prompt -s $2' to use it in future sessions."
			else
				print "$usage"
			fi ;;
		(l) print Currently available prompt themes:
			print $prompt_themes
			return ;;
		(p) preview=($prompt_themes) 
			(( $#* > 1 )) && preview=("$@[2,-1]") 
			for theme in $preview
			do
				[[ "$theme" == "$prompt_theme[*]" ]] && continue
				prompt_preview_safely "$=theme"
			done
			print -P "%b%f%k" ;;
		(s) print "Set and save not yet implemented.  Please ensure your ~/.zshrc"
			print "contains something similar to the following:\n"
			print "  autoload -Uz promptinit"
			print "  promptinit"
			print "  prompt $*[2,-1]"
			shift ;&
		(*) if [[ "$1" == 'random' ]]
			then
				local random_themes
				if (( $#* == 1 ))
				then
					random_themes=($prompt_themes) 
				else
					random_themes=("$@[2,-1]") 
				fi
				local i=$(( ( $RANDOM % $#random_themes ) + 1 )) 
				argv=("${=random_themes[$i]}") 
			fi
			if [[ -z "$1" || -z $prompt_themes[(r)$1] ]]
			then
				print "$usage"
				return
			fi
			local hook
			for hook in chpwd precmd preexec periodic zshaddhistory zshexit
			do
				add-zsh-hook -D "${hook}" "prompt_*_${hook}"
			done
			typeset -ga zle_highlight=(${zle_highlight:#default:*}) 
			(( ${#zle_highlight} )) || unset zle_highlight
			prompt_$1_setup "$@[2,-1]" && prompt_theme=("$@")  ;;
	esac
}
setup_using_openbsd_package () {
	if [[ "$OSTYPE" != openbsd* ]] || (( ! $+commands[fzf] ))
	then
		return 1
	fi
	local completions="/usr/local/share/zsh/site-functions/_fzf_completion" 
	local key_bindings="/usr/local/share/zsh/site-functions/_fzf_key_bindings" 
	if [[ -o interactive && "$DISABLE_FZF_AUTO_COMPLETION" != "true" ]]
	then
		source "$completions" 2> /dev/null
	fi
	if [[ "$DISABLE_FZF_KEY_BINDINGS" != "true" ]]
	then
		source "$key_bindings" 2> /dev/null
	fi
	return 0
}
spectrum_bls () {
	local ZSH_SPECTRUM_TEXT=${ZSH_SPECTRUM_TEXT:-Arma virumque cano Troiae qui primus ab oris} 
	for code in {000..255}
	do
		print -P -- "$code: $BG[$code]$ZSH_SPECTRUM_TEXT%{$reset_color%}"
	done
}
spectrum_ls () {
	local ZSH_SPECTRUM_TEXT=${ZSH_SPECTRUM_TEXT:-Arma virumque cano Troiae qui primus ab oris} 
	for code in {000..255}
	do
		print -P -- "$code: $FG[$code]$ZSH_SPECTRUM_TEXT%{$reset_color%}"
	done
}
svn_prompt_info () {
	return 1
}
take () {
	if [[ $1 =~ ^(https?|ftp).*\.tar\.(gz|bz2|xz)$ ]]
	then
		takeurl $1
	elif [[ $1 =~ ^([A-Za-z0-9]\+@|https?|git|ssh|ftps?|rsync).*\.git/?$ ]]
	then
		takegit $1
	else
		takedir $1
	fi
}
takedir () {
	mkdir -p $@ && cd ${@:$#}
}
takegit () {
	git clone $1
	cd $(basename ${1%%.git})
}
takeurl () {
	data=$(mktemp) 
	curl -L $1 > $data
	tar xf $data
	thedir=$(tar tf $data | head -1) 
	rm $data
	cd $thedir
}
tf_prompt_info () {
	return 1
}
title () {
	emulate -L zsh
	setopt prompt_subst
	[[ "$INSIDE_EMACS" == *term* ]] && return
	: ${2=$1}
	case "$TERM" in
		(cygwin | xterm* | putty* | rxvt* | konsole* | ansi | mlterm* | alacritty | st*) print -Pn "\e]2;${2:q}\a"
			print -Pn "\e]1;${1:q}\a" ;;
		(screen* | tmux*) print -Pn "\ek${1:q}\e\\" ;;
		(*) if [[ "$TERM_PROGRAM" == "iTerm.app" ]]
			then
				print -Pn "\e]2;${2:q}\a"
				print -Pn "\e]1;${1:q}\a"
			else
				if [[ -n "$terminfo[fsl]" ]] && [[ -n "$terminfo[tsl]" ]]
				then
					echoti tsl
					print -Pn "$1"
					echoti fsl
				fi
			fi ;;
	esac
}
toggle-fzf-tab () {
	emulate -L zsh -o extended_glob
	if (( $+_ftb_orig_widget ))
	then
		disable-fzf-tab
	else
		enable-fzf-tab
	fi
}
trash () {
	[[ $# -gt 0 ]] || {
		__trash_help
		return 1
	}
	local cmd="$1" 
	shift
	abbr=('-d:delete' '-r:recover' '-l:list' '-c:clear' '-t:content' '-v:version' '-h:help' '-a:all') 
	for str in ${abbr[@]}
	do
		if [ "${str%:*}" = "$cmd" ]
		then
			cmd=${str#*:} 
		fi
	done
	type __trash_$cmd &> /dev/null || {
		__trash_help
		return 1
	}
	__trash_$cmd "$@"
}
try_alias_value () {
	alias_value "$1" || echo "$1"
}
uninstall_oh_my_zsh () {
	env ZSH="$ZSH" sh "$ZSH/tools/uninstall.sh"
}
up-line-or-beginning-search () {
	emulate -L zsh
	typeset -g __searching __savecursor
	if [[ $LBUFFER == *$'\n'* ]]
	then
		zle .up-line-or-history
		__searching='' 
	elif [[ -n $PREBUFFER ]] && zstyle -t ':zle:up-line-or-beginning-search' edit-buffer
	then
		zle .push-line-or-edit
	else
		[[ $LASTWIDGET = $__searching ]] && CURSOR=$__savecursor 
		__savecursor=$CURSOR 
		__searching=$WIDGET 
		zle .history-beginning-search-backward
		zstyle -T ':zle:up-line-or-beginning-search' leave-cursor && zle .end-of-line
	fi
}
upgrade_oh_my_zsh () {
	echo "${fg[yellow]}Note: \`$0\` is deprecated. Use \`omz update\` instead.$reset_color" >&2
	omz update
}
url-quote-magic () {
	setopt localoptions noksharrays extendedglob
	local qkey="${(q)KEYS}" 
	local -a reply match mbegin mend
	if [[ "$KEYS" != "$qkey" ]]
	then
		local lbuf="$LBUFFER$qkey" 
		if [[ "${(Q)LBUFFER}$KEYS" == "${(Q)lbuf}" ]]
		then
			local -a words
			words=("${(@Q)${(z)lbuf}}") 
			local urlseps urlmetas urlglobbers localschema otherschema
			if [[ "$words[-1]" == (#b)([^:]##):* ]]
			then
				zstyle -s ":url-quote-magic:$match[1]" url-seps urlseps ''
				zstyle -s ":url-quote-magic:$match[1]" url-metas urlmetas ''
			fi
			zstyle -s :url-quote-magic url-globbers urlglobbers '|'
			zstyle -s :urlglobber url-other-schema otherschema '|'
			if [[ "$words[1]" == ${~urlglobbers} ]]
			then
				zstyle -s :urlglobber url-local-schema localschema '|'
			else
				localschema=' ' 
			fi
			case "$words[-1]" in
				(*[\'\"]*)  ;;
				((${~localschema}):/(|/localhost)/*) [[ "$urlseps" == *"$KEYS"* ]] && LBUFFER="$LBUFFER\\"  ;;
				((${~otherschema}):*) [[ "$urlseps$urlmetas" == *"$KEYS"* ]] && LBUFFER="$LBUFFER\\"  ;;
			esac
		fi
	fi
	zle .self-insert
}
urlglobber () {
	local -a args globbed localschema otherschema reply
	local arg command="$1" 
	shift
	zstyle -s :urlglobber url-local-schema localschema '|'
	zstyle -s :urlglobber url-other-schema otherschema '|'
	for arg
	do
		case "${arg}" in
			((${~localschema}):/(|/localhost)/*) globbed=(${~${arg##ftp://(localhost|)}}) 
				args[$#args+1]=("${(M)arg##(${~localchema})://(localhost|)}${(@)^globbed}")  ;;
			((${~otherschema}):*) args[${#args}+1]="$arg"  ;;
			(*) args[${#args}+1]=(${~arg})  ;;
		esac
	done
	"$command" "${(@)args}"
}
vi_mode_prompt_info () {
	return 1
}
virtualenv_prompt_info () {
	return 1
}
web_search () {
	emulate -L zsh
	typeset -A urls
	urls=($ZSH_WEB_SEARCH_ENGINES google "https://www.google.com/search?q=" bing "https://www.bing.com/search?q=" yahoo "https://search.yahoo.com/search?p=" duckduckgo "https://www.duckduckgo.com/?q=" startpage "https://www.startpage.com/do/search?q=" yandex "https://yandex.ru/yandsearch?text=" github "https://github.com/search?q=" baidu "https://www.baidu.com/s?wd=" ecosia "https://www.ecosia.org/search?q=" goodreads "https://www.goodreads.com/search?q=" qwant "https://www.qwant.com/?q=" givero "https://www.givero.com/search?q=" stackoverflow "https://stackoverflow.com/search?q=" wolframalpha "https://www.wolframalpha.com/input/?i=" archive "https://web.archive.org/web/*/" scholar "https://scholar.google.com/scholar?q=") 
	if [[ -z "$urls[$1]" ]]
	then
		echo "Search engine '$1' not supported."
		return 1
	fi
	if [[ $# -gt 1 ]]
	then
		url="${urls[$1]}${(j:+:)@[2,-1]}" 
	else
		url="${(j://:)${(s:/:)urls[$1]}[1,2]}" 
	fi
	open_command "$url"
}
ysu_message () {
	local DEFAULT_MESSAGE_FORMAT="${BOLD}${YELLOW}Found existing %alias_type for ${PURPLE}\"%command\"${YELLOW}. You should use: ${PURPLE}\"%alias\"${NONE}" 
	local alias_type_arg="${1}" 
	local command_arg="${2}" 
	local alias_arg="${3}" 
	command_arg="${command_arg//\%/%%}" 
	command_arg="${command_arg//\\/\\\\}" 
	local MESSAGE="${YSU_MESSAGE_FORMAT:-"$DEFAULT_MESSAGE_FORMAT"}" 
	MESSAGE="${MESSAGE//\%alias_type/$alias_type_arg}" 
	MESSAGE="${MESSAGE//\%command/$command_arg}" 
	MESSAGE="${MESSAGE//\%alias/$alias_arg}" 
	_write_ysu_buffer "$MESSAGE\n"
}
ytf () {
	FORMATS=$(ytnpl --list-formats "$1") 
	echo "$FORMATS" | grep --color --extended-regexp --invert-match " only"
	echo ""
	echo "$FORMATS" | grep --color --extended-regexp "video only"
	echo ""
	echo "$FORMATS" | grep --color --extended-regexp "audio only"
	echo "" && echo "== Preparing to save download as:"
	echo "  $(pwd)/$(youtube-dl --restrict-filenames --get-filename $1)"
	echo "== Please copy-paste 👇 a 'format code' (or vid+aud) ☝️"
	read -r FORMAT
	youtube-dl --no-playlist --restrict-filenames --format "$FORMAT" "$1"
}
zcalc () {
	# undefined
	builtin autoload -XUz
}
zle-line-finish () {
	echoti rmkx
}
zle-line-init () {
	echoti smkx
}
zsh-pip-cache-packages () {
	if [[ ! -d ${ZSH_PIP_CACHE_FILE:h} ]]
	then
		mkdir -p ${ZSH_PIP_CACHE_FILE:h}
	fi
	if [[ ! -f $ZSH_PIP_CACHE_FILE ]]
	then
		echo -n "(...caching package index...)"
		tmp_cache=/tmp/zsh_tmp_cache 
		touch $tmp_cache
		for index in $ZSH_PIP_INDEXES
		do
			curl -L $index 2> /dev/null | zsh-pip-clean-packages >> $tmp_cache
		done
		sort $tmp_cache | uniq | tr '\n' ' ' > $ZSH_PIP_CACHE_FILE
		rm -i $tmp_cache
	fi
}
zsh-pip-clean-packages () {
	sed -n '/<a href/ s/.*>\([^<]\{1,\}\).*/\1/p'
}
zsh-pip-clear-cache () {
	rm -i $ZSH_PIP_CACHE_FILE
	unset piplist
}
zsh-pip-test-clean-packages () {
	local expected
	local actual
	expected="0x10c-asm
1009558_nester" 
	actual=$(echo -n "<html><head><title>Simple Index</title><meta name=\"api-version\" value=\"2\" /></head><body>
<a href='0x10c-asm'>0x10c-asm</a><br/>
<a href='1009558_nester'>1009558_nester</a><br/>
</body></html>" | zsh-pip-clean-packages) 
	if [[ $actual != $expected ]]
	then
		echo -e "python's simple index is broken:\n$actual\n  !=\n$expected"
	else
		echo "python's simple index is fine"
	fi
	actual=$(echo -n '<html>
  <head>
    <title>Simple Package Index</title>
  </head>
  <body>
    <a href="0x10c-asm">0x10c-asm</a><br/>
    <a href="1009558_nester">1009558_nester</a><br/>
</body></html>' | zsh-pip-clean-packages) 
	if [[ $actual != $expected ]]
	then
		echo -e "the djangopypi2 index is broken:\n$actual\n  !=\n$expected"
	else
		echo "the djangopypi2 index is fine"
	fi
}
zsh-time () {
	time zsh -i -c exit
}
zsh_stats () {
	fc -l 1 | awk '{ CMD[$2]++; count++; } END { for (a in CMD) print CMD[a] " " CMD[a]*100/count "% " a }' | grep -v "./" | sort -nr | head -20 | column -c3 -s " " -t | nl
}
→chroma/-alias.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-autoload.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-autorandr.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-awk.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-docker.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-example.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-fast-theme.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-fpath_peq.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-git.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-grep.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-hub.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-ionice.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-lab.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-make.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-nice.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-nmcli.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-node.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-ogit.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-perl.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-precommand.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-printf.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-ruby.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-scp.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-sh.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-source.ch () {
	(( next_word = 2 | 8192 ))
	local __first_call="$1" __wrd="$2" __start_pos="$3" __end_pos="$4" 
	local __style __chars __home=${XDG_CACHE_HOME:-$HOME/.cache}/fsh 
	integer __idx1 __idx2
	(( __first_call )) && {
		FAST_HIGHLIGHT[chroma-src-counter]=0 
		__style=${FAST_THEME_NAME}builtin 
	} || {
		[[ "$__arg_type" = 3 ]] && return 2
		if (( in_redirection > 0 || this_word & 128 )) || [[ $__wrd == "<<<" ]]
		then
			return 1
		fi
		if [[ "$__wrd" = -* ]]
		then
			[[ "$__wrd" = --* ]] && __style=${FAST_THEME_NAME}double-hyphen-option  || __style=${FAST_THEME_NAME}single-hyphen-option 
		else
			(( FAST_HIGHLIGHT[chroma-src-counter] += 1, __idx1 = FAST_HIGHLIGHT[chroma-src-counter] ))
			if (( FAST_HIGHLIGHT[chroma-src-counter] == 1 ))
			then
				command mkdir -p "$__home"
				command cp -f "${__wrd}" "$__home" 2> /dev/null && {
					zcompile "$__home"/"${__wrd:t}" 2> /dev/null >&2 && __style=${FAST_THEME_NAME}correct-subtle  || __style=${FAST_THEME_NAME}incorrect-subtle 
				}
			elif (( FAST_HIGHLIGHT[chroma-src-counter] == 2 ))
			then
				return 1
			fi
		fi
	}
	[[ -n "$__style" ]] && (( __start=__start_pos-${#PREBUFFER}, __end=__end_pos-${#PREBUFFER}, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}") 
	(( this_word = next_word ))
	_start_pos=$_end_pos 
	return 0
}
→chroma/-ssh.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-subcommand.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-subversion.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-vim.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-whatis.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-which.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/-zinit.ch () {
	# undefined
	builtin autoload -XUz
}
→chroma/main-chroma.ch () {
	# undefined
	builtin autoload -XUz
}

#
# Zstyles
#
zstyle -d
zstyle ':completion:*:options' auto-description 'specify: %d'
zstyle ':completion:*' cache-path /data/data/com.termux/files/home/.cache/zsh
zstyle -e :prompt-theme cleanup 'zstyle -d :prompt-theme cleanup;' 'prompt_default_setup;' 'PS1=%\#\ ' 'PS2=%_\>\ ' 'PS3=\?\#\ ' 'PS4=+%N:%i\>\ ' 'PSVAR=''''' 'precmd_functions=('''')' 'preexec_functions=('''')' 'prompt_opts=( cr percent sp subst )' 'reply=(yes)'
zstyle ':completion:*:*:*:*:processes' command 'ps -u u0_a1491 -o pid,user,comm -w -w'
zstyle ':completion:*' completer _oldlist _expand _complete _ignored _match _correct _approximate _prefix
zstyle ':completion:*:options' description yes
zstyle ':completion:*:descriptions' format '[%d]'
zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:default' list-colors
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-grouped false
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' rehash true
zstyle ':completion:*:git-checkout:*' sort false
zstyle ':fzf-tab:*' switch-group , .
zstyle :plugin:fast-syntax-highlighting theme mytheme
zstyle zle-hook types isearch-exit isearch-update line-pre-redraw line-init line-finish history-line-set keymap-select
zstyle -e :url-quote-magic url-globbers $'zmodload -i zsh/parameter;\n\t reply=( noglob\n\t\t ${(k)galiases[(R)(* |)(noglob|urlglobber|globurl) *]:-}\n\t\t ${(k)aliases[(R)(* |)(noglob|urlglobber|globurl) *]:-} )'
zstyle :urlglobber url-local-schema ftp file
zstyle ':url-quote-magic:*' url-metas '*?[]^(|)~#{}='
zstyle :urlglobber url-other-schema http https ftp
zstyle -e ':url-quote-magic:*' url-seps 'reply=(";&<>${histchars[1]}")'
zstyle ':completion:*' use-cache yes
zstyle zle-line-init widgets 0:user:_zsh_highlight_widget_orig-s000-r288-zle-line-init 1:.hist.format.hook
zstyle zle-line-finish widgets 0:user:_zsh_highlight_widget_orig-s000-r288-zle-line-finish 1:.hist.format.hook

#
# Zle widgets
#
unset __zsnap_arr
typeset -ga __zsnap_arr
__zsnap_arr=( "${(@f)"$( "zle" "-la" )"}" )
for __zsnap_key in ${__zsnap_arr[@]}; do
    [[ "${__zsnap_key[1]}" != "." ]] && zle -D "$__zsnap_key"
done
zle -N .fzf-tab-orig-fzf-completion fzf-completion
zle -N .hist.format.hook
zle -N _bash_complete-word _zsh_highlight_widget_orig-s000-r288-_bash_complete-word
zle -N _bash_list-choices _zsh_highlight_widget_orig-s000-r288-_bash_list-choices
zle -N _complete_debug _zsh_highlight_widget_orig-s000-r288-_complete_debug
zle -N _complete_help _zsh_highlight_widget_orig-s000-r288-_complete_help
zle -N _complete_tag _zsh_highlight_widget_orig-s000-r288-_complete_tag
zle -N _correct_filename _zsh_highlight_widget_orig-s000-r288-_correct_filename
zle -N _correct_word _zsh_highlight_widget_orig-s000-r288-_correct_word
zle -N _expand_alias _zsh_highlight_widget_orig-s000-r288-_expand_alias
zle -N _expand_word _zsh_highlight_widget_orig-s000-r288-_expand_word
zle -N _history-complete-newer _zsh_highlight_widget_orig-s000-r288-_history-complete-newer
zle -N _history-complete-older _zsh_highlight_widget_orig-s000-r288-_history-complete-older
zle -N _list_expansions _zsh_highlight_widget_orig-s000-r288-_list_expansions
zle -N _most_recent_file _zsh_highlight_widget_orig-s000-r288-_most_recent_file
zle -N _next_tags _zsh_highlight_widget_orig-s000-r288-_next_tags
zle -N _read_comp _zsh_highlight_widget_orig-s000-r288-_read_comp
zle -N accept-and-hold _zsh_autosuggest_bound_1_accept-and-hold
zle -N accept-and-infer-next-history _zsh_autosuggest_bound_1_accept-and-infer-next-history
zle -N accept-and-menu-complete _zsh_autosuggest_bound_1_accept-and-menu-complete
zle -N accept-line _zsh_autosuggest_bound_1_accept-line
zle -N accept-line-and-down-history _zsh_autosuggest_bound_1_accept-line-and-down-history
zle -N accept-search _zsh_autosuggest_bound_1_accept-search
zle -N argument-base _zsh_autosuggest_bound_1_argument-base
zle -N auto-suffix-remove _zsh_autosuggest_bound_1_auto-suffix-remove
zle -N auto-suffix-retain _zsh_autosuggest_bound_1_auto-suffix-retain
zle -N autosuggest-accept _zsh_highlight_widget_orig-s000-r288-autosuggest-accept
zle -N autosuggest-capture-completion _zsh_autosuggest_bound_1_autosuggest-capture-completion
zle -N autosuggest-clear _zsh_highlight_widget_orig-s000-r288-autosuggest-clear
zle -N autosuggest-disable _zsh_highlight_widget_orig-s000-r288-autosuggest-disable
zle -N autosuggest-enable _zsh_highlight_widget_orig-s000-r288-autosuggest-enable
zle -N autosuggest-execute _zsh_highlight_widget_orig-s000-r288-autosuggest-execute
zle -N autosuggest-fetch _zsh_highlight_widget_orig-s000-r288-autosuggest-fetch
zle -N autosuggest-orig-1-accept-and-hold _zsh_highlight_widget_orig-s000-r288-accept-and-hold
zle -N autosuggest-orig-1-accept-and-infer-next-history _zsh_highlight_widget_orig-s000-r288-accept-and-infer-next-history
zle -N autosuggest-orig-1-accept-and-menu-complete _zsh_highlight_widget_orig-s000-r288-accept-and-menu-complete
zle -N autosuggest-orig-1-accept-line _zsh_highlight_widget_orig-s000-r288-accept-line
zle -N autosuggest-orig-1-accept-line-and-down-history _zsh_highlight_widget_orig-s000-r288-accept-line-and-down-history
zle -N autosuggest-orig-1-accept-search _zsh_highlight_widget_orig-s000-r288-accept-search
zle -N autosuggest-orig-1-argument-base _zsh_highlight_widget_orig-s000-r288-argument-base
zle -N autosuggest-orig-1-auto-suffix-remove _zsh_highlight_widget_orig-s000-r288-auto-suffix-remove
zle -N autosuggest-orig-1-auto-suffix-retain _zsh_highlight_widget_orig-s000-r288-auto-suffix-retain
zle -N autosuggest-orig-1-autosuggest-capture-completion _zsh_highlight_widget_orig-s000-r288-autosuggest-capture-completion
zle -N autosuggest-orig-1-backward-char _zsh_highlight_widget_orig-s000-r288-backward-char
zle -N autosuggest-orig-1-backward-delete-char _zsh_highlight_widget_orig-s000-r288-backward-delete-char
zle -N autosuggest-orig-1-backward-delete-word _zsh_highlight_widget_orig-s000-r288-backward-delete-word
zle -N autosuggest-orig-1-backward-kill-line _zsh_highlight_widget_orig-s000-r288-backward-kill-line
zle -N autosuggest-orig-1-backward-kill-word _zsh_highlight_widget_orig-s000-r288-backward-kill-word
zle -N autosuggest-orig-1-backward-word _zsh_highlight_widget_orig-s000-r288-backward-word
zle -N autosuggest-orig-1-beginning-of-buffer-or-history _zsh_highlight_widget_orig-s000-r288-beginning-of-buffer-or-history
zle -N autosuggest-orig-1-beginning-of-history _zsh_highlight_widget_orig-s000-r288-beginning-of-history
zle -N autosuggest-orig-1-beginning-of-line _zsh_highlight_widget_orig-s000-r288-beginning-of-line
zle -N autosuggest-orig-1-beginning-of-line-hist _zsh_highlight_widget_orig-s000-r288-beginning-of-line-hist
zle -N autosuggest-orig-1-bracketed-paste _zsh_highlight_widget_orig-s000-r288-bracketed-paste
zle -N autosuggest-orig-1-capitalize-word _zsh_highlight_widget_orig-s000-r288-capitalize-word
zle -N autosuggest-orig-1-clear-screen _zsh_highlight_widget_orig-s000-r288-clear-screen
zle -N autosuggest-orig-1-complete-word _zsh_highlight_widget_orig-s000-r288-complete-word
zle -N autosuggest-orig-1-copy-prev-shell-word _zsh_highlight_widget_orig-s000-r288-copy-prev-shell-word
zle -N autosuggest-orig-1-copy-prev-word _zsh_highlight_widget_orig-s000-r288-copy-prev-word
zle -N autosuggest-orig-1-copy-region-as-kill _zsh_highlight_widget_orig-s000-r288-copy-region-as-kill
zle -N autosuggest-orig-1-deactivate-region _zsh_highlight_widget_orig-s000-r288-deactivate-region
zle -N autosuggest-orig-1-delete-char _zsh_highlight_widget_orig-s000-r288-delete-char
zle -N autosuggest-orig-1-delete-char-or-list _zsh_highlight_widget_orig-s000-r288-delete-char-or-list
zle -N autosuggest-orig-1-delete-word _zsh_highlight_widget_orig-s000-r288-delete-word
zle -N autosuggest-orig-1-describe-key-briefly _zsh_highlight_widget_orig-s000-r288-describe-key-briefly
zle -N autosuggest-orig-1-digit-argument _zsh_highlight_widget_orig-s000-r288-digit-argument
zle -N autosuggest-orig-1-down-case-word _zsh_highlight_widget_orig-s000-r288-down-case-word
zle -N autosuggest-orig-1-down-history _zsh_highlight_widget_orig-s000-r288-down-history
zle -N autosuggest-orig-1-down-line _zsh_highlight_widget_orig-s000-r288-down-line
zle -N autosuggest-orig-1-down-line-or-beginning-search _zsh_highlight_widget_orig-s000-r288-down-line-or-beginning-search
zle -N autosuggest-orig-1-down-line-or-history _zsh_highlight_widget_orig-s000-r288-down-line-or-history
zle -N autosuggest-orig-1-down-line-or-search _zsh_highlight_widget_orig-s000-r288-down-line-or-search
zle -N autosuggest-orig-1-edit-command-line _zsh_highlight_widget_orig-s000-r288-edit-command-line
zle -N autosuggest-orig-1-emacs-backward-word _zsh_highlight_widget_orig-s000-r288-emacs-backward-word
zle -N autosuggest-orig-1-emacs-forward-word _zsh_highlight_widget_orig-s000-r288-emacs-forward-word
zle -N autosuggest-orig-1-end-of-buffer-or-history _zsh_highlight_widget_orig-s000-r288-end-of-buffer-or-history
zle -N autosuggest-orig-1-end-of-history _zsh_highlight_widget_orig-s000-r288-end-of-history
zle -N autosuggest-orig-1-end-of-line _zsh_highlight_widget_orig-s000-r288-end-of-line
zle -N autosuggest-orig-1-end-of-line-hist _zsh_highlight_widget_orig-s000-r288-end-of-line-hist
zle -N autosuggest-orig-1-end-of-list _zsh_highlight_widget_orig-s000-r288-end-of-list
zle -N autosuggest-orig-1-exchange-point-and-mark _zsh_highlight_widget_orig-s000-r288-exchange-point-and-mark
zle -N autosuggest-orig-1-execute-last-named-cmd _zsh_highlight_widget_orig-s000-r288-execute-last-named-cmd
zle -N autosuggest-orig-1-execute-named-cmd _zsh_highlight_widget_orig-s000-r288-execute-named-cmd
zle -N autosuggest-orig-1-expand-cmd-path _zsh_highlight_widget_orig-s000-r288-expand-cmd-path
zle -N autosuggest-orig-1-expand-history _zsh_highlight_widget_orig-s000-r288-expand-history
zle -N autosuggest-orig-1-expand-or-complete _zsh_highlight_widget_orig-s000-r288-expand-or-complete
zle -N autosuggest-orig-1-expand-or-complete-prefix _zsh_highlight_widget_orig-s000-r288-expand-or-complete-prefix
zle -N autosuggest-orig-1-expand-word _zsh_highlight_widget_orig-s000-r288-expand-word
zle -N autosuggest-orig-1-fast-highlight-check-path-handler -fast-highlight-check-path-handler
zle -N autosuggest-orig-1-forward-char _zsh_highlight_widget_orig-s000-r288-forward-char
zle -N autosuggest-orig-1-forward-word _zsh_highlight_widget_orig-s000-r288-forward-word
zle -N autosuggest-orig-1-fzf-cd-widget _zsh_highlight_widget_orig-s000-r288-fzf-cd-widget
zle -N autosuggest-orig-1-fzf-completion _zsh_highlight_widget_orig-s000-r288-fzf-completion
zle -N autosuggest-orig-1-fzf-file-widget _zsh_highlight_widget_orig-s000-r288-fzf-file-widget
zle -N autosuggest-orig-1-fzf-history-widget _zsh_highlight_widget_orig-s000-r288-fzf-history-widget
zle -N autosuggest-orig-1-fzf-tab-complete _zsh_highlight_widget_orig-s000-r288-fzf-tab-complete
zle -N autosuggest-orig-1-fzf-tab-debug _zsh_highlight_widget_orig-s000-r288-fzf-tab-debug
zle -N autosuggest-orig-1-fzf-tab-dummy _zsh_highlight_widget_orig-s000-r288-fzf-tab-dummy
zle -N autosuggest-orig-1-get-line _zsh_highlight_widget_orig-s000-r288-get-line
zle -N autosuggest-orig-1-gosmacs-transpose-chars _zsh_highlight_widget_orig-s000-r288-gosmacs-transpose-chars
zle -N autosuggest-orig-1-history-beginning-search-backward _zsh_highlight_widget_orig-s000-r288-history-beginning-search-backward
zle -N autosuggest-orig-1-history-beginning-search-forward _zsh_highlight_widget_orig-s000-r288-history-beginning-search-forward
zle -N autosuggest-orig-1-history-incremental-pattern-search-backward _zsh_highlight_widget_orig-s000-r288-history-incremental-pattern-search-backward
zle -N autosuggest-orig-1-history-incremental-pattern-search-forward _zsh_highlight_widget_orig-s000-r288-history-incremental-pattern-search-forward
zle -N autosuggest-orig-1-history-incremental-search-backward _zsh_highlight_widget_orig-s000-r288-history-incremental-search-backward
zle -N autosuggest-orig-1-history-incremental-search-forward _zsh_highlight_widget_orig-s000-r288-history-incremental-search-forward
zle -N autosuggest-orig-1-history-search-backward _zsh_highlight_widget_orig-s000-r288-history-search-backward
zle -N autosuggest-orig-1-history-search-forward _zsh_highlight_widget_orig-s000-r288-history-search-forward
zle -N autosuggest-orig-1-history-substring-search-down history-substring-search-down
zle -N autosuggest-orig-1-history-substring-search-up history-substring-search-up
zle -N autosuggest-orig-1-infer-next-history _zsh_highlight_widget_orig-s000-r288-infer-next-history
zle -N autosuggest-orig-1-insert-last-word _zsh_highlight_widget_orig-s000-r288-insert-last-word
zle -N autosuggest-orig-1-kill-buffer _zsh_highlight_widget_orig-s000-r288-kill-buffer
zle -N autosuggest-orig-1-kill-line _zsh_highlight_widget_orig-s000-r288-kill-line
zle -N autosuggest-orig-1-kill-region _zsh_highlight_widget_orig-s000-r288-kill-region
zle -N autosuggest-orig-1-kill-whole-line _zsh_highlight_widget_orig-s000-r288-kill-whole-line
zle -N autosuggest-orig-1-kill-word _zsh_highlight_widget_orig-s000-r288-kill-word
zle -N autosuggest-orig-1-list-choices _zsh_highlight_widget_orig-s000-r288-list-choices
zle -N autosuggest-orig-1-list-expand _zsh_highlight_widget_orig-s000-r288-list-expand
zle -N autosuggest-orig-1-magic-space _zsh_highlight_widget_orig-s000-r288-magic-space
zle -N autosuggest-orig-1-menu-complete _zsh_highlight_widget_orig-s000-r288-menu-complete
zle -N autosuggest-orig-1-menu-expand-or-complete _zsh_highlight_widget_orig-s000-r288-menu-expand-or-complete
zle -N autosuggest-orig-1-menu-select _zsh_highlight_widget_orig-s000-r288-menu-select
zle -N autosuggest-orig-1-neg-argument _zsh_highlight_widget_orig-s000-r288-neg-argument
zle -N autosuggest-orig-1-overwrite-mode _zsh_highlight_widget_orig-s000-r288-overwrite-mode
zle -N autosuggest-orig-1-pound-insert _zsh_highlight_widget_orig-s000-r288-pound-insert
zle -N autosuggest-orig-1-push-input _zsh_highlight_widget_orig-s000-r288-push-input
zle -N autosuggest-orig-1-push-line _zsh_highlight_widget_orig-s000-r288-push-line
zle -N autosuggest-orig-1-push-line-or-edit _zsh_highlight_widget_orig-s000-r288-push-line-or-edit
zle -N autosuggest-orig-1-put-replace-selection _zsh_highlight_widget_orig-s000-r288-put-replace-selection
zle -N autosuggest-orig-1-quote-line _zsh_highlight_widget_orig-s000-r288-quote-line
zle -N autosuggest-orig-1-quote-region _zsh_highlight_widget_orig-s000-r288-quote-region
zle -N autosuggest-orig-1-quoted-insert _zsh_highlight_widget_orig-s000-r288-quoted-insert
zle -N autosuggest-orig-1-read-command _zsh_highlight_widget_orig-s000-r288-read-command
zle -N autosuggest-orig-1-recursive-edit _zsh_highlight_widget_orig-s000-r288-recursive-edit
zle -N autosuggest-orig-1-redisplay _zsh_highlight_widget_orig-s000-r288-redisplay
zle -N autosuggest-orig-1-redo _zsh_highlight_widget_orig-s000-r288-redo
zle -N autosuggest-orig-1-reset-prompt _zsh_highlight_widget_orig-s000-r288-reset-prompt
zle -N autosuggest-orig-1-reverse-menu-complete _zsh_highlight_widget_orig-s000-r288-reverse-menu-complete
zle -N autosuggest-orig-1-select-a-blank-word _zsh_highlight_widget_orig-s000-r288-select-a-blank-word
zle -N autosuggest-orig-1-select-a-shell-word _zsh_highlight_widget_orig-s000-r288-select-a-shell-word
zle -N autosuggest-orig-1-select-a-word _zsh_highlight_widget_orig-s000-r288-select-a-word
zle -N autosuggest-orig-1-select-in-blank-word _zsh_highlight_widget_orig-s000-r288-select-in-blank-word
zle -N autosuggest-orig-1-select-in-shell-word _zsh_highlight_widget_orig-s000-r288-select-in-shell-word
zle -N autosuggest-orig-1-select-in-word _zsh_highlight_widget_orig-s000-r288-select-in-word
zle -N autosuggest-orig-1-self-insert _zsh_highlight_widget_orig-s000-r288-self-insert
zle -N autosuggest-orig-1-self-insert-unmeta _zsh_highlight_widget_orig-s000-r288-self-insert-unmeta
zle -N autosuggest-orig-1-send-break _zsh_highlight_widget_orig-s000-r288-send-break
zle -N autosuggest-orig-1-set-mark-command _zsh_highlight_widget_orig-s000-r288-set-mark-command
zle -N autosuggest-orig-1-spell-word _zsh_highlight_widget_orig-s000-r288-spell-word
zle -N autosuggest-orig-1-split-undo _zsh_highlight_widget_orig-s000-r288-split-undo
zle -N autosuggest-orig-1-toggle-fzf-tab _zsh_highlight_widget_orig-s000-r288-toggle-fzf-tab
zle -N autosuggest-orig-1-transpose-chars _zsh_highlight_widget_orig-s000-r288-transpose-chars
zle -N autosuggest-orig-1-transpose-words _zsh_highlight_widget_orig-s000-r288-transpose-words
zle -N autosuggest-orig-1-undefined-key _zsh_highlight_widget_orig-s000-r288-undefined-key
zle -N autosuggest-orig-1-undo _zsh_highlight_widget_orig-s000-r288-undo
zle -N autosuggest-orig-1-universal-argument _zsh_highlight_widget_orig-s000-r288-universal-argument
zle -N autosuggest-orig-1-up-case-word _zsh_highlight_widget_orig-s000-r288-up-case-word
zle -N autosuggest-orig-1-up-history _zsh_highlight_widget_orig-s000-r288-up-history
zle -N autosuggest-orig-1-up-line _zsh_highlight_widget_orig-s000-r288-up-line
zle -N autosuggest-orig-1-up-line-or-beginning-search _zsh_highlight_widget_orig-s000-r288-up-line-or-beginning-search
zle -N autosuggest-orig-1-up-line-or-history _zsh_highlight_widget_orig-s000-r288-up-line-or-history
zle -N autosuggest-orig-1-up-line-or-search _zsh_highlight_widget_orig-s000-r288-up-line-or-search
zle -N autosuggest-orig-1-user:_zsh_highlight_widget_orig-s000-r288-zle-line-finish _zsh_highlight_widget_orig-s000-r288-zle-line-finish
zle -N autosuggest-orig-1-user:_zsh_highlight_widget_orig-s000-r288-zle-line-init _zsh_highlight_widget_orig-s000-r288-zle-line-init
zle -N autosuggest-orig-1-vi-add-eol _zsh_highlight_widget_orig-s000-r288-vi-add-eol
zle -N autosuggest-orig-1-vi-add-next _zsh_highlight_widget_orig-s000-r288-vi-add-next
zle -N autosuggest-orig-1-vi-backward-blank-word _zsh_highlight_widget_orig-s000-r288-vi-backward-blank-word
zle -N autosuggest-orig-1-vi-backward-blank-word-end _zsh_highlight_widget_orig-s000-r288-vi-backward-blank-word-end
zle -N autosuggest-orig-1-vi-backward-char _zsh_highlight_widget_orig-s000-r288-vi-backward-char
zle -N autosuggest-orig-1-vi-backward-delete-char _zsh_highlight_widget_orig-s000-r288-vi-backward-delete-char
zle -N autosuggest-orig-1-vi-backward-kill-word _zsh_highlight_widget_orig-s000-r288-vi-backward-kill-word
zle -N autosuggest-orig-1-vi-backward-word _zsh_highlight_widget_orig-s000-r288-vi-backward-word
zle -N autosuggest-orig-1-vi-backward-word-end _zsh_highlight_widget_orig-s000-r288-vi-backward-word-end
zle -N autosuggest-orig-1-vi-beginning-of-line _zsh_highlight_widget_orig-s000-r288-vi-beginning-of-line
zle -N autosuggest-orig-1-vi-caps-lock-panic _zsh_highlight_widget_orig-s000-r288-vi-caps-lock-panic
zle -N autosuggest-orig-1-vi-change _zsh_highlight_widget_orig-s000-r288-vi-change
zle -N autosuggest-orig-1-vi-change-eol _zsh_highlight_widget_orig-s000-r288-vi-change-eol
zle -N autosuggest-orig-1-vi-change-whole-line _zsh_highlight_widget_orig-s000-r288-vi-change-whole-line
zle -N autosuggest-orig-1-vi-cmd-mode _zsh_highlight_widget_orig-s000-r288-vi-cmd-mode
zle -N autosuggest-orig-1-vi-delete _zsh_highlight_widget_orig-s000-r288-vi-delete
zle -N autosuggest-orig-1-vi-delete-char _zsh_highlight_widget_orig-s000-r288-vi-delete-char
zle -N autosuggest-orig-1-vi-digit-or-beginning-of-line _zsh_highlight_widget_orig-s000-r288-vi-digit-or-beginning-of-line
zle -N autosuggest-orig-1-vi-down-case _zsh_highlight_widget_orig-s000-r288-vi-down-case
zle -N autosuggest-orig-1-vi-down-line-or-history _zsh_highlight_widget_orig-s000-r288-vi-down-line-or-history
zle -N autosuggest-orig-1-vi-end-of-line _zsh_highlight_widget_orig-s000-r288-vi-end-of-line
zle -N autosuggest-orig-1-vi-fetch-history _zsh_highlight_widget_orig-s000-r288-vi-fetch-history
zle -N autosuggest-orig-1-vi-find-next-char _zsh_highlight_widget_orig-s000-r288-vi-find-next-char
zle -N autosuggest-orig-1-vi-find-next-char-skip _zsh_highlight_widget_orig-s000-r288-vi-find-next-char-skip
zle -N autosuggest-orig-1-vi-find-prev-char _zsh_highlight_widget_orig-s000-r288-vi-find-prev-char
zle -N autosuggest-orig-1-vi-find-prev-char-skip _zsh_highlight_widget_orig-s000-r288-vi-find-prev-char-skip
zle -N autosuggest-orig-1-vi-first-non-blank _zsh_highlight_widget_orig-s000-r288-vi-first-non-blank
zle -N autosuggest-orig-1-vi-forward-blank-word _zsh_highlight_widget_orig-s000-r288-vi-forward-blank-word
zle -N autosuggest-orig-1-vi-forward-blank-word-end _zsh_highlight_widget_orig-s000-r288-vi-forward-blank-word-end
zle -N autosuggest-orig-1-vi-forward-char _zsh_highlight_widget_orig-s000-r288-vi-forward-char
zle -N autosuggest-orig-1-vi-forward-word _zsh_highlight_widget_orig-s000-r288-vi-forward-word
zle -N autosuggest-orig-1-vi-forward-word-end _zsh_highlight_widget_orig-s000-r288-vi-forward-word-end
zle -N autosuggest-orig-1-vi-goto-column _zsh_highlight_widget_orig-s000-r288-vi-goto-column
zle -N autosuggest-orig-1-vi-goto-mark _zsh_highlight_widget_orig-s000-r288-vi-goto-mark
zle -N autosuggest-orig-1-vi-goto-mark-line _zsh_highlight_widget_orig-s000-r288-vi-goto-mark-line
zle -N autosuggest-orig-1-vi-history-search-backward _zsh_highlight_widget_orig-s000-r288-vi-history-search-backward
zle -N autosuggest-orig-1-vi-history-search-forward _zsh_highlight_widget_orig-s000-r288-vi-history-search-forward
zle -N autosuggest-orig-1-vi-indent _zsh_highlight_widget_orig-s000-r288-vi-indent
zle -N autosuggest-orig-1-vi-insert _zsh_highlight_widget_orig-s000-r288-vi-insert
zle -N autosuggest-orig-1-vi-insert-bol _zsh_highlight_widget_orig-s000-r288-vi-insert-bol
zle -N autosuggest-orig-1-vi-join _zsh_highlight_widget_orig-s000-r288-vi-join
zle -N autosuggest-orig-1-vi-kill-eol _zsh_highlight_widget_orig-s000-r288-vi-kill-eol
zle -N autosuggest-orig-1-vi-kill-line _zsh_highlight_widget_orig-s000-r288-vi-kill-line
zle -N autosuggest-orig-1-vi-match-bracket _zsh_highlight_widget_orig-s000-r288-vi-match-bracket
zle -N autosuggest-orig-1-vi-open-line-above _zsh_highlight_widget_orig-s000-r288-vi-open-line-above
zle -N autosuggest-orig-1-vi-open-line-below _zsh_highlight_widget_orig-s000-r288-vi-open-line-below
zle -N autosuggest-orig-1-vi-oper-swap-case _zsh_highlight_widget_orig-s000-r288-vi-oper-swap-case
zle -N autosuggest-orig-1-vi-pound-insert _zsh_highlight_widget_orig-s000-r288-vi-pound-insert
zle -N autosuggest-orig-1-vi-put-after _zsh_highlight_widget_orig-s000-r288-vi-put-after
zle -N autosuggest-orig-1-vi-put-before _zsh_highlight_widget_orig-s000-r288-vi-put-before
zle -N autosuggest-orig-1-vi-quoted-insert _zsh_highlight_widget_orig-s000-r288-vi-quoted-insert
zle -N autosuggest-orig-1-vi-repeat-change _zsh_highlight_widget_orig-s000-r288-vi-repeat-change
zle -N autosuggest-orig-1-vi-repeat-find _zsh_highlight_widget_orig-s000-r288-vi-repeat-find
zle -N autosuggest-orig-1-vi-repeat-search _zsh_highlight_widget_orig-s000-r288-vi-repeat-search
zle -N autosuggest-orig-1-vi-replace _zsh_highlight_widget_orig-s000-r288-vi-replace
zle -N autosuggest-orig-1-vi-replace-chars _zsh_highlight_widget_orig-s000-r288-vi-replace-chars
zle -N autosuggest-orig-1-vi-rev-repeat-find _zsh_highlight_widget_orig-s000-r288-vi-rev-repeat-find
zle -N autosuggest-orig-1-vi-rev-repeat-search _zsh_highlight_widget_orig-s000-r288-vi-rev-repeat-search
zle -N autosuggest-orig-1-vi-set-buffer _zsh_highlight_widget_orig-s000-r288-vi-set-buffer
zle -N autosuggest-orig-1-vi-set-mark _zsh_highlight_widget_orig-s000-r288-vi-set-mark
zle -N autosuggest-orig-1-vi-substitute _zsh_highlight_widget_orig-s000-r288-vi-substitute
zle -N autosuggest-orig-1-vi-swap-case _zsh_highlight_widget_orig-s000-r288-vi-swap-case
zle -N autosuggest-orig-1-vi-undo-change _zsh_highlight_widget_orig-s000-r288-vi-undo-change
zle -N autosuggest-orig-1-vi-unindent _zsh_highlight_widget_orig-s000-r288-vi-unindent
zle -N autosuggest-orig-1-vi-up-case _zsh_highlight_widget_orig-s000-r288-vi-up-case
zle -N autosuggest-orig-1-vi-up-line-or-history _zsh_highlight_widget_orig-s000-r288-vi-up-line-or-history
zle -N autosuggest-orig-1-vi-yank _zsh_highlight_widget_orig-s000-r288-vi-yank
zle -N autosuggest-orig-1-vi-yank-eol _zsh_highlight_widget_orig-s000-r288-vi-yank-eol
zle -N autosuggest-orig-1-vi-yank-whole-line _zsh_highlight_widget_orig-s000-r288-vi-yank-whole-line
zle -N autosuggest-orig-1-visual-line-mode _zsh_highlight_widget_orig-s000-r288-visual-line-mode
zle -N autosuggest-orig-1-visual-mode _zsh_highlight_widget_orig-s000-r288-visual-mode
zle -N autosuggest-orig-1-what-cursor-position _zsh_highlight_widget_orig-s000-r288-what-cursor-position
zle -N autosuggest-orig-1-where-is _zsh_highlight_widget_orig-s000-r288-where-is
zle -N autosuggest-suggest _zsh_highlight_widget_orig-s000-r288-autosuggest-suggest
zle -N autosuggest-toggle _zsh_highlight_widget_orig-s000-r288-autosuggest-toggle
zle -N backward-char _zsh_autosuggest_bound_1_backward-char
zle -N backward-delete-char _zsh_autosuggest_bound_1_backward-delete-char
zle -N backward-delete-word _zsh_autosuggest_bound_1_backward-delete-word
zle -N backward-kill-line _zsh_autosuggest_bound_1_backward-kill-line
zle -N backward-kill-word _zsh_autosuggest_bound_1_backward-kill-word
zle -N backward-word _zsh_autosuggest_bound_1_backward-word
zle -N beginning-of-buffer-or-history _zsh_autosuggest_bound_1_beginning-of-buffer-or-history
zle -N beginning-of-history _zsh_autosuggest_bound_1_beginning-of-history
zle -N beginning-of-line _zsh_autosuggest_bound_1_beginning-of-line
zle -N beginning-of-line-hist _zsh_autosuggest_bound_1_beginning-of-line-hist
zle -N bracketed-paste _zsh_autosuggest_bound_1_bracketed-paste
zle -N capitalize-word _zsh_autosuggest_bound_1_capitalize-word
zle -N clear-screen _zsh_autosuggest_bound_1_clear-screen
zle -N complete-word _zsh_autosuggest_bound_1_complete-word
zle -N copy-prev-shell-word _zsh_autosuggest_bound_1_copy-prev-shell-word
zle -N copy-prev-word _zsh_autosuggest_bound_1_copy-prev-word
zle -N copy-region-as-kill _zsh_autosuggest_bound_1_copy-region-as-kill
zle -N deactivate-region _zsh_autosuggest_bound_1_deactivate-region
zle -N delete-char _zsh_autosuggest_bound_1_delete-char
zle -N delete-char-or-list _zsh_autosuggest_bound_1_delete-char-or-list
zle -N delete-word _zsh_autosuggest_bound_1_delete-word
zle -N describe-key-briefly _zsh_autosuggest_bound_1_describe-key-briefly
zle -N digit-argument _zsh_autosuggest_bound_1_digit-argument
zle -N down-case-word _zsh_autosuggest_bound_1_down-case-word
zle -N down-history _zsh_autosuggest_bound_1_down-history
zle -N down-line _zsh_autosuggest_bound_1_down-line
zle -N down-line-or-beginning-search _zsh_autosuggest_bound_1_down-line-or-beginning-search
zle -N down-line-or-history _zsh_autosuggest_bound_1_down-line-or-history
zle -N down-line-or-search _zsh_autosuggest_bound_1_down-line-or-search
zle -N edit-command-line _zsh_autosuggest_bound_1_edit-command-line
zle -N emacs-backward-word _zsh_autosuggest_bound_1_emacs-backward-word
zle -N emacs-forward-word _zsh_autosuggest_bound_1_emacs-forward-word
zle -N end-of-buffer-or-history _zsh_autosuggest_bound_1_end-of-buffer-or-history
zle -N end-of-history _zsh_autosuggest_bound_1_end-of-history
zle -N end-of-line _zsh_autosuggest_bound_1_end-of-line
zle -N end-of-line-hist _zsh_autosuggest_bound_1_end-of-line-hist
zle -N end-of-list _zsh_autosuggest_bound_1_end-of-list
zle -N exchange-point-and-mark _zsh_autosuggest_bound_1_exchange-point-and-mark
zle -N execute-last-named-cmd _zsh_autosuggest_bound_1_execute-last-named-cmd
zle -N execute-named-cmd _zsh_autosuggest_bound_1_execute-named-cmd
zle -N expand-cmd-path _zsh_autosuggest_bound_1_expand-cmd-path
zle -N expand-history _zsh_autosuggest_bound_1_expand-history
zle -N expand-or-complete _zsh_autosuggest_bound_1_expand-or-complete
zle -N expand-or-complete-prefix _zsh_autosuggest_bound_1_expand-or-complete-prefix
zle -N expand-word _zsh_autosuggest_bound_1_expand-word
zle -N fast-highlight-check-path-handler _zsh_autosuggest_bound_1_fast-highlight-check-path-handler
zle -N forward-char _zsh_autosuggest_bound_1_forward-char
zle -N forward-word _zsh_autosuggest_bound_1_forward-word
zle -N fzf-cd-widget _zsh_autosuggest_bound_1_fzf-cd-widget
zle -N fzf-completion _zsh_autosuggest_bound_1_fzf-completion
zle -N fzf-file-widget _zsh_autosuggest_bound_1_fzf-file-widget
zle -N fzf-history-widget _zsh_autosuggest_bound_1_fzf-history-widget
zle -N fzf-tab-complete _zsh_autosuggest_bound_1_fzf-tab-complete
zle -N fzf-tab-debug _zsh_autosuggest_bound_1_fzf-tab-debug
zle -N fzf-tab-dummy _zsh_autosuggest_bound_1_fzf-tab-dummy
zle -N get-line _zsh_autosuggest_bound_1_get-line
zle -N gosmacs-transpose-chars _zsh_autosuggest_bound_1_gosmacs-transpose-chars
zle -N history-beginning-search-backward _zsh_autosuggest_bound_1_history-beginning-search-backward
zle -N history-beginning-search-forward _zsh_autosuggest_bound_1_history-beginning-search-forward
zle -N history-incremental-pattern-search-backward _zsh_autosuggest_bound_1_history-incremental-pattern-search-backward
zle -N history-incremental-pattern-search-forward _zsh_autosuggest_bound_1_history-incremental-pattern-search-forward
zle -N history-incremental-search-backward _zsh_autosuggest_bound_1_history-incremental-search-backward
zle -N history-incremental-search-forward _zsh_autosuggest_bound_1_history-incremental-search-forward
zle -N history-search-backward _zsh_autosuggest_bound_1_history-search-backward
zle -N history-search-forward _zsh_autosuggest_bound_1_history-search-forward
zle -N history-substring-search-down _zsh_autosuggest_bound_1_history-substring-search-down
zle -N history-substring-search-up _zsh_autosuggest_bound_1_history-substring-search-up
zle -N infer-next-history _zsh_autosuggest_bound_1_infer-next-history
zle -N insert-last-word _zsh_autosuggest_bound_1_insert-last-word
zle -N kill-buffer _zsh_autosuggest_bound_1_kill-buffer
zle -N kill-line _zsh_autosuggest_bound_1_kill-line
zle -N kill-region _zsh_autosuggest_bound_1_kill-region
zle -N kill-whole-line _zsh_autosuggest_bound_1_kill-whole-line
zle -N kill-word _zsh_autosuggest_bound_1_kill-word
zle -N list-choices _zsh_autosuggest_bound_1_list-choices
zle -N list-expand _zsh_autosuggest_bound_1_list-expand
zle -N magic-space _zsh_autosuggest_bound_1_magic-space
zle -N menu-complete _zsh_autosuggest_bound_1_menu-complete
zle -N menu-expand-or-complete _zsh_autosuggest_bound_1_menu-expand-or-complete
zle -N menu-select _zsh_autosuggest_bound_1_menu-select
zle -N neg-argument _zsh_autosuggest_bound_1_neg-argument
zle -C orig-s000-r288-_bash_complete-word .complete-word _bash_completions
zle -C orig-s000-r288-_bash_list-choices .list-choices _bash_completions
zle -C orig-s000-r288-_complete_debug .complete-word _complete_debug
zle -C orig-s000-r288-_complete_help .complete-word _complete_help
zle -C orig-s000-r288-_complete_tag .complete-word _complete_tag
zle -C orig-s000-r288-_correct_filename .complete-word _correct_filename
zle -C orig-s000-r288-_correct_word .complete-word _correct_word
zle -C orig-s000-r288-_expand_alias .complete-word _expand_alias
zle -C orig-s000-r288-_expand_word .complete-word _expand_word
zle -C orig-s000-r288-_history-complete-newer .complete-word _history_complete_word
zle -C orig-s000-r288-_history-complete-older .complete-word _history_complete_word
zle -C orig-s000-r288-_list_expansions .list-choices _expand_word
zle -C orig-s000-r288-_most_recent_file .complete-word _most_recent_file
zle -C orig-s000-r288-_next_tags .list-choices _next_tags
zle -C orig-s000-r288-_read_comp .complete-word _read_comp
zle -N orig-s000-r288-autosuggest-accept _zsh_autosuggest_widget_accept
zle -N orig-s000-r288-autosuggest-capture-completion _zsh_autosuggest_capture_completion_widget
zle -N orig-s000-r288-autosuggest-clear _zsh_autosuggest_widget_clear
zle -N orig-s000-r288-autosuggest-disable _zsh_autosuggest_widget_disable
zle -N orig-s000-r288-autosuggest-enable _zsh_autosuggest_widget_enable
zle -N orig-s000-r288-autosuggest-execute _zsh_autosuggest_widget_execute
zle -N orig-s000-r288-autosuggest-fetch _zsh_autosuggest_widget_fetch
zle -N orig-s000-r288-autosuggest-suggest _zsh_autosuggest_widget_suggest
zle -N orig-s000-r288-autosuggest-toggle _zsh_autosuggest_widget_toggle
zle -N orig-s000-r288-bracketed-paste bracketed-paste-magic
zle -C orig-s000-r288-complete-word .complete-word _main_complete
zle -C orig-s000-r288-delete-char-or-list .delete-char-or-list _main_complete
zle -N orig-s000-r288-down-line-or-beginning-search down-line-or-beginning-search
zle -N orig-s000-r288-edit-command-line edit-command-line
zle -C orig-s000-r288-expand-or-complete .expand-or-complete _main_complete
zle -C orig-s000-r288-expand-or-complete-prefix .expand-or-complete-prefix _main_complete
zle -N orig-s000-r288-fzf-cd-widget fzf-cd-widget
zle -N orig-s000-r288-fzf-completion fzf-completion
zle -N orig-s000-r288-fzf-file-widget fzf-file-widget
zle -N orig-s000-r288-fzf-history-widget fzf-history-widget
zle -N orig-s000-r288-fzf-tab-complete fzf-tab-complete
zle -N orig-s000-r288-fzf-tab-debug fzf-tab-debug
zle -N orig-s000-r288-fzf-tab-dummy fzf-tab-dummy
zle -N orig-s000-r288-get-line .hist.get-line.widget
zle -C orig-s000-r288-list-choices .list-choices _main_complete
zle -C orig-s000-r288-menu-complete .menu-complete _main_complete
zle -C orig-s000-r288-menu-expand-or-complete .menu-expand-or-complete _main_complete
zle -N orig-s000-r288-push-input .hist.push-line.widget
zle -N orig-s000-r288-push-line .hist.push-line.widget
zle -N orig-s000-r288-push-line-or-edit .hist.push-line.widget
zle -C orig-s000-r288-reverse-menu-complete .reverse-menu-complete _main_complete
zle -N orig-s000-r288-self-insert url-quote-magic
zle -N orig-s000-r288-toggle-fzf-tab toggle-fzf-tab
zle -N orig-s000-r288-undo .hist.undo.widget
zle -N orig-s000-r288-up-line-or-beginning-search up-line-or-beginning-search
zle -N orig-s000-r288-zle-line-finish zle-line-finish
zle -N orig-s000-r288-zle-line-init zle-line-init
zle -N overwrite-mode _zsh_autosuggest_bound_1_overwrite-mode
zle -N pound-insert _zsh_autosuggest_bound_1_pound-insert
zle -N push-input _zsh_autosuggest_bound_1_push-input
zle -N push-line _zsh_autosuggest_bound_1_push-line
zle -N push-line-or-edit _zsh_autosuggest_bound_1_push-line-or-edit
zle -N put-replace-selection _zsh_autosuggest_bound_1_put-replace-selection
zle -N quote-line _zsh_autosuggest_bound_1_quote-line
zle -N quote-region _zsh_autosuggest_bound_1_quote-region
zle -N quoted-insert _zsh_autosuggest_bound_1_quoted-insert
zle -N read-command _zsh_autosuggest_bound_1_read-command
zle -N recursive-edit _zsh_autosuggest_bound_1_recursive-edit
zle -N redisplay _zsh_autosuggest_bound_1_redisplay
zle -N redo _zsh_autosuggest_bound_1_redo
zle -N reset-prompt _zsh_autosuggest_bound_1_reset-prompt
zle -N reverse-menu-complete _zsh_autosuggest_bound_1_reverse-menu-complete
zle -N select-a-blank-word _zsh_autosuggest_bound_1_select-a-blank-word
zle -N select-a-shell-word _zsh_autosuggest_bound_1_select-a-shell-word
zle -N select-a-word _zsh_autosuggest_bound_1_select-a-word
zle -N select-in-blank-word _zsh_autosuggest_bound_1_select-in-blank-word
zle -N select-in-shell-word _zsh_autosuggest_bound_1_select-in-shell-word
zle -N select-in-word _zsh_autosuggest_bound_1_select-in-word
zle -N self-insert _zsh_autosuggest_bound_1_self-insert
zle -N self-insert-unmeta _zsh_autosuggest_bound_1_self-insert-unmeta
zle -N send-break _zsh_autosuggest_bound_1_send-break
zle -N set-mark-command _zsh_autosuggest_bound_1_set-mark-command
zle -N spell-word _zsh_autosuggest_bound_1_spell-word
zle -N split-undo _zsh_autosuggest_bound_1_split-undo
zle -N toggle-fzf-tab _zsh_autosuggest_bound_1_toggle-fzf-tab
zle -N transpose-chars _zsh_autosuggest_bound_1_transpose-chars
zle -N transpose-words _zsh_autosuggest_bound_1_transpose-words
zle -N undefined-key _zsh_autosuggest_bound_1_undefined-key
zle -N undo _zsh_autosuggest_bound_1_undo
zle -N universal-argument _zsh_autosuggest_bound_1_universal-argument
zle -N up-case-word _zsh_autosuggest_bound_1_up-case-word
zle -N up-history _zsh_autosuggest_bound_1_up-history
zle -N up-line _zsh_autosuggest_bound_1_up-line
zle -N up-line-or-beginning-search _zsh_autosuggest_bound_1_up-line-or-beginning-search
zle -N up-line-or-history _zsh_autosuggest_bound_1_up-line-or-history
zle -N up-line-or-search _zsh_autosuggest_bound_1_up-line-or-search
zle -N user:_zsh_highlight_widget_orig-s000-r288-zle-line-finish _zsh_autosuggest_bound_1_user:_zsh_highlight_widget_orig-s000-r288-zle-line-finish
zle -N user:_zsh_highlight_widget_orig-s000-r288-zle-line-init _zsh_autosuggest_bound_1_user:_zsh_highlight_widget_orig-s000-r288-zle-line-init
zle -N vi-add-eol _zsh_autosuggest_bound_1_vi-add-eol
zle -N vi-add-next _zsh_autosuggest_bound_1_vi-add-next
zle -N vi-backward-blank-word _zsh_autosuggest_bound_1_vi-backward-blank-word
zle -N vi-backward-blank-word-end _zsh_autosuggest_bound_1_vi-backward-blank-word-end
zle -N vi-backward-char _zsh_autosuggest_bound_1_vi-backward-char
zle -N vi-backward-delete-char _zsh_autosuggest_bound_1_vi-backward-delete-char
zle -N vi-backward-kill-word _zsh_autosuggest_bound_1_vi-backward-kill-word
zle -N vi-backward-word _zsh_autosuggest_bound_1_vi-backward-word
zle -N vi-backward-word-end _zsh_autosuggest_bound_1_vi-backward-word-end
zle -N vi-beginning-of-line _zsh_autosuggest_bound_1_vi-beginning-of-line
zle -N vi-caps-lock-panic _zsh_autosuggest_bound_1_vi-caps-lock-panic
zle -N vi-change _zsh_autosuggest_bound_1_vi-change
zle -N vi-change-eol _zsh_autosuggest_bound_1_vi-change-eol
zle -N vi-change-whole-line _zsh_autosuggest_bound_1_vi-change-whole-line
zle -N vi-cmd-mode _zsh_autosuggest_bound_1_vi-cmd-mode
zle -N vi-delete _zsh_autosuggest_bound_1_vi-delete
zle -N vi-delete-char _zsh_autosuggest_bound_1_vi-delete-char
zle -N vi-digit-or-beginning-of-line _zsh_autosuggest_bound_1_vi-digit-or-beginning-of-line
zle -N vi-down-case _zsh_autosuggest_bound_1_vi-down-case
zle -N vi-down-line-or-history _zsh_autosuggest_bound_1_vi-down-line-or-history
zle -N vi-end-of-line _zsh_autosuggest_bound_1_vi-end-of-line
zle -N vi-fetch-history _zsh_autosuggest_bound_1_vi-fetch-history
zle -N vi-find-next-char _zsh_autosuggest_bound_1_vi-find-next-char
zle -N vi-find-next-char-skip _zsh_autosuggest_bound_1_vi-find-next-char-skip
zle -N vi-find-prev-char _zsh_autosuggest_bound_1_vi-find-prev-char
zle -N vi-find-prev-char-skip _zsh_autosuggest_bound_1_vi-find-prev-char-skip
zle -N vi-first-non-blank _zsh_autosuggest_bound_1_vi-first-non-blank
zle -N vi-forward-blank-word _zsh_autosuggest_bound_1_vi-forward-blank-word
zle -N vi-forward-blank-word-end _zsh_autosuggest_bound_1_vi-forward-blank-word-end
zle -N vi-forward-char _zsh_autosuggest_bound_1_vi-forward-char
zle -N vi-forward-word _zsh_autosuggest_bound_1_vi-forward-word
zle -N vi-forward-word-end _zsh_autosuggest_bound_1_vi-forward-word-end
zle -N vi-goto-column _zsh_autosuggest_bound_1_vi-goto-column
zle -N vi-goto-mark _zsh_autosuggest_bound_1_vi-goto-mark
zle -N vi-goto-mark-line _zsh_autosuggest_bound_1_vi-goto-mark-line
zle -N vi-history-search-backward _zsh_autosuggest_bound_1_vi-history-search-backward
zle -N vi-history-search-forward _zsh_autosuggest_bound_1_vi-history-search-forward
zle -N vi-indent _zsh_autosuggest_bound_1_vi-indent
zle -N vi-insert _zsh_autosuggest_bound_1_vi-insert
zle -N vi-insert-bol _zsh_autosuggest_bound_1_vi-insert-bol
zle -N vi-join _zsh_autosuggest_bound_1_vi-join
zle -N vi-kill-eol _zsh_autosuggest_bound_1_vi-kill-eol
zle -N vi-kill-line _zsh_autosuggest_bound_1_vi-kill-line
zle -N vi-match-bracket _zsh_autosuggest_bound_1_vi-match-bracket
zle -N vi-open-line-above _zsh_autosuggest_bound_1_vi-open-line-above
zle -N vi-open-line-below _zsh_autosuggest_bound_1_vi-open-line-below
zle -N vi-oper-swap-case _zsh_autosuggest_bound_1_vi-oper-swap-case
zle -N vi-pound-insert _zsh_autosuggest_bound_1_vi-pound-insert
zle -N vi-put-after _zsh_autosuggest_bound_1_vi-put-after
zle -N vi-put-before _zsh_autosuggest_bound_1_vi-put-before
zle -N vi-quoted-insert _zsh_autosuggest_bound_1_vi-quoted-insert
zle -N vi-repeat-change _zsh_autosuggest_bound_1_vi-repeat-change
zle -N vi-repeat-find _zsh_autosuggest_bound_1_vi-repeat-find
zle -N vi-repeat-search _zsh_autosuggest_bound_1_vi-repeat-search
zle -N vi-replace _zsh_autosuggest_bound_1_vi-replace
zle -N vi-replace-chars _zsh_autosuggest_bound_1_vi-replace-chars
zle -N vi-rev-repeat-find _zsh_autosuggest_bound_1_vi-rev-repeat-find
zle -N vi-rev-repeat-search _zsh_autosuggest_bound_1_vi-rev-repeat-search
zle -N vi-set-buffer _zsh_autosuggest_bound_1_vi-set-buffer
zle -N vi-set-mark _zsh_autosuggest_bound_1_vi-set-mark
zle -N vi-substitute _zsh_autosuggest_bound_1_vi-substitute
zle -N vi-swap-case _zsh_autosuggest_bound_1_vi-swap-case
zle -N vi-undo-change _zsh_autosuggest_bound_1_vi-undo-change
zle -N vi-unindent _zsh_autosuggest_bound_1_vi-unindent
zle -N vi-up-case _zsh_autosuggest_bound_1_vi-up-case
zle -N vi-up-line-or-history _zsh_autosuggest_bound_1_vi-up-line-or-history
zle -N vi-yank _zsh_autosuggest_bound_1_vi-yank
zle -N vi-yank-eol _zsh_autosuggest_bound_1_vi-yank-eol
zle -N vi-yank-whole-line _zsh_autosuggest_bound_1_vi-yank-whole-line
zle -N visual-line-mode _zsh_autosuggest_bound_1_visual-line-mode
zle -N visual-mode _zsh_autosuggest_bound_1_visual-mode
zle -N what-cursor-position _zsh_autosuggest_bound_1_what-cursor-position
zle -N where-is _zsh_autosuggest_bound_1_where-is
zle -N yank-pop _zsh_highlight_widget_orig-s000-r288-yank-pop
zle -N zle-isearch-update _zsh_highlight_widget_zle-isearch-update
zle -N zle-line-finish azhw:zle-line-finish
zle -N zle-line-init azhw:zle-line-init
builtin setopt aliases
