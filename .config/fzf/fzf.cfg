############# >FZF Base< #############

bindkey -s '^[i' 'interactive_fzf \n'
bindkey -s '^nn' 'notes \n'
bindkey -s '^fd' 'dotf \n'
bindkey -s '^fn' 'live_search_notes \n'
bindkey -s '^ff' 'fuz \n'
bindkey    '^ft' 'toggle-fzf-tab'
# bindkey '^R' fzf-history-widget

source "/data/data/com.termux/files/home/.fzf/shell/key-bindings.zsh"

source "$HOME/scripts/fzf_functions.zsh"

# morhetz/gruvbox
# export FZF_DEFAULT_OPTS='--color=bg+:#3c3836,bg:#32302f,spinner:#fb4934,hl:#928374,fg:#ebdbb2,header:#928374,info:#8ec07c,pointer:#fb4934,marker:#fb4934,fg+:#ebdbb2,prompt:#da3823,hl+:#fb4934'

export FZF_BASE='~/.fzf'
#export FZF_BASE='$PREFIX/share/fzf'
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git --c always'
# export FZF_DEFAULT_COMMAND='ag --hidden --color -S -U -g ""'
export FZF_DEFAULT_OPTS="--height 90% --min-height 20 --color=bg:-1,bg+:#32302f,fg:#eadab1,fg+:#ebdbb2:bold \
  --color=gutter:-1,info:#d79921,border:001,spinner:108,hl:#fa3823,hl+:#928374 --cycle \
  --color=header:#8ec07c,pointer:#cd241d,prompt:#408083,marker:#78970a --marker='âˆš' --border \
  --layout=reverse --info=inline --ansi --preview-window=down,60%,border-top,+{2}+3/3,hidden,wrap \
  --bind 'change:first,alt-t:toggle-preview,alt-s:toggle-sort,ctrl-k:kill-line,alt-bs:toggle-up' \
  --bind 'alt-w:toggle-preview-wrap,alt-right:kill-word,alt-left:backward-kill-word' --filepath-word \
  --bind 'ctrl-d:reload(fd --type d -a --color=always --hidden),ctrl-f:reload($FZF_DEFAULT_COMMAND)' \
  --bind 'alt-l:execute(less -f {}),alt-y:execute-silent(echo {+} | termux-clipboard-set)+abort' \
  --bind 'alt-o:execute(echo {+} | xargs -o $EDITOR&)' -0 \
  --preview '([[ -f {} ]] && (bat --style=numbers --color=always --line-range :200 {} || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200 || echo {})'"
export FZF_ALT_C_COMMAND='fd --type d . --color=always --hidden -L --no-ignore-vcs --base-directory /data/data/com.termux/files'
export FZF_ALT_C_OPTS="--ansi --preview 'tree -U -l -C -L 3 {}' --preview-window=right,50%:hidden \
  --bind=alt-t:toggle-preview --bind change:first --keep-right"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--ansi --preview 'bat --color=always --line-range :200 {}' \
        --preview-window 'down,60%,border-top,+{2}+3/3,hidden' --bind change:first --keep-right"
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window=down,3,hidden,wrap,border --bind 'alt-t:toggle-preview'"
# export FZF_CTRL_R_OPTS='--sort --exact'
export FZF_TMUX_OPTS="-d 60% --preview-window 'down,50%:hidden:wrap'"
export FZF_TMUX=1
export FZF_COMPLETION_OPTS="--border --info=inline --preview 'eval eval echo {+}' --preview-window=down,3,hidden,wrap,border"
export FZF_HISTORY_DIR='~/.local/share/fzf-history'
export DOTBARE_DIR="$HOME/.cfg.git"
export DOTBARE_TREE="$HOME"
export DOTBARE_FZF_DEFAULT_OPTS="--preview-window=down,70% --keep-right"
export DOTBARE_DIFF_PAGER="delta --diff-so-fancy --line-numbers"
# alias dotbare="$HOME/.zsh/custom/plugins/dotbare/dotbare"
bindkey -s '^Xx' 'dotbare fedit \n'
_dotbare_completion_cmd #dotbare

# FZF Function Examples

fzf-history-widget-accept() {
  fzf-history-widget
  zle accept-line
}
zle -N fzf-history-widget-accept
bindkey '^X^R' fzf-history-widget-accept

# Auto cd with fzf
fzf_cd() { zle -I; DIR=$(find ${1:-*} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf --keep-right) && "$DIR" ; }; zle -N fzf_cd;
  bindkey '^[j' fzf_cd

# zlua fzf integration
# unalias z 2> /dev/null
# unalias zz 2> /dev/null

# j() {
#     [ $# -gt 0 ] && _zlua "$*" && return
#     "$(_zlua -l 2>&1 | fzf --keep-right --height 85% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
# }

j() {
  if [[ -z "$*" ]]; then
    cd "$(_zlua -l 2>&1 | fzf --keep-right +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _zlua "$@"
  fi
}

jj() {
  cd "$(_zlua -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf --keep-right -q "$_last_z_args")"
}

# run npm script (requires jq)
fns() {
  local script
  script=$(cat $HOME/package.json | jq -r '.scripts | keys[] ' | sort ) && npm run $(echo "$script")
}

# ftags - search ctags with preview
# only works if tags-file was generated with --excmd=number
ftags() {
  local line
  [ -e tags ] &&
    line=$(
      awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
        fzf \
        --nth=1,2 \
        --with-nth=2 \
        --preview-window="50%" \
        --preview="bat {3} --color=always | tail -n +\$(echo {4} | tr -d \";\\\"\")"
              ) && ${EDITOR:-vim} $(cut -f3 <<< "$line") -c "set nocst" \
                -c "silent tag $(cut -f2 <<< "$line")"
              }

# see environment variables
envs() {
  # ps eww -o command | tr ' ' '\n'
  printenv | fzf -m
}

# fzf zstyle setup
zstyle ':fzf-tab:complete:*:options' auto_description  'specify: %d'
# set list-colors to enable filename colorizing
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# zstyle ':fzf-tab:complete:*:default' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:cd:*' fzf-flags --preview-window=hidden:right:40%:wrap
zstyle ':fzf-tab:complete:*:*:*:*' fzf-preview 'cat {} --color=always $word'
zstyle ':fzf-tab:complete:*:*:*:*' fzf-flags --preview-window=hidden:down:3:wrap
# rm: advanced fzf-tab-completion (e.g. bak files first)
zstyle ':fzf-tab:complete:*:rm:*:*' file-patterns '*.o:object-files:object\ file *(~|.(old|bak|BAK)):backup-files:backup\ files *~*(~|.(o|old|bak|BAK)):all-files:all\ files'

# use input as query string when completing zlua
zstyle ':fzf-tab:complete:z:*' query-string input
zstyle ':fzf-tab:complete:_zlua:*' query-string input
zstyle ':completion:*:fzf:*' ignore-parents parent pwd
zstyle ':fzf-tab:complete:*:cd:*' ignore-parents parent pwd

# preview when completing env vars (note: only works for exported variables)
# eval twice, first to unescape the string, second to expand the $variable
zstyle ':completion::*:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-completion-opts --preview='eval eval echo {1}'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' \
  fzf-preview 'echo ${(P)word}'
  zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' \
    fzf-flags --preview-window=hidden:down:2:wrap

# give a preview of commandline arguments when completing `kill`
# Add colors to processes for kill completion
zstyle ':completion:*:*:*:*:processes' command "ps -u $USERNAME -o pid,user,comm -w -w"
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-preview \
'[[ $group == "[process ID]" ]] && ps --pid=$word -o cmd --no-headers -w -w'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags --preview-window=down:3:border:wrap --ansi
zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'
zstyle ':fzf-tab:complete:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=$color[cyan]=$color[red]"

zstyle ':fzf-tab:complete:(\\|)run-help:*' fzf-preview 'run-help $word'
zstyle ':fzf-tab:complete:(\\|*/|)man:*' fzf-preview 'man $word'

# preview a `git status` when completing git add
zstyle ':completion::*:git::git,add,*' fzf-completion-opts --preview='git -c color.status=always status --short'
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
'git diff $word | delta'|
zstyle ':fzf-tab:complete:git-log:*' fzf-preview \
'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*' fzf-preview \
'git help $word | bat -plman --color=always'
zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
  'case "$group" in
  "commit tag") git show --color=always $word ;;
  *) git show --color=always $word | delta ;;
esac'
zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
  'case "$group" in
  "modified file") git diff $word | delta ;;
  "recent commit object name") git show --color=always $word | delta ;;
  *) git log --color=always $word ;;
  esac'

# if other subcommand to git is given, show a git diff or git log
zstyle ':completion::*:git::*,[a-z]*' fzf-completion-opts --preview='eval set -- {+1}for arg in "$@"; do { git diff --color=always -- "$arg" | git log --color=always "$arg" } 2>/dev/null done'
# only for git
# zstyle ':completion:*:*:git:*' fzf-search-display true
# or for everything
zstyle ':completion:*' fzf-search-display true

zstyle ':fzf-tab:user-expand:*' fzf-preview 'less ${word}'
zstyle ':fzf-tab:complete:*:*' fzf-preview 'less ${realpath}'
### key bindings ###
# fzf-tab bindings e.g. switch group using `1` and `2`
zstyle ':fzf-tab:*' switch-group '1' '2'
# zstyle ':fzf-tab:*' fzf-bindings 'space:accept'
# zstyle ':fzf-tab:*' accept-line enter
zstyle ':fzf-tab:*' fzf-bindings 'alt-t:toggle-preview' 'ctrl-a:toggle-all' 'ctrl-j:accept'
zstyle ':fzf-tab:*' continuous-trigger '/'
zstyle ':fzf-tab:complete:*' fzf-bindings \
  'ctrl-v:execute-silent({_FTB_INIT_}code "$realpath")' \
  'ctrl-o:execute-silent({_FTB_INIT_}nvim "$realpath")'
